<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>随风起</title>
  <icon>https://www.gravatar.com/avatar/00f859eb1e66c7afc295b63d6d2327b2</icon>
  <subtitle>分享知识与美好时光</subtitle>
  <link href="https://blog.bywind.xyz/atom.xml" rel="self"/>
  
  <link href="https://blog.bywind.xyz/"/>
  <updated>2023-08-23T06:37:26.000Z</updated>
  <id>https://blog.bywind.xyz/</id>
  
  <author>
    <name>随风起</name>
    <email>jolyne15@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式之结构型模式：构建灵活且可复用的类和对象结构</title>
    <link href="https://blog.bywind.xyz/posts/8d92de36.html"/>
    <id>https://blog.bywind.xyz/posts/8d92de36.html</id>
    <published>2023-07-24T06:42:10.000Z</published>
    <updated>2023-08-23T06:37:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>结构型模式描述如何将类或对象按某种布局组成更大的结构。它分为类结构型模式和对象结构型模式，前者采用继承机制来组织接口和类，后者釆用组合或聚合来组合对象。</p><p>由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象结构型模式比类结构型模式具有更大的灵活性。</p><p>结构型模式分为以下 7 种：</p><ul><li>代理模式</li><li>适配器模式</li><li>装饰者模式</li><li>桥接模式</li><li>外观模式</li><li>组合模式</li><li>享元模式</li></ul><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>由于某些原因需要给某对象提供一个代理以控制对该对象的访问。这时，访问对象不适合或者不能直接引用目标对象，代理对象作为访问对象和目标对象之间的中介。</p><p>Java中的代理按照代理类生成时机不同又分为静态代理和动态代理。静态代理代理类在编译期就生成，而动态代理代理类则是在Java运行时动态生成。动态代理又有JDK代理和CGLib代理两种。</p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>代理（Proxy）模式分为三种角色：</p><ul><li>抽象主题（Subject）类： 通过接口或抽象类声明真实主题和代理对象实现的业务方法。</li><li>真实主题（Real Subject）类： 实现了抽象主题中的具体业务，是代理对象所代表的真实对象，是最终要引用的对象。</li><li>代理（Proxy）类 ： 提供了与真实主题相同的接口，其内部含有对真实主题的引用，它可以访问、控制或扩展真实主题的功能。</li></ul><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>如果要买火车票的话，需要去火车站买票，坐车到火车站，排队等一系列的操作，显然比较麻烦。而火车站在多个地方都有代售点，我们去代售点买票就方便很多了。这个例子就是典型的代理模式，火车站是目标对象，代售点是代理对象。</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202305172336571.png" alt="image-20230517233603479"></p><p><strong>抽象主题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 卖火车票接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SellTickets</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>真实主题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 火车站</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrainStation</span> <span class="keyword">implements</span> <span class="title class_">SellTickets</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;火车站卖票&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代理类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代售点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyPoint</span> <span class="keyword">implements</span> <span class="title class_">SellTickets</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明火车站对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">TrainStation</span> <span class="variable">station</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrainStation</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进行收费&quot;</span>);</span><br><span class="line">        station.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//静态代理</span></span><br><span class="line"><span class="type">ProxyPoint</span> <span class="variable">point</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyPoint</span>();</span><br><span class="line">        point.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><h4 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h4><p><strong>代理工厂</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取代理对象的工厂类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明目标对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">TrainStation</span> <span class="variable">station</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrainStation</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SellTickets <span class="title function_">getProxyObject</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * ClassLoader loader：  类加载器，用于加载代理类</span></span><br><span class="line"><span class="comment">         * Class&lt;?&gt;[] interfaces：   代理类实现接口的字节码对象</span></span><br><span class="line"><span class="comment">         * InvocationHandler：    代理对象调用处理</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">SellTickets</span> <span class="variable">proxyObject</span> <span class="operator">=</span> (SellTickets)Proxy.newProxyInstance(</span><br><span class="line">                station.getClass().getClassLoader(),</span><br><span class="line">                station.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> proxy 代理对象</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> method 对接口中方法进行封装的代理对象</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> args 调用方法的实际参数</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@return</span> 方法的返回值</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                        <span class="comment">// System.out.println(&quot;Invoke方法执行&quot;);</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;代售点收取服务费（JDK动态代理）&quot;</span>);</span><br><span class="line">                        <span class="comment">//调用目标方法</span></span><br><span class="line">                        <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> method.invoke(station, args);</span><br><span class="line">                        <span class="keyword">return</span> invoke;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> proxyObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代理类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sun.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xxx.SellTickets;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">$Proxy0</span> <span class="keyword">extends</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">SellTickets</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler invocationHandler) &#123;</span><br><span class="line">        <span class="built_in">super</span>(invocationHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;equals&quot;</span>, Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>));</span><br><span class="line">            m2 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br><span class="line">            m3 = Class.forName(<span class="string">&quot;com.xxx.SellTickets&quot;</span>).getMethod(<span class="string">&quot;sell&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br><span class="line">            m0 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;hashCode&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchMethodException noSuchMethodException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchMethodError</span>(noSuchMethodException.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClassNotFoundException classNotFoundException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoClassDefFoundError</span>(classNotFoundException.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Boolean)<span class="built_in">this</span>.h.invoke(<span class="built_in">this</span>, m1, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;object&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="built_in">this</span>.h.invoke(<span class="built_in">this</span>, m2, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="built_in">this</span>.h.invoke(<span class="built_in">this</span>, m0, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.h.invoke(<span class="built_in">this</span>, m3, <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ProxyPoint</span> <span class="variable">point</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyPoint</span>();</span><br><span class="line">        point.sell();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取代理对象</span></span><br><span class="line">        <span class="comment">//创建代理工厂</span></span><br><span class="line">        <span class="type">ProxyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>();</span><br><span class="line">        <span class="comment">//获取代理对象</span></span><br><span class="line">        <span class="type">SellTickets</span> <span class="variable">proxyObject</span> <span class="operator">=</span> factory.getProxyObject();</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        proxyObject.sell();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// System.out.println(proxyObject.getClass());</span></span><br><span class="line">        <span class="comment">// while (true)&#123;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程如下：</p><pre><code>1. 在测试类中通过代理对象调用sell()方法2. 根据多态的特性，执行的是代理类（$Proxy0）中的sell()方法3. 代理类（$Proxy0）中的sell()方法中又调用了InvocationHandler接口的子实现类对象的invoke方法4. invoke方法通过反射执行了真实对象所属类(TrainStation)中的sell()方法</code></pre><h4 id="CGLIB动态代理"><a href="#CGLIB动态代理" class="headerlink" title="CGLIB动态代理"></a>CGLIB动态代理</h4><p><strong>代理工厂</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代理对象工厂</span></span><br><span class="line"><span class="comment"> * 获取代理对象（cglib）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CglibProxyFactory</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明火车站对象</span></span><br><span class="line">    <span class="type">TrainStation</span> <span class="variable">station</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrainStation</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TrainStation <span class="title function_">getProxyObject</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//创建Enhancer对象，类似JDK中的proxy类</span></span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置父类字节码对象</span></span><br><span class="line">        enhancer.setSuperclass(TrainStation.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置回调函数</span></span><br><span class="line">        enhancer.setCallback(<span class="built_in">this</span>);</span><br><span class="line">        <span class="comment">//创建代理对象</span></span><br><span class="line">        <span class="type">TrainStation</span> <span class="variable">proxyObject</span> <span class="operator">=</span> (TrainStation) enhancer.create();</span><br><span class="line">        <span class="keyword">return</span> proxyObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;代售点收取服务费（Cglib动态代理）&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> method.invoke(station, objects);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代理类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xxx.TrainStation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.core.ReflectUtils;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.core.Signature;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Callback;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Factory;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrainStation$$EnhancerByCGLIB$$f3f5c491</span></span><br><span class="line"><span class="keyword">extends</span> <span class="title class_">TrainStation</span></span><br><span class="line"><span class="keyword">implements</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> CGLIB$BOUND;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal CGLIB$THREAD_CALLBACKS;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Callback[] CGLIB$STATIC_CALLBACKS;</span><br><span class="line">    <span class="keyword">private</span> MethodInterceptor CGLIB$CALLBACK_0;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Method CGLIB$sell$<span class="number">0</span>$Method;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MethodProxy CGLIB$sell$<span class="number">0</span>$Proxy;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] CGLIB$emptyArgs;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Method CGLIB$finalize$<span class="number">1</span>$Method;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MethodProxy CGLIB$finalize$<span class="number">1</span>$Proxy;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Method CGLIB$equals$<span class="number">2</span>$Method;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MethodProxy CGLIB$equals$<span class="number">2</span>$Proxy;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Method CGLIB$toString$<span class="number">3</span>$Method;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MethodProxy CGLIB$toString$<span class="number">3</span>$Proxy;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Method CGLIB$hashCode$<span class="number">4</span>$Method;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MethodProxy CGLIB$hashCode$<span class="number">4</span>$Proxy;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Method CGLIB$clone$<span class="number">5</span>$Method;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MethodProxy CGLIB$clone$<span class="number">5</span>$Proxy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TrainStation$$EnhancerByCGLIB$$f3f5c491() &#123;</span><br><span class="line">        <span class="type">TrainStation$$EnhancerByCGLIB$$f3f5c491</span> <span class="variable">trainStation$$EnhancerByCGLIB$$f3f5c491</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        TrainStation$$EnhancerByCGLIB$$f3f5c491.CGLIB$BIND_CALLBACKS(trainStation$$EnhancerByCGLIB$$f3f5c491);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        TrainStation$$EnhancerByCGLIB$$f3f5c491.CGLIB$STATICHOOK1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">MethodInterceptor</span> <span class="variable">methodInterceptor</span> <span class="operator">=</span> <span class="built_in">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        <span class="keyword">if</span> (methodInterceptor == <span class="literal">null</span>) &#123;</span><br><span class="line">            TrainStation$$EnhancerByCGLIB$$f3f5c491.CGLIB$BIND_CALLBACKS(<span class="built_in">this</span>);</span><br><span class="line">            methodInterceptor = <span class="built_in">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (methodInterceptor != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> methodInterceptor.intercept(<span class="built_in">this</span>, CGLIB$finalize$<span class="number">1</span>$Method, CGLIB$emptyArgs, CGLIB$finalize$<span class="number">1</span>$Proxy);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">super</span>.finalize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">        <span class="type">MethodInterceptor</span> <span class="variable">methodInterceptor</span> <span class="operator">=</span> <span class="built_in">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        <span class="keyword">if</span> (methodInterceptor == <span class="literal">null</span>) &#123;</span><br><span class="line">            TrainStation$$EnhancerByCGLIB$$f3f5c491.CGLIB$BIND_CALLBACKS(<span class="built_in">this</span>);</span><br><span class="line">            methodInterceptor = <span class="built_in">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (methodInterceptor != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">object2</span> <span class="operator">=</span> methodInterceptor.intercept(<span class="built_in">this</span>, CGLIB$equals$<span class="number">2</span>$Method, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;object&#125;, CGLIB$equals$<span class="number">2</span>$Proxy);</span><br><span class="line">            <span class="keyword">return</span> object2 == <span class="literal">null</span> ? <span class="literal">false</span> : (Boolean)object2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.equals(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MethodInterceptor</span> <span class="variable">methodInterceptor</span> <span class="operator">=</span> <span class="built_in">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        <span class="keyword">if</span> (methodInterceptor == <span class="literal">null</span>) &#123;</span><br><span class="line">            TrainStation$$EnhancerByCGLIB$$f3f5c491.CGLIB$BIND_CALLBACKS(<span class="built_in">this</span>);</span><br><span class="line">            methodInterceptor = <span class="built_in">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (methodInterceptor != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)methodInterceptor.intercept(<span class="built_in">this</span>, CGLIB$toString$<span class="number">3</span>$Method, CGLIB$emptyArgs, CGLIB$toString$<span class="number">3</span>$Proxy);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MethodInterceptor</span> <span class="variable">methodInterceptor</span> <span class="operator">=</span> <span class="built_in">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        <span class="keyword">if</span> (methodInterceptor == <span class="literal">null</span>) &#123;</span><br><span class="line">            TrainStation$$EnhancerByCGLIB$$f3f5c491.CGLIB$BIND_CALLBACKS(<span class="built_in">this</span>);</span><br><span class="line">            methodInterceptor = <span class="built_in">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (methodInterceptor != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> methodInterceptor.intercept(<span class="built_in">this</span>, CGLIB$hashCode$<span class="number">4</span>$Method, CGLIB$emptyArgs, CGLIB$hashCode$<span class="number">4</span>$Proxy);</span><br><span class="line">            <span class="keyword">return</span> object == <span class="literal">null</span> ? <span class="number">0</span> : ((Number)object).intValue();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="type">MethodInterceptor</span> <span class="variable">methodInterceptor</span> <span class="operator">=</span> <span class="built_in">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        <span class="keyword">if</span> (methodInterceptor == <span class="literal">null</span>) &#123;</span><br><span class="line">            TrainStation$$EnhancerByCGLIB$$f3f5c491.CGLIB$BIND_CALLBACKS(<span class="built_in">this</span>);</span><br><span class="line">            methodInterceptor = <span class="built_in">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (methodInterceptor != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> methodInterceptor.intercept(<span class="built_in">this</span>, CGLIB$clone$<span class="number">5</span>$Method, CGLIB$emptyArgs, CGLIB$clone$<span class="number">5</span>$Proxy);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">newInstance</span><span class="params">(Callback callback)</span> &#123;</span><br><span class="line">        TrainStation$$EnhancerByCGLIB$$f3f5c491.CGLIB$SET_THREAD_CALLBACKS(<span class="keyword">new</span> <span class="title class_">Callback</span>[]&#123;callback&#125;);</span><br><span class="line">        <span class="type">TrainStation$$EnhancerByCGLIB$$f3f5c491</span> <span class="variable">trainStation$$EnhancerByCGLIB$$f3f5c491</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrainStation$$EnhancerByCGLIB$$f3f5c491</span>();</span><br><span class="line">        TrainStation$$EnhancerByCGLIB$$f3f5c491.CGLIB$SET_THREAD_CALLBACKS(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> trainStation$$EnhancerByCGLIB$$f3f5c491;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">newInstance</span><span class="params">(Callback[] callbackArray)</span> &#123;</span><br><span class="line">        TrainStation$$EnhancerByCGLIB$$f3f5c491.CGLIB$SET_THREAD_CALLBACKS(callbackArray);</span><br><span class="line">        <span class="type">TrainStation$$EnhancerByCGLIB$$f3f5c491</span> <span class="variable">trainStation$$EnhancerByCGLIB$$f3f5c491</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrainStation$$EnhancerByCGLIB$$f3f5c491</span>();</span><br><span class="line">        TrainStation$$EnhancerByCGLIB$$f3f5c491.CGLIB$SET_THREAD_CALLBACKS(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> trainStation$$EnhancerByCGLIB$$f3f5c491;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">newInstance</span><span class="params">(Class[] classArray, Object[] objectArray, Callback[] callbackArray)</span> &#123;</span><br><span class="line">        TrainStation$$EnhancerByCGLIB$$f3f5c491 trainStation$$EnhancerByCGLIB$$f3f5c491;</span><br><span class="line">        TrainStation$$EnhancerByCGLIB$$f3f5c491.CGLIB$SET_THREAD_CALLBACKS(callbackArray);</span><br><span class="line">        Class[] classArray2 = classArray;</span><br><span class="line">        <span class="keyword">switch</span> (classArray.length) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">                trainStation$$EnhancerByCGLIB$$f3f5c491 = <span class="keyword">new</span> <span class="title class_">TrainStation$$EnhancerByCGLIB$$f3f5c491</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>: &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Constructor not found&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        TrainStation$$EnhancerByCGLIB$$f3f5c491.CGLIB$SET_THREAD_CALLBACKS(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> trainStation$$EnhancerByCGLIB$$f3f5c491;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCallback</span><span class="params">(<span class="type">int</span> n, Callback callback)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (n) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">                <span class="built_in">this</span>.CGLIB$CALLBACK_0 = (MethodInterceptor)callback;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MethodInterceptor</span> <span class="variable">methodInterceptor</span> <span class="operator">=</span> <span class="built_in">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        <span class="keyword">if</span> (methodInterceptor == <span class="literal">null</span>) &#123;</span><br><span class="line">            TrainStation$$EnhancerByCGLIB$$f3f5c491.CGLIB$BIND_CALLBACKS(<span class="built_in">this</span>);</span><br><span class="line">            methodInterceptor = <span class="built_in">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (methodInterceptor != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> methodInterceptor.intercept(<span class="built_in">this</span>, CGLIB$sell$<span class="number">0</span>$Method, CGLIB$emptyArgs, CGLIB$sell$<span class="number">0</span>$Proxy);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">super</span>.sell();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCallbacks</span><span class="params">(Callback[] callbackArray)</span> &#123;</span><br><span class="line">        Callback[] callbackArray2 = callbackArray;</span><br><span class="line">        <span class="type">TrainStation$$EnhancerByCGLIB$$f3f5c491</span> <span class="variable">trainStation$$EnhancerByCGLIB$$f3f5c491</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="built_in">this</span>.CGLIB$CALLBACK_0 = (MethodInterceptor)callbackArray[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> CGLIB$SET_STATIC_CALLBACKS(Callback[] callbackArray) &#123;</span><br><span class="line">        CGLIB$STATIC_CALLBACKS = callbackArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> CGLIB$SET_THREAD_CALLBACKS(Callback[] callbackArray) &#123;</span><br><span class="line">        CGLIB$THREAD_CALLBACKS.set(callbackArray);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Callback[] getCallbacks() &#123;</span><br><span class="line">        TrainStation$$EnhancerByCGLIB$$f3f5c491.CGLIB$BIND_CALLBACKS(<span class="built_in">this</span>);</span><br><span class="line">        <span class="type">TrainStation$$EnhancerByCGLIB$$f3f5c491</span> <span class="variable">trainStation$$EnhancerByCGLIB$$f3f5c491</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Callback</span>[]&#123;<span class="built_in">this</span>.CGLIB$CALLBACK_0&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Callback <span class="title function_">getCallback</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        MethodInterceptor methodInterceptor;</span><br><span class="line">        TrainStation$$EnhancerByCGLIB$$f3f5c491.CGLIB$BIND_CALLBACKS(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">switch</span> (n) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">                methodInterceptor = <span class="built_in">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>: &#123;</span><br><span class="line">                methodInterceptor = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> methodInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> CGLIB$finalize$<span class="number">1</span>() <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="built_in">super</span>.finalize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> CGLIB$sell$<span class="number">0</span>() &#123;</span><br><span class="line">        <span class="built_in">super</span>.sell();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> CGLIB$equals$<span class="number">2</span>(Object object) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.equals(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> CGLIB$hashCode$<span class="number">4</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> String CGLIB$toString$<span class="number">3</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Object CGLIB$clone$<span class="number">5</span>() <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MethodProxy CGLIB$findMethodProxy(Signature signature) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> ((Object)signature).toString();</span><br><span class="line">        <span class="keyword">switch</span> (string.hashCode()) &#123;</span><br><span class="line">            <span class="keyword">case</span> -<span class="number">1574182249</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (!string.equals(<span class="string">&quot;finalize()V&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">return</span> CGLIB$finalize$<span class="number">1</span>$Proxy;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> -<span class="number">508378822</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (!string.equals(<span class="string">&quot;clone()Ljava/lang/Object;&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">return</span> CGLIB$clone$<span class="number">5</span>$Proxy;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1826985398</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (!string.equals(<span class="string">&quot;equals(Ljava/lang/Object;)Z&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">return</span> CGLIB$equals$<span class="number">2</span>$Proxy;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1913648695</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (!string.equals(<span class="string">&quot;toString()Ljava/lang/String;&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">return</span> CGLIB$toString$<span class="number">3</span>$Proxy;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1978249955</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (!string.equals(<span class="string">&quot;sell()V&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">return</span> CGLIB$sell$<span class="number">0</span>$Proxy;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1984935277</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (!string.equals(<span class="string">&quot;hashCode()I&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">return</span> CGLIB$hashCode$<span class="number">4</span>$Proxy;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> CGLIB$STATICHOOK1() &#123;</span><br><span class="line">        CGLIB$THREAD_CALLBACKS = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>();</span><br><span class="line">        CGLIB$emptyArgs = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>];</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.xxx.TrainStation$$EnhancerByCGLIB$$f3f5c491&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; clazz2 = Class.forName(<span class="string">&quot;com.xxx.TrainStation&quot;</span>);</span><br><span class="line">        CGLIB$sell$<span class="number">0</span>$Method = ReflectUtils.findMethods(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sell&quot;</span>, <span class="string">&quot;()V&quot;</span>&#125;, clazz2.getDeclaredMethods())[<span class="number">0</span>];</span><br><span class="line">        CGLIB$sell$<span class="number">0</span>$Proxy = MethodProxy.create(clazz2, clazz, <span class="string">&quot;()V&quot;</span>, <span class="string">&quot;sell&quot;</span>, <span class="string">&quot;CGLIB$sell$0&quot;</span>);</span><br><span class="line">        clazz2 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>);</span><br><span class="line">        Method[] methodArray = ReflectUtils.findMethods(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;finalize&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="string">&quot;equals&quot;</span>, <span class="string">&quot;(Ljava/lang/Object;)Z&quot;</span>, <span class="string">&quot;toString&quot;</span>, <span class="string">&quot;()Ljava/lang/String;&quot;</span>, <span class="string">&quot;hashCode&quot;</span>, <span class="string">&quot;()I&quot;</span>, <span class="string">&quot;clone&quot;</span>, <span class="string">&quot;()Ljava/lang/Object;&quot;</span>&#125;, clazz2.getDeclaredMethods());</span><br><span class="line">        CGLIB$finalize$<span class="number">1</span>$Method = methodArray[<span class="number">0</span>];</span><br><span class="line">        CGLIB$finalize$<span class="number">1</span>$Proxy = MethodProxy.create(clazz2, clazz, <span class="string">&quot;()V&quot;</span>, <span class="string">&quot;finalize&quot;</span>, <span class="string">&quot;CGLIB$finalize$1&quot;</span>);</span><br><span class="line">        CGLIB$equals$<span class="number">2</span>$Method = methodArray[<span class="number">1</span>];</span><br><span class="line">        CGLIB$equals$<span class="number">2</span>$Proxy = MethodProxy.create(clazz2, clazz, <span class="string">&quot;(Ljava/lang/Object;)Z&quot;</span>, <span class="string">&quot;equals&quot;</span>, <span class="string">&quot;CGLIB$equals$2&quot;</span>);</span><br><span class="line">        CGLIB$toString$<span class="number">3</span>$Method = methodArray[<span class="number">2</span>];</span><br><span class="line">        CGLIB$toString$<span class="number">3</span>$Proxy = MethodProxy.create(clazz2, clazz, <span class="string">&quot;()Ljava/lang/String;&quot;</span>, <span class="string">&quot;toString&quot;</span>, <span class="string">&quot;CGLIB$toString$3&quot;</span>);</span><br><span class="line">        CGLIB$hashCode$<span class="number">4</span>$Method = methodArray[<span class="number">3</span>];</span><br><span class="line">        CGLIB$hashCode$<span class="number">4</span>$Proxy = MethodProxy.create(clazz2, clazz, <span class="string">&quot;()I&quot;</span>, <span class="string">&quot;hashCode&quot;</span>, <span class="string">&quot;CGLIB$hashCode$4&quot;</span>);</span><br><span class="line">        CGLIB$clone$<span class="number">5</span>$Method = methodArray[<span class="number">4</span>];</span><br><span class="line">        CGLIB$clone$<span class="number">5</span>$Proxy = MethodProxy.create(clazz2, clazz, <span class="string">&quot;()Ljava/lang/Object;&quot;</span>, <span class="string">&quot;clone&quot;</span>, <span class="string">&quot;CGLIB$clone$5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> CGLIB$BIND_CALLBACKS(Object object) &#123;</span><br><span class="line">        block2: &#123;</span><br><span class="line">            Object object2;</span><br><span class="line">            block3: &#123;</span><br><span class="line">                <span class="type">TrainStation$$EnhancerByCGLIB$$f3f5c491</span> <span class="variable">trainStation$$EnhancerByCGLIB$$f3f5c491</span> <span class="operator">=</span> (TrainStation$$EnhancerByCGLIB$$f3f5c491)object;</span><br><span class="line">                <span class="keyword">if</span> (trainStation$$EnhancerByCGLIB$$f3f5c491.CGLIB$BOUND) <span class="keyword">break</span> block2;</span><br><span class="line">                trainStation$$EnhancerByCGLIB$$f3f5c491.CGLIB$BOUND = <span class="literal">true</span>;</span><br><span class="line">                object2 = CGLIB$THREAD_CALLBACKS.get();</span><br><span class="line">                <span class="keyword">if</span> (object2 != <span class="literal">null</span>) <span class="keyword">break</span> block3;</span><br><span class="line">                object2 = CGLIB$STATIC_CALLBACKS;</span><br><span class="line">                <span class="keyword">if</span> (CGLIB$STATIC_CALLBACKS == <span class="literal">null</span>) <span class="keyword">break</span> block2;</span><br><span class="line">            &#125;</span><br><span class="line">            trainStation$$EnhancerByCGLIB$$f3f5c491.CGLIB$CALLBACK_0 = (MethodInterceptor)((Callback[])object2)[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//Cglib</span></span><br><span class="line">        <span class="type">CglibProxyFactory</span> <span class="variable">factory1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CglibProxyFactory</span>();</span><br><span class="line">        <span class="type">TrainStation</span> <span class="variable">proxyObject1</span> <span class="operator">=</span> factory1.getProxyObject();</span><br><span class="line">        proxyObject1.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三种代理的对比"><a href="#三种代理的对比" class="headerlink" title="三种代理的对比"></a>三种代理的对比</h3><ul><li><p>jdk代理和CGLIB代理</p><p>使用CGLib实现动态代理，CGLib底层采用ASM字节码生成框架，使用字节码技术生成代理类，在JDK1.6之前比使用Java反射效率要高。唯一需要注意的是，CGLib不能对声明为final的类或者方法进行代理，因为CGLib原理是动态生成被代理类的子类。</p><p>在JDK1.6、JDK1.7、JDK1.8逐步对JDK动态代理优化之后，在调用次数较少的情况下，JDK代理效率高于CGLib代理效率，只有当进行大量调用的时候，JDK1.6和JDK1.7比CGLib代理效率低一点，但是到JDK1.8的时候，JDK代理效率高于CGLib代理。所以如果有接口使用JDK动态代理，如果没有接口使用CGLIB代理。</p></li><li><p>动态代理和静态代理</p><p>动态代理与静态代理相比较，最大的好处是接口中声明的所有方法都被转移到调用处理器一个集中的方法中处理（InvocationHandler.invoke）。这样，在接口方法数量比较多的时候，我们可以进行灵活处理，而不需要像静态代理那样每一个方法进行中转。</p><p>如果接口增加一个方法，静态代理模式除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法。增加了代码维护的复杂度。而动态代理不会出现该问题</p></li></ul><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>代理模式在客户端与目标对象之间起到一个中介作用和保护目标对象的作用；</li><li>代理对象可以扩展目标对象的功能；</li><li>代理模式能将客户端与目标对象分离，在一定程度上降低了系统的耦合度；</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>增加了系统的复杂度；</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li><p>远程（Remote）代理</p><p>本地服务通过网络请求远程服务。为了实现本地到远程的通信，我们需要实现网络通信，处理其中可能的异常。为良好的代码设计和可维护性，我们将网络通信部分隐藏起来，只暴露给本地服务一个接口，通过该接口即可访问远程服务提供的功能，而不必过多关心通信部分的细节。</p></li><li><p>防火墙（Firewall）代理</p><p>当你将浏览器配置成使用代理功能时，防火墙就将你的浏览器的请求转给互联网；当互联网返回响应时，代理服务器再把它转给你的浏览器。</p></li><li><p>保护（Protect or Access）代理</p><p>控制对一个对象的访问，如果需要，可以给不同的用户提供不同级别的使用权限。</p></li></ul><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。</p><p>适配器模式分为类适配器模式和对象适配器模式，前者类之间的耦合度比后者高，且要求程序员了解现有组件库中的相关组件的内部结构，所以应用相对较少些。</p><h3 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a>结构</h3><p>适配器模式（Adapter）包含以下主要角色：</p><ul><li>目标（Target）接口：当前系统业务所期待的接口，它可以是抽象类或接口。</li><li>适配者（Adaptee）类：它是被访问和适配的现存组件库中的组件接口。</li><li>适配器（Adapter）类：它是一个转换器，通过继承或引用适配者的对象，把适配者接口转换成目标接口，让客户按目标接口的格式访问适配者。</li></ul><h3 id="类适配器模式"><a href="#类适配器模式" class="headerlink" title="类适配器模式"></a>类适配器模式</h3><blockquote><p>实现方式：定义一个适配器类来实现当前系统的业务接口，同时又继承现有组件库中已经存在的组件。</p></blockquote><p>现有一台电脑只能读取SD卡，而要读取TF卡中的内容的话就需要使用到适配器模式。创建一个读卡器，将TF卡中的内容读取出来。</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202305172347044.png" alt="image-20230517234703943"></p><p><strong>目标接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目标接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SDCard</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">readSD</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeSD</span><span class="params">(String msg)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>目标接口实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体SD卡</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SDCardImpl</span> <span class="keyword">implements</span> <span class="title class_">SDCard</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">readSD</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;read SDCard&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeSD</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SDCard write msg:&quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>适配者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 适配者接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TFCard</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从TF卡中读取数据</span></span><br><span class="line">    String <span class="title function_">readTF</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//往TF卡写数据</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">writeTF</span><span class="params">(String msg)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>适配者实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 适配者类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TFCardImpl</span> <span class="keyword">implements</span> <span class="title class_">TFCard</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">readTF</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;read TFCard&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeTF</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TFCard write msg:&quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>主调用类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算机类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">readSD</span><span class="params">(SDCard sd)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sd == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;SDCard is not null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sd.readSD();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">        System.out.println(computer.readSD(<span class="keyword">new</span> <span class="title class_">SDCardImpl</span>()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//适配器读取TF</span></span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">        <span class="type">SDAdapterTF</span> <span class="variable">sdAdapterTF</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SDAdapterTF</span>();</span><br><span class="line">        System.out.println(computer1.readSD(sdAdapterTF));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类适配器模式违背了合成复用原则。类适配器是客户类有一个接口规范的情况下可用，反之不可用。</p><h3 id="对象适配器模式"><a href="#对象适配器模式" class="headerlink" title="对象适配器模式"></a>对象适配器模式</h3><blockquote><p>实现方式：对象适配器模式可釆用将现有组件库中已经实现的组件引入适配器类中，该类同时实现当前系统的业务接口。</p></blockquote><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202305181523784.png" alt="image-20230518152324682"></p><p><strong>适配器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象适配器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SDObjectAdapterTF</span> <span class="keyword">implements</span> <span class="title class_">SDCard</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TFCard tfCard;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SDObjectAdapterTF</span><span class="params">(TFCard tfCard)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.tfCard = tfCard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">readSD</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;adapter read tf card&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> tfCard.readTF();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeSD</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;adapter write tf card&quot;</span>);</span><br><span class="line">        tfCard.writeTF(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 注意：还有一个适配器模式是接口适配器模式。当不希望实现一个接口中所有的方法时，可以创建一个抽象类Adapter ，实现所有方法。而此时我们只需要继承该抽象类即可。</p></blockquote><h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>以前开发的系统存在满足新系统功能需求的类，但其接口同新系统的接口不一致。</li><li>使用第三方提供的组件，但组件接口定义和自己要求的接口定义不同。</li></ul><h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p>指在不改变现有对象结构的情况下，动态地给该对象增加一些职责（即增加其额外功能）的模式。</p><h3 id="结构-2"><a href="#结构-2" class="headerlink" title="结构"></a>结构</h3><p>装饰（Decorator）模式中的角色：</p><ul><li>抽象构件（Component）角色 ：定义一个抽象接口以规范准备接收附加责任的对象。</li><li>具体构件（Concrete  Component）角色 ：实现抽象构件，通过装饰角色为其添加一些职责。</li><li>抽象装饰（Decorator）角色 ： 继承或实现抽象构件，并包含具体构件的实例，可以通过其子类扩展具体构件的功能。</li><li>具体装饰（ConcreteDecorator）角色 ：实现抽象装饰的相关方法，并给具体构件对象添加附加的责任。</li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>快餐店有炒面、炒饭这些快餐，可以额外附加鸡蛋、火腿、培根这些配菜，当然加配菜需要额外加钱，每个配菜的价钱通常不太一样，那么计算总价就会显得比较麻烦。</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202305181619952.png" alt="202305181557471"></p><p><strong>抽象构件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快餐类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">FastFood</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">float</span> <span class="title function_">cost</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>具体构件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 炒饭，具体构件角色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FriedRice</span> <span class="keyword">extends</span> <span class="title class_">FastFood</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FriedRice</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="number">10</span>,<span class="string">&quot;炒饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getPrice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 炒面类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FriedNoodles</span> <span class="keyword">extends</span> <span class="title class_">FastFood</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FriedNoodles</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="number">12</span>,<span class="string">&quot;炒面&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getPrice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>抽象装饰</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 装饰者类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Garnish</span> <span class="keyword">extends</span> <span class="title class_">FastFood</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FastFood fastFood;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> FastFood <span class="title function_">getFastFood</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fastFood;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFastFood</span><span class="params">(FastFood fastFood)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fastFood = fastFood;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Garnish</span><span class="params">(FastFood fastFood, <span class="type">float</span> price, String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(price,desc);</span><br><span class="line">        <span class="built_in">this</span>.fastFood = fastFood;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>具体装饰</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 鸡蛋配料</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Egg</span> <span class="keyword">extends</span> <span class="title class_">Garnish</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Egg</span><span class="params">(FastFood fastFood)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(fastFood,<span class="number">1</span>,<span class="string">&quot;鸡蛋&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getPrice() + getFastFood().getPrice();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getDesc() + getFastFood().getDesc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 培根配料</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bacon</span> <span class="keyword">extends</span> <span class="title class_">Garnish</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bacon</span><span class="params">(FastFood fastFood)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">super</span>(fastFood,<span class="number">2</span>,<span class="string">&quot;培根&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getPrice() + getFastFood().getPrice();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getDesc() + getFastFood().getDesc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//点一份炒饭</span></span><br><span class="line">        <span class="type">FastFood</span> <span class="variable">food</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FriedRice</span>();</span><br><span class="line">        <span class="comment">//花费的价格</span></span><br><span class="line">        System.out.println(food.getDesc() + <span class="string">&quot; &quot;</span> + food.cost() + <span class="string">&quot;元&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;========&quot;</span>);</span><br><span class="line">        <span class="comment">//点一份加鸡蛋的炒饭</span></span><br><span class="line">        <span class="type">FastFood</span> <span class="variable">food1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FriedRice</span>();</span><br><span class="line"></span><br><span class="line">        food1 = <span class="keyword">new</span> <span class="title class_">Egg</span>(food1);</span><br><span class="line">        <span class="comment">//花费的价格</span></span><br><span class="line">        System.out.println(food1.getDesc() + <span class="string">&quot; &quot;</span> + food1.cost() + <span class="string">&quot;元&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;========&quot;</span>);</span><br><span class="line">        <span class="comment">//点一份加培根的炒面</span></span><br><span class="line">        <span class="type">FastFood</span> <span class="variable">food2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FriedNoodles</span>();</span><br><span class="line">        food2 = <span class="keyword">new</span> <span class="title class_">Bacon</span>(food2);</span><br><span class="line">        <span class="comment">//花费的价格</span></span><br><span class="line">        System.out.println(food2.getDesc() + <span class="string">&quot; &quot;</span> + food2.cost() + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul><li><p>装饰者模式可以带来比继承更加灵活性的扩展功能，使用更加方便，可以通过组合不同的装饰者对象来获取具有不同行为状态的多样化的结果。装饰者模式比继承更具良好的扩展性，完美的遵循开闭原则，继承是静态的附加责任，装饰者则是动态的附加责任。</p></li><li><p>装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。</p></li></ul><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul><li><p>装饰者的对象和它装饰的对象本质上是完全不同的，装饰模式会生成许多的对象，导致区分各种对象变得困难</p></li><li><p>由于使用相同的标识，对于程序的理解和拍错过程的难度也会随之增加</p></li></ul><h3 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li><p>当不能采用继承的方式对系统进行扩充或者采用继承不利于系统扩展和维护时。</p><p>不能采用继承的情况主要有两类：</p><ul><li>第一类是系统中存在大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长；</li><li>第二类是因为类定义不能继承（如final类）</li></ul></li><li><p>在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。</p></li><li><p>当对象的功能要求可以动态地添加，也可以再动态地撤销时。</p></li></ul><h3 id="代理和装饰者的区别"><a href="#代理和装饰者的区别" class="headerlink" title="代理和装饰者的区别"></a>代理和装饰者的区别</h3><p>静态代理和装饰者模式的区别：</p><ul><li>相同点：<ul><li>都要实现与目标类相同的业务接口</li><li>在两个类中都要声明目标对象</li><li>都可以在不修改目标类的前提下增强目标方法</li></ul></li><li>不同点：<ul><li>目的不同<br>装饰者是为了增强目标对象<br>静态代理是为了保护和隐藏目标对象</li><li>获取目标对象构建的地方不同<br>装饰者是由外界传递进来，可以通过构造方法传递<br>静态代理是在代理类内部创建，以此来隐藏目标对象</li></ul></li></ul><h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><h3 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h3><p>将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。</p><h3 id="结构-3"><a href="#结构-3" class="headerlink" title="结构"></a>结构</h3><p>桥接（Bridge）模式包含以下主要角色：</p><ul><li>抽象化（Abstraction）角色 ：定义抽象类，并包含一个对实现化对象的引用。</li><li>扩展抽象化（Refined  Abstraction）角色 ：是抽象化角色的子类，实现父类中的业务方法，并通过组合关系调用实现化角色中的业务方法。</li><li>实现化（Implementor）角色 ：定义实现化角色的接口，供扩展抽象化角色调用。</li><li>具体实现化（Concrete Implementor）角色 ：给出实现化角色接口的具体实现。</li></ul><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><p>开发一个跨平台视频播放器，可以在不同操作系统平台（如Windows、Mac、Linux等）上播放多种格式的视频文件，常见的视频格式包括RMVB、AVI、WMV等。该播放器包含了两个维度，适合使用桥接模式。</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202305181953207.png" alt="image-20230518195358121"></p><p><strong>抽象化角色</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 操作系统类，抽象角色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">OperatingSystem</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> VideoFile videoFile;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OperatingSystem</span><span class="params">(VideoFile videoFile)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.videoFile = videoFile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">(String fileName)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>扩展抽象化角色</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扩展抽象化角色，Windows操作系统</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Windows</span> <span class="keyword">extends</span> <span class="title class_">OperatingSystem</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Windows</span><span class="params">(VideoFile videoFile)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(videoFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        videoFile.decode(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mac操作系统，扩展抽象化角色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mac</span> <span class="keyword">extends</span> <span class="title class_">OperatingSystem</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Mac</span><span class="params">(VideoFile videoFile)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(videoFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        videoFile.decode(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现化角色</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 视频文件（实现化角色）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">VideoFile</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解码功能</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">decode</span><span class="params">(String fileName)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>具体实现化角色</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体实现化角色，rmvb视频文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RmvbFile</span> <span class="keyword">implements</span> <span class="title class_">VideoFile</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decode</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;rmvb视频文件:&quot;</span> + fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AVI视频角色，实现化角色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AviFile</span> <span class="keyword">implements</span> <span class="title class_">VideoFile</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decode</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;avi视频文件:&quot;</span> + fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建Mac操作系统</span></span><br><span class="line">        <span class="type">OperatingSystem</span> <span class="variable">system</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mac</span>(<span class="keyword">new</span> <span class="title class_">AviFile</span>());</span><br><span class="line">        system.play(<span class="string">&quot;黑豹2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li><p>特点：如果现在还有一种视频文件类型wmv，我们只需要再定义一个类实现VideoFile接口即可，其他类不需要发生变化。</p><p>如：如果现在还有一种视频文件类型wmv，我们只需要再定义一个类实现VideoFile接口即可，其他类不需要发生变化。</p></li><li><p>实现细节对客户透明</p></li></ul><h3 id="使用场景-3"><a href="#使用场景-3" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>当一个类存在两个独立变化的维度，且这两个维度都需要进行扩展时。</li><li>当一个系统不希望使用继承或因为多层次继承导致系统类的个数急剧增加时。</li><li>当一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性时。避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。</li></ul><h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><h3 id="概念-4"><a href="#概念-4" class="headerlink" title="概念"></a>概念</h3><p>又名门面模式，是一种通过为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问的模式。该模式对外有一个统一接口，外部应用程序不用关心内部子系统的具体的细节，这样会大大降低应用程序的复杂度，提高了程序的可维护性。</p><h3 id="结构-4"><a href="#结构-4" class="headerlink" title="结构"></a>结构</h3><p>外观（Facade）模式包含以下主要角色：</p><ul><li>外观（Facade）角色：为多个子系统对外提供一个共同的接口。</li><li>子系统（Sub System）角色：实现系统的部分功能，客户可以通过外观角色访问它。</li></ul><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><p>智能家电控制：晚上每次都需要打开灯、打开电视、打开空调；睡觉时关闭灯、关闭电视、关闭空调；操作起来都比较麻烦。所以可以实现一个智能家电控制系统，通过语音直接控制这些智能家电的开启和关闭。类图如下：</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202305211554069.png" alt="image-20230521155413957"></p><p><strong>外观角色</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 外观类，用户主要和该类对象进行交互</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmartApplicationFacade</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Light light;</span><br><span class="line">    <span class="keyword">private</span> TV tv;</span><br><span class="line">    <span class="keyword">private</span> AirCondition airCondition;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SmartApplicationFacade</span><span class="params">()</span> &#123;</span><br><span class="line">        light = <span class="keyword">new</span> <span class="title class_">Light</span>();</span><br><span class="line">        tv = <span class="keyword">new</span> <span class="title class_">TV</span>();</span><br><span class="line">        airCondition = <span class="keyword">new</span> <span class="title class_">AirCondition</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (message.contains(<span class="string">&quot;打开&quot;</span>))&#123;</span><br><span class="line">            on();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (message.contains(<span class="string">&quot;关闭&quot;</span>))&#123;</span><br><span class="line">            off();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不太清楚要做什么&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">on</span><span class="params">()</span>&#123;</span><br><span class="line">        light.on();</span><br><span class="line">        tv.on();</span><br><span class="line">        airCondition.on();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">off</span><span class="params">()</span>&#123;</span><br><span class="line">        light.off();</span><br><span class="line">        tv.off();</span><br><span class="line">        airCondition.off();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>子系统角色</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 电灯</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Light</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">on</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打开电灯&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">off</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭电灯&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 电视类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TV</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">on</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打开电视&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">off</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭电视&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 空调</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AirCondition</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">on</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打开空调&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">off</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭空调&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SmartApplicationFacade</span> <span class="variable">facade</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SmartApplicationFacade</span>();</span><br><span class="line">        facade.say(<span class="string">&quot;打开家电&quot;</span>);</span><br><span class="line">        facade.say(<span class="string">&quot;关闭家电&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h3><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ul><li>降低了子系统与客户端之间的耦合度，使得子系统的变化不会影响调用它的客户类。</li><li>对客户屏蔽了子系统组件，减少了客户处理的对象数目，并使得子系统使用起来更加容易。</li></ul><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><ul><li>不符合开闭原则，修改很麻烦</li></ul><h3 id="使用场景-4"><a href="#使用场景-4" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>对分层结构系统构建时，使用外观模式定义子系统中每层的入口点可以简化子系统之间的依赖关系。</li><li>当一个复杂系统的子系统很多时，外观模式可以为系统设计一个简单的接口供外界访问。</li><li>当客户端与多个子系统之间存在很大的联系时，引入外观模式可将它们分离，从而提高子系统的独立性和可移植性。</li></ul><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><h3 id="概念-5"><a href="#概念-5" class="headerlink" title="概念"></a>概念</h3><p>又名部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。</p><h3 id="结构-5"><a href="#结构-5" class="headerlink" title="结构"></a>结构</h3><p>组合模式主要包含三种角色：</p><ul><li>抽象根节点（Component）：定义系统各层次对象的共有方法和属性，可以预先定义一些默认行为和属性。</li><li>树枝节点（Composite）：定义树枝节点的行为，存储子节点，组合树枝节点和叶子节点形成一个树形结构。</li><li>叶子节点（Leaf）：叶子节点对象，其下再无分支，是系统层次遍历的最小单位。</li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>在使用组合模式时，根据抽象构件类的定义形式，我们可将组合模式分为透明组合模式和安全组合模式两种形式。</p><ul><li><p>透明组合模式</p><p>透明组合模式中，抽象根节点角色中声明了所有用于管理成员对象的方法，比如在示例中 <code>MenuComponent</code> 声明了 <code>add</code>、<code>remove</code> 、<code>getChild</code> 方法，这样做的好处是确保所有的构件类都有相同的接口。透明组合模式也是组合模式的标准形式。</p><p>透明组合模式的缺点是不够安全，因为叶子对象和容器对象在本质上是有区别的，叶子对象不可能有下一个层次的对象，即不可能包含成员对象，因此为其提供 add()、remove() 等方法是没有意义的，这在编译阶段不会出错，但在运行阶段如果调用这些方法可能会出错（如果没有提供相应的错误处理代码）</p></li><li><p>安全组合模式</p><p>在安全组合模式中，在抽象构件角色中没有声明任何用于管理成员对象的方法，而是在树枝节点 <code>Menu</code> 类中声明并实现这些方法。安全组合模式的缺点是不够透明，因为叶子构件和容器构件具有不同的方法，且容器构件中那些用于管理成员对象的方法没有在抽象构件类中定义，因此客户端不能完全针对抽象编程，必须有区别地对待叶子构件和容器构件。</p></li></ul><h3 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h3><p>打印软件菜单，打印出其包含的所有菜单以及菜单项的名称。</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202305231655885.png" alt="image-20230523165509783"></p><p><strong>抽象根节点</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 菜单组件，抽象根节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">MenuComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜单组件名称</span></span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜单组件层级</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> level;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加子菜单</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(MenuComponent menuComponent)</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移除子菜单</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(MenuComponent menuComponent)</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取指定子菜单</span></span><br><span class="line">    <span class="keyword">public</span> MenuComponent <span class="title function_">getChild</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印菜单名称，包括子菜单和菜单项</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>树枝节点</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 菜单类,树枝节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Menu</span> <span class="keyword">extends</span> <span class="title class_">MenuComponent</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以有多个子菜单</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;MenuComponent&gt; menuComponentList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Menu</span><span class="params">(String name,<span class="type">int</span> level)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(MenuComponent menuComponent)</span> &#123;</span><br><span class="line">        menuComponentList.add(menuComponent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(MenuComponent menuComponent)</span> &#123;</span><br><span class="line">        menuComponentList.remove(menuComponent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MenuComponent <span class="title function_">getChild</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> menuComponentList.get(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">word</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; level-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            word.append(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//打印菜单名称，打印子菜单项</span></span><br><span class="line">        System.out.println(word+name);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (MenuComponent menuComponent : menuComponentList) &#123;</span><br><span class="line">            menuComponent.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>叶子节点</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 菜单项类,叶子节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MenuItem</span> <span class="keyword">extends</span> <span class="title class_">MenuComponent</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MenuItem</span><span class="params">(String name, <span class="type">int</span> level)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">word</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; level-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            word.append(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(word+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MenuComponent</span> <span class="variable">menu1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="string">&quot;菜单管理&quot;</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        menu1.add(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;页面访问&quot;</span>,<span class="number">3</span>));</span><br><span class="line">        menu1.add(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;展开菜单&quot;</span>,<span class="number">3</span>));</span><br><span class="line">        menu1.add(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;删除菜单&quot;</span>,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">MenuComponent</span> <span class="variable">menu2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="string">&quot;权限管理&quot;</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        menu2.add(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;页面访问&quot;</span>,<span class="number">3</span>));</span><br><span class="line">        menu2.add(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;提交保存&quot;</span>,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">MenuComponent</span> <span class="variable">menu3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="string">&quot;角色管理&quot;</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        menu3.add(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;删除菜单&quot;</span>,<span class="number">3</span>));</span><br><span class="line">        menu3.add(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;新增角色&quot;</span>,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">Menu</span> <span class="variable">menu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="string">&quot;系统管理&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        menu.add(menu1);</span><br><span class="line">        menu.add(menu2);</span><br><span class="line">        menu.add(menu3);</span><br><span class="line"></span><br><span class="line">        menu.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a><strong>特点</strong></h3><ul><li>组合模式可以清楚地定义分层次的复杂对象，表示对象的全部或部分层次，它让客户端忽略了层次的差异，方便对整个层次结构进行控制。</li><li>客户端可以一致地使用一个组合结构或其中单个对象，不必关心处理的是单个对象还是整个组合结构，简化了客户端代码。</li><li>在组合模式中增加新的树枝节点和叶子节点都很方便，无须对现有类库进行任何修改，符合“开闭原则”。</li><li>组合模式为树形结构的面向对象实现提供了一种灵活的解决方案，通过叶子节点和树枝节点的递归组合，可以形成复杂的树形结构，但对树形结构的控制却非常简单。</li></ul><h3 id="使用场景-5"><a href="#使用场景-5" class="headerlink" title="使用场景"></a>使用场景</h3><p>组合模式正是应树形结构而生，所以组合模式的使用场景就是出现树形结构的地方。比如：文件目录显示，多级目录呈现等树形结构数据的操作。</p><h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><blockquote><p>努力写作中</p></blockquote><p><img src="/img/strive.gif" alt="img.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;结构型模式描述如何将类或对象按某种布局组成更大的结构。它分为类结构型模式和对象结构型模式，前者采用继承机制来组织接口和类，后者釆用组合或聚合来组合对象。&lt;/p&gt;
&lt;p&gt;由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象结构型模式比类结构型模式具有更大的</summary>
      
    
    
    
    <category term="经验分享" scheme="https://blog.bywind.xyz/categories/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="推荐" scheme="https://blog.bywind.xyz/tags/%E6%8E%A8%E8%8D%90/"/>
    
    <category term="设计模式" scheme="https://blog.bywind.xyz/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="结构型模式" scheme="https://blog.bywind.xyz/tags/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之创建型模式：将对象的创建与使用分离</title>
    <link href="https://blog.bywind.xyz/posts/5c53e9d7.html"/>
    <id>https://blog.bywind.xyz/posts/5c53e9d7.html</id>
    <published>2023-07-24T06:33:23.000Z</published>
    <updated>2023-08-23T06:37:25.996Z</updated>
    
    <content type="html"><![CDATA[<p>创建型模式的主要关注点是“怎样创建对象？”，它的主要特点是“将对象的创建与使用分离”。</p><p>这样可以降低系统的耦合度，使用者不需要关注对象的创建细节。</p><p>创建型模式分为：</p><ul><li>单例模式</li><li>工厂方法模式</li><li>抽象工厂模式</li><li>原型模式</li><li>建造者模式</li></ul><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>单例模式的主要有以下角色：</p><ul><li>单例类：只能创建一个实例的类</li><li>访问类：使用单例类</li></ul><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202305152252836.gif" alt="img"></p><p>饿汉式：类加载就会导致该单实例对象被创建</p><p>懒汉式：类加载不会导致该单实例对象被创建，而是首次使用该对象时才会创建</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h4><blockquote><p>类加载就会导致该单实例对象被创建</p></blockquote><ol><li><p><strong>饿汉式      实现方式：静态变量创建类的对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态变量创建类的对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EagerlyInitializedSingleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">EagerlyInitializedSingleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在本类中创建本类对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">EagerlyInitializedSingleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EagerlyInitializedSingleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供一个公共访问方式，让外界获取该对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EagerlyInitializedSingleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>饿汉式      实现方式：枚举类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉式</span></span><br><span class="line"><span class="comment"> * 枚举类 线程安全（极力推荐）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">EnumSingleton</span> &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h4><blockquote><p>类加载不会导致该单实例对象被创建，而是首次使用该对象时才会创建</p></blockquote><ol><li><p><strong>方式一：线程不安全</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉式</span></span><br><span class="line"><span class="comment"> * 线程不安全</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazilyInitializedSingleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazilyInitializedSingleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明本类对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazilyInitializedSingleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供静态方法获取并创建对象</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazilyInitializedSingleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 判断instance是否为空，为空则说明还没有创建该类的对象</span></span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 若线程1进来后等待，CPU执行权给线程2，则线程2也会进入并创建不同的对象实例</span></span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">LazilyInitializedSingleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>方式二：线程安全</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉式</span></span><br><span class="line"><span class="comment"> * 线程安全</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadSafeLazyLoadedSingleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ThreadSafeLazyLoadedSingleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明本类对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadSafeLazyLoadedSingleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> ThreadSafeLazyLoadedSingleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 判断instance是否为空，为空则说明还没有创建该类的对象</span></span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">ThreadSafeLazyLoadedSingleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>方式三：双重检查锁</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双重检查锁</span></span><br><span class="line"><span class="comment"> * 线程安全 多线程情况下可能会出现空指针问题，需要使用volatile</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadSafeDoubleCheckLockSingleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ThreadSafeDoubleCheckLockSingleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明当前类的变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadSafeDoubleCheckLockSingleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对外提供公共访问方式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadSafeDoubleCheckLockSingleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (ThreadSafeDoubleCheckLockSingleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">ThreadSafeDoubleCheckLockSingleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点</strong>：在实例变量加上了volatile关键词修饰，保证可见性与有序性；双重判断加锁</p></li><li><p><strong>静态内部类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉式</span></span><br><span class="line"><span class="comment"> * 静态内部类 线程安全</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InitializingOnDemandHolderIdiom</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">InitializingOnDemandHolderIdiom</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义静态内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;</span><br><span class="line">        <span class="comment">//保证被实例化一次</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">InitializingOnDemandHolderIdiom</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitializingOnDemandHolderIdiom</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 提供外部访问方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> InitializingOnDemandHolderIdiom <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>静态内部类——解决反序列化破坏单例模式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解决反序列化破坏单例模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SolveDeserializableSingleton</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SolveDeserializableSingleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span>  <span class="title class_">SingletonHolder</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">SolveDeserializableSingleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SolveDeserializableSingleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SolveDeserializableSingleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当进行反序列化时，会自动调用该方法，将该方法返回值直接返回</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">readResolve</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>静态内部类——解决反射破坏单例模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解决反射破坏单例模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SolveReflectSingleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SolveReflectSingleton</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//多线程环境</span></span><br><span class="line">        <span class="keyword">synchronized</span> (SolveReflectSingleton.class) &#123;</span><br><span class="line">            <span class="comment">// 判断flag值是否是true，为true则说明非第一次访问，为false则为第一次访问</span></span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;不能创建多个对象&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">SolveReflectSingleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SolveReflectSingleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SolveReflectSingleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SolveReflectSingleton.SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li><p><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Runtime.html#getRuntime()">java.lang.Runtime#getRuntime()</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Runtime</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Runtime</span> <span class="variable">currentRuntime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runtime</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the runtime object associated with the current Java application.</span></span><br><span class="line"><span class="comment">     * Most of the methods of class &lt;code&gt;Runtime&lt;/code&gt; are instance</span></span><br><span class="line"><span class="comment">     * methods and must be invoked with respect to the current runtime object.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  the &lt;code&gt;Runtime&lt;/code&gt; object associated with the current</span></span><br><span class="line"><span class="comment">     *          Java application.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Runtime <span class="title function_">getRuntime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> currentRuntime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Don&#x27;t let anyone else instantiate this class */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Runtime</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>为创建一个对象定义一个接口，让子类决定实例化哪个类。</p><p>工厂方法允许类将实例化延迟到子类。</p><h3 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a>结构</h3><p>工厂方法模式的主要角色：</p><ul><li>抽象工厂（Abstract Factory）：提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法来创建产品。</li><li>具体工厂（ConcreteFactory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建。</li><li>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能。</li><li>具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间一一对应。</li></ul><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202305161047263.png" alt="image-20230516104737196"></p><p><strong>抽象工厂</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 咖啡工厂类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CoffeeFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建咖啡对象方法</span></span><br><span class="line">    Coffee <span class="title function_">createCoffee</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>具体工厂</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 美式咖啡工厂</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AmericanCoffeeFactory</span> <span class="keyword">implements</span> <span class="title class_">CoffeeFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Coffee <span class="title function_">createCoffee</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AmericanCoffee</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拿铁咖啡工厂</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LatteCoffeeFactory</span> <span class="keyword">implements</span> <span class="title class_">CoffeeFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Coffee <span class="title function_">createCoffee</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LatteCoffee</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>抽象产品</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 咖啡类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Coffee</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加糖</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addSugar</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加糖&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加奶</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMilk</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加奶&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>具体产品</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 美式咖啡</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AmericanCoffee</span> <span class="keyword">extends</span> <span class="title class_">Coffee</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;美式咖啡&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拿铁咖啡</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LatteCoffee</span> <span class="keyword">extends</span> <span class="title class_">Coffee</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;拿铁咖啡&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建咖啡店对象</span></span><br><span class="line">        <span class="type">CoffeeStore</span> <span class="variable">coffeeStore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CoffeeStore</span>();</span><br><span class="line">        <span class="comment">// 创建工厂对象</span></span><br><span class="line">        <span class="type">CoffeeFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AmericanCoffeeFactory</span>();</span><br><span class="line">        coffeeStore.setFactory(factory);</span><br><span class="line">        <span class="comment">//点咖啡</span></span><br><span class="line">        <span class="type">Coffee</span> <span class="variable">coffee</span> <span class="operator">=</span> coffeeStore.orderCoffee();</span><br><span class="line">        System.out.println(coffee.getName());   <span class="comment">//美式咖啡</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若需再添加产品种类，只需要添加一个新的咖啡工厂的子实现类和产品实体即可（符合开闭原则，对扩展开放，对修改关闭）</p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>用户只需要知道具体工厂的名称就可得到所要的产品，无须知道产品的具体创建过程；</li><li>在系统增加新的产品时只需要添加具体产品类和对应的具体工厂类，无须对原工厂进行任何修改，满足开闭原则；</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>每增加一个产品就要增加一个具体产品类和一个对应的具体工厂类，这增加了系统的复杂度。</li></ul><h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><p>Collection.iterator方法</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202305161511464.png" alt="image-20230516151137424"></p><p>Collection接口是抽象工厂类，ArrayList是具体的工厂类；Iterator接口是抽象商品类，ArrayList类中的Iter内部类是具体的商品类。在具体的工厂类中iterator()方法创建具体的商品类的对象。</p><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p>是一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构。</p><p>抽象工厂模式是工厂方法模式的升级版本，工厂方法模式只生产一个等级的产品，而抽象工厂模式可生产多个等级的产品。</p><h3 id="结构-2"><a href="#结构-2" class="headerlink" title="结构"></a>结构</h3><p>抽象工厂模式的主要角色如下：</p><ul><li>抽象工厂（Abstract Factory）：提供了创建产品的接口，它包含多个创建产品的方法，可以创建多个不同等级的产品。</li><li>具体工厂（Concrete Factory）：主要是实现抽象工厂中的多个抽象方法，完成具体产品的创建。</li><li>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能，抽象工厂模式有多个抽象产品。</li><li>具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它 同具体工厂之间是多对一的关系。</li></ul><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202305161446746.png" alt="image-20230516144647680"></p><p><strong>抽象工厂</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 甜品工厂</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DessertFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生产咖啡</span></span><br><span class="line">    Coffee <span class="title function_">createCoffee</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生产甜品</span></span><br><span class="line">    Dessert <span class="title function_">createDessert</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>具体工厂</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 美式甜品工厂</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AmericanDessertFactory</span> <span class="keyword">implements</span> <span class="title class_">DessertFactory</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Coffee <span class="title function_">createCoffee</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AmericanCoffee</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Dessert <span class="title function_">createDessert</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MatchaMousse</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 意式甜品工厂</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ItalyDessertFactory</span> <span class="keyword">implements</span> <span class="title class_">DessertFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Coffee <span class="title function_">createCoffee</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LatteCoffee</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Dessert <span class="title function_">createDessert</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Tiramisu</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>抽象产品</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象咖啡类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Coffee</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMilk</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加奶&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addSugar</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加糖&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 甜品抽象类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Dessert</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>具体产品</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提拉米苏类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tiramisu</span> <span class="keyword">extends</span> <span class="title class_">Dessert</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;提拉米苏&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拿铁咖啡</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LatteCoffee</span> <span class="keyword">extends</span> <span class="title class_">Coffee</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;拿铁咖啡&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要加同一个产品族的话，只需要再加一个对应的工厂类即可，不需要修改其他的类。</p><h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><p>当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。</p><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><p>当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改。</p><h3 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li><p>当需要创建的对象是一系列相互关联或相互依赖的产品族时，如电器工厂中的电视机、洗衣机、空调等。</p></li><li><p>系统中有多个产品族，但每次只使用其中的某一族产品。如有人只喜欢穿某一个品牌的衣服和鞋。</p></li><li><p>系统中提供了产品的类库，且所有产品的接口相同，客户端不依赖产品实例的创建细节和内部结构。</p></li></ul><p>如：输入法换皮肤，一整套一起换。生成不同操作系统的程序。</p><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><h3 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h3><p>用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型对象相同的新对象。</p><h3 id="结构-3"><a href="#结构-3" class="headerlink" title="结构"></a>结构</h3><p>原型模式包含如下角色：</p><ul><li>抽象原型类：规定了具体原型对象必须实现的的 clone() 方法。</li><li>具体原型类：实现抽象原型类的 clone() 方法，它是可被复制的对象。</li><li>访问类：使用具体原型类中的 clone() 方法来复制新的对象。</li></ul><h3 id="浅拷贝实现"><a href="#浅拷贝实现" class="headerlink" title="浅拷贝实现"></a>浅拷贝实现</h3><blockquote><p>浅拷贝：创建一个新对象，新对象的属性和原来对象完全相同，对于非基本类型属性，仍指向原有属性所指向的对象的内存地址。</p></blockquote><p><strong>用原型模式生成“三好学生”奖状</strong></p><p>同一学校的“三好学生”奖状除了获奖人姓名不同，其他都相同，可以使用原型模式复制多个“三好学生”奖状出来，然后在修改奖状上的名字即可。</p><p><strong>原型实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 三好学生奖状类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Citation</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//奖状上的名称</span></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;被评为三好学生，特发此状！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Citation <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (Citation) <span class="built_in">super</span>.clone();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//创建奖状对象</span></span><br><span class="line">        <span class="type">Citation</span> <span class="variable">citation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Citation</span>();</span><br><span class="line">        <span class="comment">//克隆奖状对象</span></span><br><span class="line">        <span class="type">Citation</span> <span class="variable">clone</span> <span class="operator">=</span> citation.clone();</span><br><span class="line"></span><br><span class="line">        citation.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        clone.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//show展示</span></span><br><span class="line">        citation.show();</span><br><span class="line">        clone.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>原型实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 奖状类</span></span><br><span class="line"><span class="comment"> * 浅拷贝</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CitationShallowCopy</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Student stu;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">getStu</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStu</span><span class="params">(Student stu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stu = stu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(stu.getName() + <span class="string">&quot;同学被评为三好学生。特发此状！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CitationShallowCopy <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> (CitationShallowCopy) <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//浅拷贝</span></span><br><span class="line">        <span class="comment">//创建原型对象</span></span><br><span class="line">        <span class="type">CitationShallowCopy</span> <span class="variable">citationShallowCopy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CitationShallowCopy</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建张三学生</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student1.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        citationShallowCopy.setStu(student1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//克隆奖状对象</span></span><br><span class="line">        <span class="type">CitationShallowCopy</span> <span class="variable">shallowCopy</span> <span class="operator">=</span> citationShallowCopy.clone();</span><br><span class="line">        shallowCopy.getStu().setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//show展示</span></span><br><span class="line">        citationShallowCopy.show();</span><br><span class="line">        shallowCopy.show();</span><br><span class="line">        System.out.println(citationShallowCopy.getStu() == shallowCopy.getStu());   <span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="深拷贝实现"><a href="#深拷贝实现" class="headerlink" title="深拷贝实现"></a>深拷贝实现</h3><blockquote><p> 深拷贝：创建一个新对象，属性中引用的其他对象也会被克隆，不再指向原有对象地址。</p></blockquote><p><strong>原型实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 奖状类</span></span><br><span class="line"><span class="comment"> * 深拷贝</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CitationDeepCopy</span>  <span class="keyword">implements</span> <span class="title class_">Serializable</span>,Cloneable &#123;</span><br><span class="line">    <span class="keyword">private</span> Student stu;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">getStu</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStu</span><span class="params">(Student stu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stu = stu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(stu.getName() + <span class="string">&quot;同学被评为三好学生。特发此状！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CitationDeepCopy <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> (CitationDeepCopy) <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CitationDeepCopy <span class="title function_">copy</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 缓冲输出流</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="comment">// 对象输出流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        outputStream.writeObject(<span class="built_in">this</span>);</span><br><span class="line">        <span class="comment">// 从缓冲输出流中获取缓冲输出流</span></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">        <span class="comment">// 获取对象输出流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">        <span class="keyword">return</span> (CitationDeepCopy) objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>学生类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 学生类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//深拷贝</span></span><br><span class="line">        <span class="comment">//创建原型对象</span></span><br><span class="line">        <span class="type">CitationDeepCopy</span> <span class="variable">citationDeepCopy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CitationDeepCopy</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建张三学生</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student2.setName(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">        citationDeepCopy.setStu(student2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//克隆奖状对象，这里使用自定义的对象输出流方法</span></span><br><span class="line">        <span class="type">CitationDeepCopy</span> <span class="variable">deepCopy</span> <span class="operator">=</span> citationDeepCopy.copy();</span><br><span class="line">        deepCopy.getStu().setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//show展示</span></span><br><span class="line">        citationDeepCopy.show();</span><br><span class="line">        deepCopy.show();</span><br><span class="line">        System.out.println(citationDeepCopy.getStu() == deepCopy.getStu()); <span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用场景-3"><a href="#使用场景-3" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>对象的创建非常复杂，可以使用原型模式快捷的创建对象。</li><li>性能和安全要求比较高。</li></ul><h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><h3 id="概念-4"><a href="#概念-4" class="headerlink" title="概念"></a>概念</h3><p>将一个复杂对象的构建与表示分离，使得同样的构建过程可以创建不同的表示。</p><ul><li>分离了部件的构造(由Builder来负责)和装配(由Director负责)。 从而可以构造出复杂的对象。这个模式适用于：某个对象的构建过程复杂的情况。</li><li>由于实现了构建和装配的解耦。不同的构建器，相同的装配，也可以做出不同的对象；相同的构建器，不同的装配顺序也可以做出不同的对象。也就是实现了构建算法、装配算法的解耦，实现了更好的复用。</li><li>建造者模式可以将部件和其组装过程分开，一步一步创建一个复杂的对象。用户只需要指定复杂对象的类型就可以得到该对象，而无须知道其内部的具体构造细节。</li></ul><h3 id="结构-4"><a href="#结构-4" class="headerlink" title="结构"></a>结构</h3><p>建造者（Builder）模式包含如下角色：</p><ul><li><p>抽象建造者类（Builder）：这个接口规定要实现复杂对象的那些部分的创建，并不涉及具体的部件对象的创建。</p></li><li><p>具体建造者类（ConcreteBuilder）：实现 Builder 接口，完成复杂产品的各个部件的具体创建方法。在构造过程完成后，提供产品的实例。</p></li><li><p>产品类（Product）：要创建的复杂对象。</p></li><li><p>指挥者类（Director）：调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建或按某种顺序创建。</p></li></ul><p>类图如下：</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202305170025503.png" alt="image-20230517002534463"></p><h3 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h3><p>生产自行车是一个复杂的过程，它包含了车架，车座等组件的生产。而车架又有碳纤维，铝合金等材质的，车座有橡胶，真皮等材质。对于自行车的生产就可以使用建造者模式。</p><p>这里Bike是产品，包含车架，车座等组件；Builder是抽象建造者，MobikeBuilder和OfoBuilder是具体的建造者；Director是指挥者。类图如下：</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202305170022262.png" alt="image-20230517002258179"></p><p><strong>抽象构建者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象构建者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明Bike类型变量并进行赋值</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">Bike</span> <span class="variable">bike</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bike</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">buildFrame</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">buildSeat</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构建自行车</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Bike <span class="title function_">createBike</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>具体构建者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体构建者，构造摩拜单车对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MobileBuilder</span> <span class="keyword">extends</span> <span class="title class_">Builder</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildFrame</span><span class="params">()</span> &#123;</span><br><span class="line">        bike.setFrame(<span class="string">&quot;碳纤维车架&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildSeat</span><span class="params">()</span> &#123;</span><br><span class="line">        bike.setSeat(<span class="string">&quot;真皮车座&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Bike <span class="title function_">createBike</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bike;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体构建者，ofo单车构建者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OfoBuilder</span> <span class="keyword">extends</span> <span class="title class_">Builder</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildFrame</span><span class="params">()</span> &#123;</span><br><span class="line">        bike.setFrame(<span class="string">&quot;铝合金车架&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildSeat</span><span class="params">()</span> &#123;</span><br><span class="line">        bike.setSeat(<span class="string">&quot;橡胶车座&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Bike <span class="title function_">createBike</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bike;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>产品类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 产品对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bike</span> &#123;</span><br><span class="line">    <span class="comment">// 车架</span></span><br><span class="line">    <span class="keyword">private</span> String frame;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 车座</span></span><br><span class="line">    <span class="keyword">private</span> String seat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>指挥者类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 指挥者类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Director</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明Builder类型变量</span></span><br><span class="line">    <span class="keyword">private</span> Builder builder;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Director</span><span class="params">(Builder builder)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.builder = builder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//组装自行车</span></span><br><span class="line">    <span class="keyword">public</span> Bike <span class="title function_">construct</span><span class="params">()</span>&#123;</span><br><span class="line">        builder.buildFrame();</span><br><span class="line">        builder.buildSeat();</span><br><span class="line">        <span class="keyword">return</span> builder.bike;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建指挥者对象</span></span><br><span class="line">        <span class="type">Director</span> <span class="variable">director</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Director</span>(<span class="keyword">new</span> <span class="title class_">MobileBuilder</span>());</span><br><span class="line">        <span class="comment">//让指挥者组装自行车</span></span><br><span class="line">        <span class="type">Bike</span> <span class="variable">bike</span> <span class="operator">=</span> director.construct();</span><br><span class="line">        System.out.println(bike.getFrame()+<span class="string">&#x27;\n&#x27;</span>+bike.getSeat());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h3><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ul><li>建造者模式的封装性很好。使用建造者模式可以有效的封装变化，在使用建造者模式的场景中，一般产品类和建造者类是比较稳定的，因此，将主要的业务逻辑封装在指挥者类中对整体而言可以取得比较好的稳定性。</li><li>在建造者模式中，客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。</li><li>可以更加精细地控制产品的创建过程 。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。</li><li>建造者模式很容易进行扩展。如果有新的需求，通过实现一个新的建造者类就可以完成，基本上不用修改之前已经测试通过的代码，因此也就不会对原有功能引入风险。符合开闭原则。</li></ul><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><p>建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制。</p><h3 id="使用场景-4"><a href="#使用场景-4" class="headerlink" title="使用场景"></a>使用场景</h3><p>建造者（Builder）模式创建的是复杂对象，其产品的各个部分经常面临着剧烈的变化，但将它们组合在一起的算法却相对稳定，所以它通常在以下场合使用。</p><ul><li>创建的对象较复杂，由多个部件构成，各部件面临着复杂的变化，但构件间的建造顺序是稳定的。</li><li>创建复杂对象的算法独立于该对象的组成部分以及它们的装配方式，即产品的构建过程和最终的表示是独立的。</li></ul><h3 id="模式拓展（常用）"><a href="#模式拓展（常用）" class="headerlink" title="模式拓展（常用）"></a>模式拓展（常用）</h3><p>建造者模式除了上面的用途外，在开发中还有一个常用的使用方式，就是当一个类构造器需要传入很多参数时，如果创建这个类的实例，代码可读性会非常差，而且很容易引入错误，此时就可以利用建造者模式进行重构。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手机类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line">    <span class="keyword">private</span> String screen;</span><br><span class="line">    <span class="keyword">private</span> String memory;</span><br><span class="line">    <span class="keyword">private</span> String mainboard;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Phone</span><span class="params">(Builder builder)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cpu = builder.cpu;</span><br><span class="line">        <span class="built_in">this</span>.screen = builder.screen;</span><br><span class="line">        <span class="built_in">this</span>.memory = builder.memory;</span><br><span class="line">        <span class="built_in">this</span>.mainboard = builder.mainboard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Builder</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String cpu;</span><br><span class="line">        <span class="keyword">private</span> String screen;</span><br><span class="line">        <span class="keyword">private</span> String memory;</span><br><span class="line">        <span class="keyword">private</span> String mainboard;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">cpu</span><span class="params">(String cpu)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.cpu = cpu;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">screen</span><span class="params">(String screen)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.screen = screen;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">memory</span><span class="params">(String memory)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.memory = memory;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">mainboard</span><span class="params">(String mainboard)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.mainboard = mainboard;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用构建者创建phone对象</span></span><br><span class="line">        <span class="keyword">public</span> Phone <span class="title function_">build</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Phone&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cpu=&#x27;&quot;</span> + cpu + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, screen=&#x27;&quot;</span> + screen + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, memory=&#x27;&quot;</span> + memory + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, mainboard=&#x27;&quot;</span> + mainboard + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现链式调用，使用起来更方便</p><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ether</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//测试手机类</span></span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>.Builder()</span><br><span class="line">                .cpu(<span class="string">&quot;Intel&quot;</span>)</span><br><span class="line">                .screen(<span class="string">&quot;三星屏幕&quot;</span>)</span><br><span class="line">                .memory(<span class="string">&quot;金士顿内存条&quot;</span>)</span><br><span class="line">                .mainboard(<span class="string">&quot;华硕主板&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//Phone&#123;cpu=&#x27;Intel&#x27;, screen=&#x27;三星屏幕&#x27;, memory=&#x27;金士顿内存条&#x27;, mainboard=&#x27;华硕主板&#x27;&#125;</span></span><br><span class="line">        System.out.println(phone);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建者模式对比"><a href="#创建者模式对比" class="headerlink" title="创建者模式对比"></a>创建者模式对比</h2><h3 id="工厂方法模式VS建造者模式"><a href="#工厂方法模式VS建造者模式" class="headerlink" title="工厂方法模式VS建造者模式"></a>工厂方法模式VS建造者模式</h3><p>工厂方法模式注重的是整体对象的创建方式；而建造者模式注重的是部件构建的过程，意在通过一步一步地精确构造创建出一个复杂的对象。</p><p>我们举个简单例子来说明两者的差异，如要制造一个超人，如果使用工厂方法模式，直接产生出来的就是一个力大无穷、能够飞翔、内裤外穿的超人；而如果使用建造者模式，则需要组装手、头、脚、躯干等部分，然后再把内裤外穿，于是一个超人就诞生了。</p><h3 id="抽象工厂模式VS建造者模式"><a href="#抽象工厂模式VS建造者模式" class="headerlink" title="抽象工厂模式VS建造者模式"></a>抽象工厂模式VS建造者模式</h3><p>抽象工厂模式实现对产品家族的创建，一个产品家族是这样的一系列产品：具有不同分类维度的产品组合，采用抽象工厂模式则是不需要关心构建过程，只关心什么产品由什么工厂生产即可。</p><p>建造者模式则是要求按照指定的蓝图建造产品，它的主要目的是通过组装零配件而产生一个新产品。</p><p>如果将抽象工厂模式看成汽车配件生产工厂，生产一个产品族的产品，那么建造者模式就是一个汽车组装工厂，通过对部件的组装可以返回一辆完整的汽车。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;创建型模式的主要关注点是“怎样创建对象？”，它的主要特点是“将对象的创建与使用分离”。&lt;/p&gt;
&lt;p&gt;这样可以降低系统的耦合度，使用者不需要关注对象的创建细节。&lt;/p&gt;
&lt;p&gt;创建型模式分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单例模式&lt;/li&gt;
&lt;li&gt;工厂方法模式&lt;/li&gt;
&lt;</summary>
      
    
    
    
    <category term="经验分享" scheme="https://blog.bywind.xyz/categories/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="推荐" scheme="https://blog.bywind.xyz/tags/%E6%8E%A8%E8%8D%90/"/>
    
    <category term="设计模式" scheme="https://blog.bywind.xyz/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="创建型模式" scheme="https://blog.bywind.xyz/tags/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式概述：构建灵活可重用的代码，提高软件开发效率</title>
    <link href="https://blog.bywind.xyz/posts/e617886d.html"/>
    <id>https://blog.bywind.xyz/posts/e617886d.html</id>
    <published>2023-07-24T06:28:36.000Z</published>
    <updated>2023-08-23T06:37:25.991Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式概述"><a href="#设计模式概述" class="headerlink" title="设计模式概述"></a>设计模式概述</h2><h3 id="产生背景"><a href="#产生背景" class="headerlink" title="产生背景"></a>产生背景</h3><p>1977年美国著名建筑大师、加利福尼亚大学伯克利分校环境结构中心主任<code>克里斯托夫·亚历山大（Christopher Alexander）</code>在他的著作《建筑模式语言：城镇、建筑、构造》中描述了一些常见的建筑设计问题，并提出了 253 种关于对城镇、邻里、住宅、花园和房间等进行设计的基本模式。</p><p>1990年软件工程界开始研讨设计模式的话题，后来召开了多次关于设计模式的研讨会。直到1995 年，艾瑞克·伽马（ErichGamma）、理査德·海尔姆（Richard Helm）、拉尔夫·约翰森（Ralph Johnson）、约翰·威利斯迪斯（John Vlissides）等 4 位作者合作出版了《设计模式：可复用面向对象软件的基础》一书，在此书中收录了 23 个设计模式，这是设计模式领域里程碑的事件，导致了软件设计模式的突破。这 4 位作者在软件开发领域里也以他们的“四人组”（Gang of Four，GoF）著称。</p><h3 id="软件设计模式概念"><a href="#软件设计模式概念" class="headerlink" title="软件设计模式概念"></a>软件设计模式概念</h3><p>软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。</p><h3 id="学习设计模式的必要性"><a href="#学习设计模式的必要性" class="headerlink" title="学习设计模式的必要性"></a>学习设计模式的必要性</h3><p>设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。</p><p>正确使用设计模式具有以下优点。</p><ul><li>可以提高程序员的思维能力、编程能力和设计能力。</li><li>使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。</li><li>使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。</li></ul><h3 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h3><ul><li><p><strong>创建型模式</strong></p><p>用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。GoF（四人组）书中提供了单例、原型、工厂方法、抽象工厂、建造者等 5 种创建型模式。</p></li><li><p><strong>结构型模式</strong></p><p>用于描述如何将类或对象按某种布局组成更大的结构，GoF（四人组）书中提供了代理、适配器、桥接、装饰、外观、享元、组合等 7 种结构型模式。</p></li><li><p><strong>行为型模式</strong></p><p>用于描述类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务，以及怎样分配职责。GoF（四人组）书中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等 11 种行为型模式。</p></li></ul><h3 id="设计模式关系"><a href="#设计模式关系" class="headerlink" title="设计模式关系"></a>设计模式关系</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/the-relationship-between-design-patterns.jpg"></p><blockquote><p>注：图片来自菜鸟教程</p></blockquote><h2 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h2><p>统一建模语言（Unified Modeling Language，UML）是用来设计软件的可视化建模语言。它的特点是简单、统一、图形化、能表达软件设计中的动态与静态信息。</p><p>UML 从目标系统的不同角度出发，定义了用例图、类图、对象图、状态图、活动图、时序图、协作图、构件图、部署图等 9 种图。</p><h3 id="类图概述"><a href="#类图概述" class="headerlink" title="类图概述"></a>类图概述</h3><p>类图(Class diagram)是显示了模型的静态结构，特别是模型中存在的类、类的内部结构以及它们与其他类的关系等。类图不显示暂时性的信息。类图是面向对象建模的主要组成部分。</p><h3 id="类图作用"><a href="#类图作用" class="headerlink" title="类图作用"></a>类图作用</h3><ul><li>在软件工程中，类图是一种静态的结构图，描述了系统的类的集合，类的属性和类之间的关系，可以简化了人们对系统的理解；</li><li>类图是系统分析和设计阶段的重要产物，是系统编码和测试的重要模型。</li></ul><h3 id="类图表示法"><a href="#类图表示法" class="headerlink" title="类图表示法"></a>类图表示法</h3><p>在UML类图中，类使用包含类名、属性(field) 和方法(method) 且带有分割线的矩形来表示，比如下图表示一个Employee类，它包含name,age和address这3个属性，以及work()方法。</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202305091605768.jpeg" alt="img"></p><p>属性&#x2F;方法名称前加的加号和减号表示了这个属性&#x2F;方法的可见性，UML类图中表示可见性的符号有三种：</p><ul><li>+：表示public</li><li>-：表示private</li><li>#：表示protected</li></ul><p>属性的完整表示方式是： <strong>可见性 名称 ：类型 [ &#x3D; 缺省值]</strong></p><p>方法的完整表示方式是： <strong>可见性 名称(参数列表) [ ： 返回类型]</strong></p><blockquote><p>注意：</p><p>1，中括号中的内容表示是可选的</p><p>2，也有将类型放在变量名前面，返回值类型放在方法名前面</p></blockquote><p><strong>举个栗子：</strong></p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202305091606631.png" alt="img"></p><p>上图Demo类定义了三个方法：</p><ul><li>method()方法：修饰符为public，没有参数，没有返回值。</li><li>method1()方法：修饰符为private，没有参数，返回值类型为String。</li><li>method2()方法：修饰符为protected，接收两个参数，第一个参数类型为int，第二个参数类型为String，返回值类型是int。</li></ul><h3 id="类与类之间关系的表示方式"><a href="#类与类之间关系的表示方式" class="headerlink" title="类与类之间关系的表示方式"></a>类与类之间关系的表示方式</h3><h4 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h4><p>关联关系是对象之间的一种引用关系，用于表示一类对象与另一类对象之间的联系，如老师和学生、师傅和徒弟、丈夫和妻子等。关联关系是类与类之间最常用的一种关系，分为一般关联关系、聚合关系和组合关系。我们先介绍一般关联。</p><p>关联又可以分为单向关联，双向关联，自关联。</p><p><strong>1，单向关联</strong></p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202305091606189.png" alt="img"></p><p>在UML类图中单向关联用一个带箭头的实线表示。上图表示每个顾客都有一个地址，这通过让Customer类持有一个类型为Address的成员变量类实现。</p><p><strong>2，双向关联</strong></p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202305091606244.png" alt="img"></p><p>从上图中我们很容易看出，所谓的双向关联就是双方各自持有对方类型的成员变量。</p><p>在UML类图中，双向关联用一个不带箭头的直线表示。上图中在Customer类中维护一个List<Product>，表示一个顾客可以购买多个商品；在Product类中维护一个Customer类型的成员变量表示这个产品被哪个顾客所购买。</p><p><strong>3，自关联</strong></p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202305091608228.png" alt="img"></p><p>自关联在UML类图中用一个带有箭头且指向自身的线表示。上图的意思就是Node类包含类型为Node的成员变量，也就是“自己包含自己”。</p><h4 id="聚合关系"><a href="#聚合关系" class="headerlink" title="聚合关系"></a>聚合关系</h4><p>聚合关系是关联关系的一种，是强关联关系，是整体和部分之间的关系。</p><p>聚合关系也是通过成员对象来实现的，其中成员对象是整体对象的一部分，但是成员对象可以脱离整体对象而独立存在。例如，学校与老师的关系，学校包含老师，但如果学校停办了，老师依然存在。</p><p>在 UML 类图中，聚合关系可以用带空心菱形的实线来表示，菱形指向整体。下图所示是大学和教师的关系图：</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202305091608144.png" alt="img"></p><h4 id="组合关系"><a href="#组合关系" class="headerlink" title="组合关系"></a>组合关系</h4><p>组合表示类之间的整体与部分的关系，但它是一种更强烈的聚合关系。</p><p>在组合关系中，整体对象可以控制部分对象的生命周期，一旦整体对象不存在，部分对象也将不存在，部分对象不能脱离整体对象而存在。例如，头和嘴的关系，没有了头，嘴也就不存在了。</p><p>在 UML 类图中，组合关系用带实心菱形的实线来表示，菱形指向整体。下图所示是头和嘴的关系图：</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202305091608109.png" alt="img"></p><h4 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h4><p>依赖关系是一种使用关系，它是对象之间耦合度最弱的一种关联方式，是临时性的关联。在代码中，某个类的方法通过局部变量、方法的参数或者对静态方法的调用来访问另一个类（被依赖类）中的某些方法来完成一些职责。</p><p>在 UML 类图中，依赖关系使用带箭头的虚线来表示，箭头从使用类指向被依赖的类。下图所示是司机和汽车的关系图，司机驾驶汽车：</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202305091608023.png" alt="img"></p><h4 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h4><p>继承关系是对象之间耦合度最大的一种关系，表示一般与特殊的关系，是父类与子类之间的关系，是一种继承关系。</p><p>在 UML 类图中，泛化关系用带空心三角箭头的实线来表示，箭头从子类指向父类。在代码实现时，使用面向对象的继承机制来实现泛化关系。例如，Student 类和 Teacher 类都是 Person 类的子类，其类图如下图所示：</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202305091608070.png" alt="img"></p><h4 id="实现关系"><a href="#实现关系" class="headerlink" title="实现关系"></a>实现关系</h4><p>实现关系是接口与实现类之间的关系。在这种关系中，类实现了接口，类中的操作实现了接口中所声明的所有的抽象操作。</p><p>在 UML 类图中，实现关系使用带空心三角箭头的虚线来表示，箭头从实现类指向接口。例如，汽车和船实现了交通工具，其类图如图 9 所示。</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202305091608920.png" alt="img"></p><h2 id="软件设计原则"><a href="#软件设计原则" class="headerlink" title="软件设计原则"></a>软件设计原则</h2><p>在软件开发中，为了提高软件系统的可维护性和可复用性，增加软件的可扩展性和灵活性，程序员要尽量根据6条原则来开发程序，从而提高软件开发效率、节约软件开发成本和维护成本。</p><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><p><strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。</p><p>想要达到这样的效果，我们需要使用接口和抽象类。</p><p>因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以了。</p><p>下面以 <code>搜狗输入法</code> 的皮肤为例介绍开闭原则的应用。</p><p>【例】<code>搜狗输入法</code> 的皮肤设计。</p><p>分析：<code>搜狗输入法</code> 的皮肤是输入法背景图片、窗口颜色和声音等元素的组合。用户可以根据自己的喜爱更换自己的输入法的皮肤，也可以从网上下载新的皮肤。这些皮肤有共同的特点，可以为其定义一个抽象类（AbstractSkin），而每个具体的皮肤（DefaultSpecificSkin和HeimaSpecificSkin）是其子类。用户窗体可以根据需要选择或者增加新的主题，而不需要修改原代码，所以它是满足开闭原则的。</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202305091612554.png" alt="img"></p><h3 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h3><p>里氏代换原则是面向对象设计的基本原则之一。</p><p>里氏代换原则：任何基类可以出现的地方，子类一定可以出现。通俗理解：子类可以扩展父类的功能，但不能改变父类原有的功能。换句话说，子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。</p><p>如果通过重写父类的方法来完成新的功能，这样写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的概率会非常大。</p><p>下面看一个里氏替换原则中经典的一个例子</p><p>【例】正方形不是长方形。</p><p>在数学领域里，正方形毫无疑问是长方形，它是一个长宽相等的长方形。所以，我们开发的一个与几何图形相关的软件系统，就可以顺理成章的让正方形继承自长方形。</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202305091612631.png" alt="img"></p><p>代码如下：</p><p><strong>长方形类（Rectangle）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> length;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> width;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getLength</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLength</span><span class="params">(<span class="type">double</span> length)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.length = length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getWidth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWidth</span><span class="params">(<span class="type">double</span> width)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正方形（Square）：</strong></p><p>由于正方形的长和宽相同，所以在方法setLength和setWidth中，对长度和宽度都需要赋相同值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWidth</span><span class="params">(<span class="type">double</span> width)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.setLength(width);</span><br><span class="line">        <span class="built_in">super</span>.setWidth(width);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLength</span><span class="params">(<span class="type">double</span> length)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.setLength(length);</span><br><span class="line">        <span class="built_in">super</span>.setWidth(length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类RectangleDemo是我们的软件系统中的一个组件，它有一个resize方法依赖基类Rectangle，resize方法是RectandleDemo类中的一个方法，用来实现宽度逐渐增长的效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RectangleDemo</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">resize</span><span class="params">(Rectangle rectangle)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (rectangle.getWidth() &lt;= rectangle.getLength()) &#123;</span><br><span class="line">            rectangle.setWidth(rectangle.getWidth() + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印长方形的长和宽</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printLengthAndWidth</span><span class="params">(Rectangle rectangle)</span> &#123;</span><br><span class="line">        System.out.println(rectangle.getLength());</span><br><span class="line">        System.out.println(rectangle.getWidth());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Rectangle</span> <span class="variable">rectangle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rectangle</span>();</span><br><span class="line">        rectangle.setLength(<span class="number">20</span>);</span><br><span class="line">        rectangle.setWidth(<span class="number">10</span>);</span><br><span class="line">        resize(rectangle);</span><br><span class="line">        printLengthAndWidth(rectangle);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span> <span class="variable">rectangle1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Square</span>();</span><br><span class="line">        rectangle1.setLength(<span class="number">10</span>);</span><br><span class="line">        resize(rectangle1);</span><br><span class="line">        printLengthAndWidth(rectangle1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们运行一下这段代码就会发现，假如我们把一个普通长方形作为参数传入resize方法，就会看到长方形宽度逐渐增长的效果，当宽度大于长度,代码就会停止，这种行为的结果符合我们的预期；假如我们再把一个正方形作为参数传入resize方法后，就会看到正方形的宽度和长度都在不断增长，代码会一直运行下去，直至系统产生溢出错误。所以，普通的长方形是适合这段代码的，正方形不适合。 我们得出结论：在resize方法中，Rectangle类型的参数是不能被Square类型的参数所代替，如果进行了替换就得不到预期结果。因此，Square类和Rectangle类之间的继承关系违反了里氏代换原则，它们之间的继承关系不成立，正方形不是长方形。</p><p>如何改进呢？此时我们需要重新设计他们之间的关系。抽象出来一个四边形接口(Quadrilateral)，让Rectangle类和Square类实现Quadrilateral接口</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202305091612554.png"></p><h3 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h3><p>高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。简单的说就是要求对抽象进行编程，不要对实现进行编程，这样就降低了客户与实现模块间的耦合。</p><p>下面看一个例子来理解依赖倒转原则</p><p>【例】组装电脑</p><p>现要组装一台电脑，需要配件cpu，硬盘，内存条。只有这些配置都有了，计算机才能正常的运行。选择cpu有很多选择，如Intel，AMD等，硬盘可以选择希捷，西数等，内存条可以选择金士顿，海盗船等。</p><p><strong>类图如下：</strong></p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202305091630334.png"></p><p>代码如下：</p><p><strong>希捷硬盘类（XiJieHardDisk）:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiJieHardDisk</span> <span class="keyword">implements</span> <span class="title class_">HardDisk</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(String data)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用希捷硬盘存储数据&quot;</span> + data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用希捷希捷硬盘取数据&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;数据&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Intel处理器（IntelCpu）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntelCpu</span> <span class="keyword">implements</span> <span class="title class_">Cpu</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用Intel处理器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>金士顿内存条（KingstonMemory）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KingstonMemory</span> <span class="keyword">implements</span> <span class="title class_">Memory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用金士顿作为内存条&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>电脑（Computer）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> XiJieHardDisk hardDisk;</span><br><span class="line">    <span class="keyword">private</span> IntelCpu cpu;</span><br><span class="line">    <span class="keyword">private</span> KingstonMemory memory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> IntelCpu <span class="title function_">getCpu</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCpu</span><span class="params">(IntelCpu cpu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cpu = cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> KingstonMemory <span class="title function_">getMemory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMemory</span><span class="params">(KingstonMemory memory)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.memory = memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> XiJieHardDisk <span class="title function_">getHardDisk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hardDisk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHardDisk</span><span class="params">(XiJieHardDisk hardDisk)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hardDisk = hardDisk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;计算机工作&quot;</span>);</span><br><span class="line">        cpu.run();</span><br><span class="line">        memory.save();</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> hardDisk.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;从硬盘中获取的数据为：&quot;</span> + data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类（TestComputer）：</strong></p><p>测试类用来组装电脑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestComputer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">        computer.setHardDisk(<span class="keyword">new</span> <span class="title class_">XiJieHardDisk</span>());</span><br><span class="line">        computer.setCpu(<span class="keyword">new</span> <span class="title class_">IntelCpu</span>());</span><br><span class="line">        computer.setMemory(<span class="keyword">new</span> <span class="title class_">KingstonMemory</span>());</span><br><span class="line"></span><br><span class="line">        computer.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码可以看到已经组装了一台电脑，但是似乎组装的电脑的cpu只能是Intel的，内存条只能是金士顿的，硬盘只能是希捷的，这对用户肯定是不友好的，用户有了机箱肯定是想按照自己的喜好，选择自己喜欢的配件。</p><p>根据依赖倒转原则进行改进：</p><p>代码我们只需要修改Computer类，让Computer类依赖抽象（各个配件的接口），而不是依赖于各个组件具体的实现类。</p><p><strong>类图如下：</strong></p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202305091633886.png"></p><p><strong>电脑（Computer）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HardDisk hardDisk;</span><br><span class="line">    <span class="keyword">private</span> Cpu cpu;</span><br><span class="line">    <span class="keyword">private</span> Memory memory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HardDisk <span class="title function_">getHardDisk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hardDisk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHardDisk</span><span class="params">(HardDisk hardDisk)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hardDisk = hardDisk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Cpu <span class="title function_">getCpu</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCpu</span><span class="params">(Cpu cpu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cpu = cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Memory <span class="title function_">getMemory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMemory</span><span class="params">(Memory memory)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.memory = memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;计算机工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>面向对象的开发很好的解决了这个问题，一般情况下抽象的变化概率很小，让用户程序依赖于抽象，实现的细节也依赖于抽象。即使实现细节不断变动，只要抽象不变，客户程序就不需要变化。这大大降低了客户程序与实现细节的耦合度。</p><h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><p>客户端不应该被迫依赖于它不使用的方法；一个类对另一个类的依赖应该建立在最小的接口上。</p><p>下面看一个例子来理解接口隔离原则</p><p>【例】安全门案例</p><p>我们需要创建一个<code>黑马</code>品牌的安全门，该安全门具有防火、防水、防盗的功能。可以将防火，防水，防盗功能提取成一个接口，形成一套规范。类图如下：</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202305091636827.png"></p><p>上面的设计我们发现了它存在的问题，黑马品牌的安全门具有防盗，防水，防火的功能。现在如果我们还需要再创建一个传智品牌的安全门，而该安全门只具有防盗、防水功能呢？很显然如果实现SafetyDoor接口就违背了接口隔离原则，那么我们如何进行修改呢？看如下类图：</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202305091636783.png"></p><p>代码如下：</p><p><strong>AntiTheft（接口）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AntiTheft</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">antiTheft</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Fireproof（接口）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Fireproof</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fireproof</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Waterproof（接口）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Waterproof</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">waterproof</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>HeiMaSafetyDoor（类）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeiMaSafetyDoor</span> <span class="keyword">implements</span> <span class="title class_">AntiTheft</span>,Fireproof,Waterproof &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">antiTheft</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;防盗&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fireproof</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;防火&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">waterproof</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;防水&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ItcastSafetyDoor（类）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ItcastSafetyDoor</span> <span class="keyword">implements</span> <span class="title class_">AntiTheft</span>,Fireproof &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">antiTheft</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;防盗&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fireproof</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;防火&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h3><p>迪米特法则又叫最少知识原则。</p><p>只和你的直接朋友交谈，不跟“陌生人”说话（Talk only to your immediate friends and not to strangers）。</p><p>其含义是：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。</p><p>迪米特法则中的“朋友”是指：当前对象本身、当前对象的成员对象、当前对象所创建的对象、当前对象的方法参数等，这些对象同当前对象存在关联、聚合或组合关系，可以直接访问这些对象的方法。</p><p>下面看一个例子来理解迪米特法则</p><p>【例】明星与经纪人的关系实例</p><p>明星由于全身心投入艺术，所以许多日常事务由经纪人负责处理，如和粉丝的见面会，和媒体公司的业务洽淡等。这里的经纪人是明星的朋友，而粉丝和媒体公司是陌生人，所以适合使用迪米特法则。</p><p>类图如下：</p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202305091636860.png" alt="image-20191229173554296" style="zoom:80%;" /><p>代码如下：</p><p><strong>明星类（Star）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Star</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Star</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>粉丝类（Fans）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fans</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Fans</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>媒体公司类（Company）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Company</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Company</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>经纪人类（Agent）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Agent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Star star;</span><br><span class="line">    <span class="keyword">private</span> Fans fans;</span><br><span class="line">    <span class="keyword">private</span> Company company;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStar</span><span class="params">(Star star)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.star = star;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFans</span><span class="params">(Fans fans)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fans = fans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCompany</span><span class="params">(Company company)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.company = company;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">meeting</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(fans.getName() + <span class="string">&quot;与明星&quot;</span> + star.getName() + <span class="string">&quot;见面了。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">business</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(company.getName() + <span class="string">&quot;与明星&quot;</span> + star.getName() + <span class="string">&quot;洽淡业务。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h3><p>合成复用原则是指：尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。</p><p>通常类的复用分为继承复用和合成复用两种。</p><p>继承复用虽然有简单和易实现的优点，但它也存在以下缺点：</p><ol><li>继承复用破坏了类的封装性。因为继承会将父类的实现细节暴露给子类，父类对子类是透明的，所以这种复用又称为“白箱”复用。</li><li>子类与父类的耦合度高。父类的实现的任何改变都会导致子类的实现发生变化，这不利于类的扩展与维护。</li><li>它限制了复用的灵活性。从父类继承而来的实现是静态的，在编译时已经定义，所以在运行时不可能发生变化。</li></ol><p>采用组合或聚合复用时，可以将已有对象纳入新对象中，使之成为新对象的一部分，新对象可以调用已有对象的功能，它有以下优点：</p><ol><li>它维持了类的封装性。因为成分对象的内部细节是新对象看不见的，所以这种复用又称为“黑箱”复用。</li><li>对象间的耦合度低。可以在类的成员位置声明抽象。</li><li>复用的灵活性高。这种复用可以在运行时动态进行，新对象可以动态地引用与成分对象类型相同的对象。</li></ol><p>下面看一个例子来理解合成复用原则</p><p>【例】汽车分类管理程序</p><p>汽车按“动力源”划分可分为汽油汽车、电动汽车等；按“颜色”划分可分为白色汽车、黑色汽车和红色汽车等。如果同时考虑这两种分类，其组合就很多。类图如下：</p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202305091636935.png" alt="image-20191229173554296" style="zoom:80%;" /><p>从上面类图我们可以看到使用继承复用产生了很多子类，如果现在又有新的动力源或者新的颜色的话，就需要再定义新的类。我们试着将继承复用改为聚合复用看一下。</p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202305091636899.png" alt="image-20191229173554296" style="zoom:80%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;设计模式概述&quot;&gt;&lt;a href=&quot;#设计模式概述&quot; class=&quot;headerlink&quot; title=&quot;设计模式概述&quot;&gt;&lt;/a&gt;设计模式概述&lt;/h2&gt;&lt;h3 id=&quot;产生背景&quot;&gt;&lt;a href=&quot;#产生背景&quot; class=&quot;headerlink&quot; title=&quot;产</summary>
      
    
    
    
    <category term="经验分享" scheme="https://blog.bywind.xyz/categories/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="推荐" scheme="https://blog.bywind.xyz/tags/%E6%8E%A8%E8%8D%90/"/>
    
    <category term="设计模式" scheme="https://blog.bywind.xyz/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="必看" scheme="https://blog.bywind.xyz/tags/%E5%BF%85%E7%9C%8B/"/>
    
  </entry>
  
  <entry>
    <title>软件设计师知识点整理（三）</title>
    <link href="https://blog.bywind.xyz/posts/e3a25699.html"/>
    <id>https://blog.bywind.xyz/posts/e3a25699.html</id>
    <published>2023-07-24T02:50:06.000Z</published>
    <updated>2024-07-03T08:40:08.538Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="/posts/3e2b8eae.html">软件设计师知识点整理（一）</a><br> 一、计算机网络<br> 二、操作系统基本原理<br> 四、计算机组成原理与体系结构</p><p><a href="/posts/aebcf5cb.html">软件设计师知识点整理（二）</a><br> 四、编译原理基础<br> 五、软件工程概述<br> 六、计算机软件法律法规</p><p><a href="#">软件设计师知识点整理（三）</a><br> 七、系统安全设计与分析<br> 八、数据结构与算法基础<br> 九、数据库系统</p></blockquote><h2 id="七、系统安全分析与设计"><a href="#七、系统安全分析与设计" class="headerlink" title="七、系统安全分析与设计"></a>七、系统安全分析与设计</h2><h3 id="信息系统安全属性"><a href="#信息系统安全属性" class="headerlink" title="信息系统安全属性"></a>信息系统安全属性</h3><p>保密性：最小授权原则(只给应用维持其基本职能最基本的权限)、防暴露(如在命名时可以将名称设置为乱码)、信息加密(防止信息在传输时被截获后破解)、物理保密<br>完整性(即保证数据在传输过程中不受损耗)：安全协议、校验码、密码校验、数字签名、公证<br>可用性(只允许合法用户使用这些资源)：综合保障(IP过滤、业务流控制、路由控制选择、审计跟踪)<br>不可抵赖性：数字签名</p><h3 id="对称加密技术与非对称加密技术"><a href="#对称加密技术与非对称加密技术" class="headerlink" title="对称加密技术与非对称加密技术"></a>对称加密技术与非对称加密技术</h3><h4 id="对称加密技术"><a href="#对称加密技术" class="headerlink" title="对称加密技术"></a>对称加密技术</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240826776.png" alt="image.png"><br>图注：替换：即将替换前后的符号对应关系绘制成为一张表，翻译时直接读表进行替换<br>3DES更难破解；优点：加密速度快、效率高。缺点：加密强度不高、密钥分发困难</p><h4 id="非对称加密技术"><a href="#非对称加密技术" class="headerlink" title="非对称加密技术"></a>非对称加密技术</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240826173.png" alt="image.png"><br>图注：每个人都有自己的公钥，而公钥是明文公开的，大家都知道的，而私钥则是发送方与接受方各自独有且不能被别人知道的，如甲的公钥加密的信息只能由甲的私钥来解密，甲想要把信息发送给乙则可以用乙的公钥加密后再发送给乙，乙收到后再用自己的私钥来解密；该加密方式一般采用1024位加密，因此极为庞大的信息若采用该加密方式则极难解密</p><h3 id="信息摘要"><a href="#信息摘要" class="headerlink" title="信息摘要"></a>信息摘要</h3><blockquote><p>防止数据被篡改</p></blockquote><p>1.概念：在信息中，摘要是信息的特征值，原始信息发生变化则特征值会改变。<br>2.应用：在信息传输中，若A与B进行信息传输，内容被丙截获，进而篡改后再发送给乙，则会造成信息错误，因此，若A在将信息传输给乙时可以同时传输一个摘要，B收到信息后将摘要翻译出并与之比较，则能够判断信息是否被篡改。<br>3.算法：信息摘要采用的算法是单向散列函数(单向Hash函数),即将明文转换为摘要。而摘要不能转换为明文，常用的信息摘要算法还有MD5、SHA等，市场上广泛使用的MD5，SHA算法的散列值分别为128和160位，由于SHA通常采用的密钥长度较长，因此安全性高于MD5。</p><h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><blockquote><p>防止抵赖</p></blockquote><p>用数字化的一种方式给发送者在摘要上签名，证明这个信息是某人发出来的。<br>是一种防抵赖的技术，可以解决信息摘要中不能解决的一些问题<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240826032.png" alt="image.png"><br>图注：私钥在非对称技术中用来解密，在数字签名中则用来签名，B在收到A的信息后用A的公钥解密即验证，则信息发自A是不可抵赖的</p><h3 id="数字信封与PGP"><a href="#数字信封与PGP" class="headerlink" title="数字信封与PGP"></a>数字信封与PGP</h3><h4 id="数字信封"><a href="#数字信封" class="headerlink" title="数字信封"></a>数字信封</h4><p>概念：发送方将原文用对称密钥加密传输，而将对称密钥用接收方公钥加密发送给对方，接收方收到电子信封后，用自己的私钥解密信封，取出对称私钥解密得原文</p><h4 id="PGP协议"><a href="#PGP协议" class="headerlink" title="PGP协议"></a>PGP协议</h4><p>1.概念：可以用于电子邮件加密，也可以以用于文件存储加密，采用了杂合算法，包括IDEA、RSA、MD5、ZIP数据压缩算法<br>2.特性：PGP承认两种不同的证书格式：PGP证书和X.509证书；PGP证书包含PGP版本号、证书持有者的公钥、证书持有者的信息、证书拥有者的数字签名、证书的有效期、密钥首选的对称加密算法。<br>3.X.509证书：包含证书版本、证书的序列号、签名算法标识、证书有效期、以下数据：证书发行商的名称、证书主体名、主体公钥信息、发布者的数字签名。<br>用户可以通过使用CA的公钥验证CA的签名的真伪来确定一个网站的合法性</p><h4 id="第1-4节练习题"><a href="#第1-4节练习题" class="headerlink" title="第1~4节练习题"></a>第1~4节练习题</h4><p>要求邮件以加密方法传输，邮件最大附件内容可达500MB，发送者不可抵赖，若邮件被第三方截获，第三方无法篡改<br>答：发送方A(公钥：Ea，私钥：Da) 接收方B(公钥：Eb，私钥：Db)<br>(1)A用随机密钥将明文加密(对称加密技术)<br>(2)A再用B的公钥Eb将随机密钥加密<br>(3)A用自己的私钥将明文的摘要签名<br>(4)A将被签名的摘要与加密后的信息传输给B<br>(5)B用B的私钥将A的随机密钥解密出来，并使用随机密钥读取正文<br>(6)B将正文提取摘要并用A的公钥解密A的摘要(若成功解密，则A发送该信息不可抵赖),然后将两个摘要进行对比，若相同，则证明整个过程中信息未被篡改</p><h3 id="各个网络层次的安全保障"><a href="#各个网络层次的安全保障" class="headerlink" title="各个网络层次的安全保障"></a>各个网络层次的安全保障</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240826082.png" alt="image.png"><br>图注：从第二层开始实行协议保障安全，IPSec是对IP包进行加密的协议<br>SSH：是建立在应用层基础上的安全协议，SSH是目前较为可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用SSH协议可以有效防止远程管理过程中的信息泄露问题<br>SSL：SSL是为网络通信提供安全及数据完整性的一种安全协议，在传输层对网络连接进行加密，目前被广泛地用于Web浏览器与服务器之间的身份认证和加密数据传输。</p><h3 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h3><h4 id="网络攻击的分类"><a href="#网络攻击的分类" class="headerlink" title="网络攻击的分类"></a>网络攻击的分类</h4><p>网络攻击可以分为主动攻击和被动攻击两种<br>1.主动攻击：包含攻击者访问他所需信息的故意行为。比如通过远程登陆到特定机器的邮件端口以找出企业邮件服务器的信息；伪造无效IP地址去连接服务器，使接受到错误IP地址的系统浪费时间去连接哪个非法地址。攻击者是在主动地做一些不利于你或你的公司系统的事情，主动攻击包括：拒绝服务攻击、分布式拒绝服务、信息篡改、资源使用、欺骗、伪装、重放等攻击方式<br>2.被动攻击：主要是收集信息而不是进行访问，数据的合法用户对这种活动一点也察觉不到。被动攻击包括嗅探、信息收集等攻击方式</p><h4 id="常见的网络威胁"><a href="#常见的网络威胁" class="headerlink" title="常见的网络威胁"></a>常见的网络威胁</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240826397.png" alt="image.png"><br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240826304.png" alt="image.png"><br>图注：DOS攻击主要破坏了系统的可用性，使系统无法合法的使用相应的资源；业务流分析和窃听的区别在于业务流分析侧重长期监听、信息的分析，而窃听则只是获取信息<br>kerberros系统通常在报文中加入时间戳来防止ARP攻击</p><h4 id="防火墙技术"><a href="#防火墙技术" class="headerlink" title="防火墙技术"></a>防火墙技术</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240826967.png" alt="image.png"><br>图注：防火墙技术大体可分为网络级和应用级的防火墙技术，其中网络级的防火墙层次较低，但效率比较高，主要做法是拒绝接受指定IP段的信息，不管其内容；应用级防火墙则是层次较高，效率较低，主要做法是：不论信息的来源而直接将信息开箱进行检查，若有问题则拒绝接收；被屏蔽子网(DMZ)则是一块既不属于内网也不属于外网的隔离区，其目的是为了防止防火墙内部的攻击<br>防火墙最重要的特性就是利用设置的条件，监测通过的包的特征来决定放行或者阻止数据，同时防火墙一般架设在提供某些服务的服务器前，具备网关的能力，用户对服务器或内部网络的访问请求与反馈都需要经过防火墙的转发，相对于外部用户而言防火墙隐藏了内部网络结构。防火墙作为一种网络安全设备，安装有网络操作系统，可以对流经防火墙的流量信息进行详细的日志和审计</p><h2 id="八、数据结构与算法基础"><a href="#八、数据结构与算法基础" class="headerlink" title="八、数据结构与算法基础"></a>八、数据结构与算法基础</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240829772.png" alt="image.png"></p><h3 id="稀疏矩阵"><a href="#稀疏矩阵" class="headerlink" title="稀疏矩阵"></a>稀疏矩阵</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240829043.png" alt="image.png"></p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>1.数据结构的概念：数据结构即计算机存储、组织数据的方式<br>2.数据逻辑结构：分为线性结构与非线性结构；非线性结构又可以分为树型结构(不存在环路)和“图”(可能存在环路)。</p><h3 id="顺序存储与链式存储比较"><a href="#顺序存储与链式存储比较" class="headerlink" title="顺序存储与链式存储比较"></a>顺序存储与链式存储比较</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240829025.png" alt="image.png"></p><h3 id="队列和栈"><a href="#队列和栈" class="headerlink" title="队列和栈"></a>队列和栈</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240829859.png" alt="image.png"></p><h3 id="广义表"><a href="#广义表" class="headerlink" title="广义表"></a>广义表</h3><p>考察广义表的长度计算、深度计算、head及tail运算</p><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ol><li><p>概念：广义表是n个表元素组成的有限序列，是线性表的推广，通常用递归的形式进行定义，即表里面可以包含表(嵌套)</p></li><li><p>表示：LS&#x3D;(a0，a1…….,an)。注：其中LS是表名，ai是表元素，它可以是表(称作子表)，也可以是数据元素(也称原子).其中n是广义表的长度(最外层包含的元素个数),n&#x3D;0的广义表为空表；而递归定义的重数就是广义表的深度，直观的说，就是定义中嵌套的次数(原子的深度为0，空表的深度为1)</p></li></ol><h4 id="广义表涉及的运算"><a href="#广义表涉及的运算" class="headerlink" title="广义表涉及的运算"></a>广义表涉及的运算</h4><p>1.head运算：即“取表头”(表头就是最外层的第一个表元素)<br>2.tail运算：即取“表尾”(表尾就是除了表头以外的所有其他元素组成的新广义表)</p><h3 id="树和二叉树"><a href="#树和二叉树" class="headerlink" title="树和二叉树"></a>树和二叉树</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240829808.png" alt="image.png"><br>结点：图中的1、2、3….数字圆形都表示结点，<br>结点的度：指一个结点所有的孩子结点数(如结点1的度就是2,结点3的结点度即为1)，<br>树的度：即一个树当中，结点的度最高的那个结点的度数；<br>叶子结点：如7、8等没有孩子结点的结点都称之为叶子结点；<br>分支结点：即有分支的结点<br>内部结点：非叶子结点又非根节点(最上面的那个结点)<br>父节点和子节点：这是一个相对概念，如2就是4的父节点，4就是2的子节点<br>兄弟结点：同属于一个父节点的子节点间称之为兄弟结点<br>层次：行数即为层次，该图中的层次即为4</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240829994.png" alt="image.png"></p><h4 id="B树和B-树"><a href="#B树和B-树" class="headerlink" title="B树和B+树"></a>B树和B+树</h4><p>B-树是B-Tree(Balance Tree)的简称,也称平衡树,注意,此处的“-”是连字符,并不是“减号”。所谓的平衡，就是指它的所有叶子结点都位于同一层次上。B树的阶是指其中结点的最大孩子数，因此一棵m阶B-树中的任何一个结点最多有m棵子树。B-树结点中的关键字，在该结点的内部都是有序排列的，叶子与叶子之间并不相连。B+树的叶子结点中包含了父结点中的关键字以及指向相邻节点的指针。<br>链接:</p><h4 id="树转二叉树"><a href="#树转二叉树" class="headerlink" title="树转二叉树"></a>树转二叉树</h4><p>孩子结点 -&gt; 左子树结点<br>兄弟结点 -&gt; 右子树结点<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240829077.png" alt="image.png"></p><h4 id="查找二叉树"><a href="#查找二叉树" class="headerlink" title="查找二叉树"></a>查找二叉树</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240829039.png" alt="image.png"><br>1.概念：(每一个)根节点的左子树结点的键值都小于根节点，根节点的右子树结点都大于根节点的一类二叉树即被称之为查找二叉树(或排序二叉树)<br>2.价值：这种二叉树能极大的提高查询的效率和速度<br>3.插入运算：(1)若该键值已存在，则不再插入<br>(2)若查找二叉树为空树，则以欲插入的新结点为查找二叉树<br>(3)将要插入结点键值与插入后父结点键值比较，就能确定新结点的位置是父结点的左子结点，还是右子结点<br>4.删除结点：(1)若待删除结点是叶子结点，则直接删除<br>(2)若待删除结点只有一个子结点，则将这个子结点与待删除结点的父结点直接连接<br>(3)若待删除结点p有两个子结点，则在其左子树上，用中序遍历寻找键值最大的结点s，用结点s的值代替结点p的值，然后删除原结点s，结点s必属于上述(1)或(2)</p><h4 id="最优二叉树（哈夫曼树）"><a href="#最优二叉树（哈夫曼树）" class="headerlink" title="最优二叉树（哈夫曼树）"></a>最优二叉树（哈夫曼树）</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240829099.png" alt="image.png"></p><h4 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h4><p>由于二叉树中有许多结点处于空闲的状态，有许多指针并未被利用，而将其空闲资源利用起来方便遍历则是线索二叉树的由来，线索二叉树根据遍历的分类可以被分成三种线索二叉树：前序二叉树、中序二叉树、后序二叉树<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240829608.png" alt="image.png"><br>图注：红线代表推出，绿线代表由来；如图一中二叉树的前序遍历为：ABDEHCFGI；</p><h4 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h4><p>1.概念：任意结点的左右子树深度不能相差超过1，即每结点的平衡度(该结点的左右子树结点的深度之差)只能为-1、0或1<br>例：对序列{1，5，7，9，8，39，73，88}构造平衡二叉树<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240829384.png" alt="image.png"><br>图注：图一和图二都属于排序二叉树，但图一的查询效率远低于图二，因为图一不属于平衡二叉树。而图二属于平衡二叉树</p><h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>图分为有向图和无向图<br>1.无向图：在该图中，若每一个顶点与其他所有顶点都有一条边相连，则称该图为无向图<br>2.有向图：若每一个顶点与其他所有顶带都有两条有向边相互联系，则称该图为有向图</p><h4 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240829868.png" alt="image.png"></p><h4 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h4><p>首先把每个顶点的邻接顶点用链表示出来，然后用一个一维数组来顺序存储上面每个链表的头指针。<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240829408.png" alt="image.png"></p><h4 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240829086.png" alt="image.png"></p><h4 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h4><p>1.AOV网络：我们把用有向边表示活动之间开始的先后关系，这种有向图称之为用顶点表示活动网络，简称AOV网络<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240829513.png" alt="image.png"></p><h4 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h4><p>1.最小生成树：如图若有a个顶点，则在图中取a-1条边，用这些顶点和边重新构成一个树，而路径值最短的情况下的树即为最小生成树<br>2.求最小生成树——普利姆算法(最近点法)：任选一个结点A并将其标定为红点集，其余所有结点标定为蓝点集，然后将离红点集A距离最短的结点B连接起来并将其也纳入红点集，然后继续寻找蓝点集和红点集之间的最短距离结点并将其纳入红点集，重复该操作直至所有结点被纳入红点集(将结点纳入红点集时注意不能形成环)</p><blockquote><p>取初始点，找短边</p></blockquote><p>3.求最小生成树——克鲁斯卡尔算法(最近边法):任选一条边并将其标定为红点集，其余所有边标定为蓝点集，然后将离红点集边端点距离最短的边连接起来并将其也纳入红点集，然后继续寻找蓝点集和红点集之间的最短距离边并将其纳入红点集，重复该操作直至红点集纳入了结点数-1数量的边(将边纳入红点集时注意不能形成环)</p><blockquote><p>选短边</p></blockquote><h3 id="算法基础"><a href="#算法基础" class="headerlink" title="算法基础"></a>算法基础</h3><h4 id="算法的特点"><a href="#算法的特点" class="headerlink" title="算法的特点"></a>算法的特点</h4><p>1.有穷性：算法必须在执行有穷步之后结束<br>2.确定性：算法中每一条指令都必须有确切的含义，不能含糊不清<br>3.算法必须有0个及以上的输入<br>4.算法必须有1个及以上的输出<br>5.有效性：算法的每个步骤都能有效执行并能得到确定的结果。例如a&#x3D;0，b&#x2F;a就无效</p><h4 id="算法的复杂度"><a href="#算法的复杂度" class="headerlink" title="算法的复杂度"></a>算法的复杂度</h4><p>包括时间的复杂度(必考)和空间的复杂度<br>1.时间复杂度的概念：时间复杂度是指程序运行从开始到结束所需要的时间。<br>2.时间复杂度的分析：通常分析时间复杂度的方法时从算法中选取一种对于所研究的问题来说是基本运算的操作，以该操作重复执行的次数作为算法的1时间度量。<br>3.时间复杂度的计算：一般来说，在算法中，原操作重复执行的次数是规模n的某个函数T(n)。由于许多情况下要精确计算T(n)是困难的，因此引入了渐进时间复杂度在数量上估计一个算法的执行时间，其定义如下<br>如T(n)&#x3D;3n^3+2n^2+n，则T(n)&#x3D;O(n^3）<br>且：O(1)&lt;O(log2n)&lt;O(n)&lt;O(nlog2n)&lt;O(n^2)&lt;O(n^3)&lt;O(2^n)<br>注：二叉树的复杂度采用O(log2n)，循环的复杂度采用O(2^n)<br>4.空间复杂度：是指对一个算法在运行过程中临时占用存储空间大小的度量。一个算法的空间复杂度只考虑在运行过程中为局部变量分配的存储空间的大小</p><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>查找的目的是为了在众多关键值中查找到想要的关键值</p><h4 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h4><p>顺序查找<br>1.概念：将待查找的关键字为key的元素从头到尾与表中元素进行比较，如果中间存在关键字为key的元素，则返回成功；否则，则查找失败<br>2.顺序查找的平均查找长度：n+1&#x2F;2<br>3.顺序查找的空间复杂度：O(n)<br>4.顺序查找的优缺点：方法简单但效率较低</p><h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><p>不是所有序列都能用二分查找法，能使用该方法的前提是该序列是有序排列的(如从大到小或从小到大)<br>1.概念：首先将n个有序排列数组的元素最小索引值(非零)和最大索引值相加除以二，然后对其进行向下取整，然后查询该取整后的索引值对应的键值并与待查询键值进行比较，若小于键值则对其右边数组继续使用二分法(从小到大排列的数组中)<br>2.二分取整的时间复杂度：O(log2n)<br>3.优势：效率高</p><h4 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h4><p>在数据进行存储时遵循一定的规则<br>1.散列表的概念：散列表查找的基本思想是：已知关键值集合U，最大关键字为m。设计一个函数Hash，它以关键字为自变量x，关键字的存储地址为因变量y，将将关键字映射到一个有限的、地址连续的区间T中，这个区间就称为散列表，散列查找中使用到的转换函数称为散列函数<br>2.散列表中可能遇到的问题：由于关键值和地址是函数关系，所以可能出现两个关键值对应同一个地址的情况<br>3.解决办法——线性探测法：按出现顺序来定义函数中y值相同的关键值的处理，如b和a冲突，则将b放在a的下一个空单元<br>4.解决办法——伪随机数法</p><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>数据的排序按照稳定性可以分为稳定与不稳定排序，按照空间结构又可以分为内排序与外排序<br>插入类排序：直接插入排序、希尔排序<br>交换类排序：冒泡排序、快速排序<br>选择类排序：简单选择排序、堆排序<br>归并排序<br>基数排序</p><h4 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h4><p>1.概念：即当插入第i个记录时，r1、r2、….rn-1都已经排好序，因此，将第i个记录ri依次与ri-1……r2、r1进行比较，找到合适的位置插入，它简单明了，但速度很慢<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240829296.png" alt="image.png"></p><h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><p>属于插入排序的一种，效率高于直接插入排序，善于应对大量数据的排序<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240829727.png" alt="image.png"><br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240829097.png" alt="image.png"></p><h4 id="直接选择排序"><a href="#直接选择排序" class="headerlink" title="直接选择排序"></a>直接选择排序</h4><p>1.概念：首先在所有记录中选出排序码最小的记录，把它与第一个记录交换，然后在其余的记录内选出排序码最小的记录，与第二个记录交换….依次类推，直到所有记录排完为止<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240829522.png" alt="image.png"></p><h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240829019.png" alt="image.png"><br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240829070.png" alt="image.png"><br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240829705.png" alt="image.png"></p><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240829959.png" alt="image.png"><br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240829100.png" alt="image.png"></p><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240829035.png" alt="image.png"></p><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240829299.png" alt="image.png"></p><h4 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h4><p>1.概念：将关键字拆分为个位、十位、百位…并对其各自位进行排序最后得出结果<br>2.步骤：对于一个数组R<br>(1)先收集其个位并对其个位进行排序(个位相同的则按照出现顺序紧挨着)<br>(2)按照个位排序的顺序将数组元素进行排序<br>(3)对刚刚排好序的数组收集其十位进行排序<br>(4)再将数组按照十位排序的顺序将数组元素进行排序<br>(5)…….重复该操作，直至位数排尽<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240829681.png" alt="image.png"></p><h4 id="排序时间复杂度"><a href="#排序时间复杂度" class="headerlink" title="排序时间复杂度"></a>排序时间复杂度</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240829449.png" alt="image.png"></p><h2 id="九、数据库系统"><a href="#九、数据库系统" class="headerlink" title="九、数据库系统"></a>九、数据库系统</h2><h3 id="数据库模式"><a href="#数据库模式" class="headerlink" title="数据库模式"></a>数据库模式</h3><h4 id="三级模式-两级映射"><a href="#三级模式-两级映射" class="headerlink" title="三级模式-两级映射"></a>三级模式-两级映射</h4><p>数据库系统分为了三个级别的层次，即：内模式，概念模式，外模式<br>三级模式<br>1.内模式：(又称物理数据库模式)；它是和物理层次数据库直接关联的，负责管理存储数据的方式，即数据应以什么格式存放在物理文件上面，以及如何优化这些存储方式；该模式的关注点在于数据如何存放上面<br>2.概念模式：即数据库中的”表“，在该模式中，根据业务以及应用，数据被分成了若干张”表“，表之间会有相应的关联<br>3.外模式：处于用户的应用层次，即数据库中的“视图”，使用户在对数据的控制上有了更多的手段，有了更为灵活的处置方式<br>两级映射<br>1.外模式—概念模式映射：外模式和概念模式具有映射关系，该关系即“视图”和“表”之间的映射关系<br>2.概念模式—内模式映射：即用户想要改变存储结构，我们只需要调整这种映射关系，而不需要去修改用户的应用程序<br>关系图示<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240831886.png" alt="image.png"></p><h4 id="数据库设计过程"><a href="#数据库设计过程" class="headerlink" title="数据库设计过程"></a>数据库设计过程</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240831847.png" alt="image.png"></p><h3 id="ER模型"><a href="#ER模型" class="headerlink" title="ER模型"></a>ER模型</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240831793.png" alt="image.png"></p><h4 id="ER模型由局部到全局的合成方式"><a href="#ER模型由局部到全局的合成方式" class="headerlink" title="ER模型由局部到全局的合成方式"></a>ER模型由局部到全局的合成方式</h4><p>我们在绘制数据库的ER图时，常常从局部开始绘制，然后将许多局部的ER图合成位全局的ER图，而局部的ER图合成全局的ER图时可以有两种方式：逐步集成和一次集成</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240831013.png" alt="image.png"></p><h3 id="关系代数与元组演算"><a href="#关系代数与元组演算" class="headerlink" title="关系代数与元组演算"></a>关系代数与元组演算</h3><p>以选择题的形式出现；有如下运算:并；交；差；笛卡尔积；投影；选择；联接</p><h4 id="差运算"><a href="#差运算" class="headerlink" title="差运算"></a>差运算</h4><p>概念：即得到A集合中B所没有的元素，如A-B即得到B在A中所没有的元素</p><h4 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h4><p>概念：该运算的符号为“X”；若A与B进行“X”运算，则：<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240831698.png" alt="image.png"><br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240831207.png" alt="image.png"></p><h4 id="投影"><a href="#投影" class="headerlink" title="投影"></a>投影</h4><p>概念：该操作即将所选的“列”记录下来<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240831325.png" alt="image.png"></p><h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><p>概念：该操作将所选的“行”记录下来<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240831695.png" alt="image.png"></p><h3 id="规范化理论"><a href="#规范化理论" class="headerlink" title="规范化理论"></a>规范化理论</h3><h4 id="函数依赖"><a href="#函数依赖" class="headerlink" title="函数依赖"></a>函数依赖</h4><p>函数依赖：即函数关系，如学号对应姓名，姓名可以重复，但学号是唯一的，且唯一的学号对应相应了可重复的姓名<br>部分函数依赖(部分依赖)：主键是两个属性的组合键，若主键中的一部分可以确定某个属性，则为部分函数依赖<br>传递函数依赖(传递依赖)：即：若A可以确定B，B可以确定C，则A可以确定C(注意:B不能确定A，因为此时二者即为等价)</p><h4 id="价值与用途"><a href="#价值与用途" class="headerlink" title="价值与用途"></a>价值与用途</h4><p>在非规范化的关系模式中，可能存在的问题包括：数据冗余，更新异常，插入异常，删除异常<br>价值<br>1.价值包括：解决数据冗余，如在记录大学生所属系别时，记录为计算机系就比计算机科学系更为简便，在大量数据的处理中，这一点的改进极为重要</p><h4 id="键"><a href="#键" class="headerlink" title="键"></a>键</h4><p>1.概念：属性的集合<br><strong>超键</strong><br>1.概念：唯一能够标识元组(实体，即数据库的一行)的键，可以是单个的属性，也可以是属性的组合<br><strong>候选键</strong><br>1.概念：是一种特殊的超键，它是在超键的基础上消除多余属性后的键，可以有多个<br>2.求解候选键步骤：(1)将关系模式的函数依赖关系用“有向图”的方式表示<br>(2)找入度为0的属性，并以该属性集合为起点，尝试遍历有向图，若能遍历图中所有结点，则该属性集即为关系模式的候选键。注：入度即为第一个只有指向箭头，没有被指箭头的属性<br>(3)若入度为0的属性集不能遍历图中所有结点(或没有入度为0的属性)，则需要尝试性的将一些中间结点(既有入度，也有出度的结点)并入入度为0的属性集中，直至该集合能遍历所有结点，该集合即为候选键<br><strong>主键</strong><br>概念：只能有一个，如学号和身份证号都能标识一个学生，而主键则是在两个属性集合之中则其一<br><strong>外键</strong><br>概念：外键是其他关系的主键，因为许多时候我们需要对表做关联</p><h4 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240831437.png" alt="image.png"></p><h4 id="模式分解"><a href="#模式分解" class="headerlink" title="模式分解"></a>模式分解</h4><p>范式级别不够时我们采取模式的拆分<br>模式拆分时要保持的原则<br>1.保持函数依赖分解(不需要保持冗余的函数依赖)<br>2.无损分解：有损即不能还原；无损即可以还原<br>注:无损联接分解：指将一个关系模式分解成若干个关系模式后，通过自然联接和投影等运算仍能还原到原来的模式<br>判断是否满足无损分解的方法<br>1.表格法<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240831919.png" alt="image.png"><br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240831577.png" alt="image.png"><br>图注：当有任意一行全为a时，该关系模式的分解即为无损分解<br>2.计算法<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240831600.png" alt="image.png"></p><p>图注：第一个p1是无损分解，第二个p2是有损分解</p><h3 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h3><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>1.概念：把多个操作封装起来，将其看成一个整体来进行操作，可以便于并行并发的处理一些事情；具有的特性：<br>(1) 原子性：即事务的内容操作要么全部做，要么全不做；<br>(2) 一致性：在事务执行之前，数据保持一致的状态，执行之后数据也是一致的状态<br>(3) 隔离性：事务之间的执行是独立进行的<br>(4) 持续性：事务执行之后，其结果造成的影响是持续的，即使数据库崩溃，其对数据库的更新操作也永久有效</p><h4 id="并发并行带来的问题"><a href="#并发并行带来的问题" class="headerlink" title="并发并行带来的问题"></a>并发并行带来的问题</h4><p>1.丢失更新：<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240831791.png" alt="image.png"><br>图注：在这两个事务中，T1执行的结果为5，T2执行的结果为2，我们想要得到的是A减去5再减去8的结果，但最终结果为2，因为下一个执行的事务结果会覆盖上一个事务执行的结果<br>2.不可重复读：<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240831207.png" alt="image.png"><br>图注：在T1运算中，求A与B的和时，为了提高准确率，程序会再次进行验算，但在第一次运算和第二次运算的间隙，将进行T2运算，T2运算的结果会将A与B的值进行覆盖，这将会产生死锁问题<br>3.读“脏”数据：<br>脏数据不是真正的数据，不是我们执行过程中真的产生的数据，只是一个临时值<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240831531.png" alt="image.png"><br>图注：值70是计算过程产生的数据，属于临时数据，该数据被恢复为了20，使得T2操作将会出错</p><h4 id="解决并发并行带来的问题的方法——封锁协议"><a href="#解决并发并行带来的问题的方法——封锁协议" class="headerlink" title="解决并发并行带来的问题的方法——封锁协议"></a>解决并发并行带来的问题的方法——封锁协议</h4><p>1.一级封锁协议：事务T在修改数据R之前必须先对其加X(写锁或排他锁)锁，直到事务结束才释放。可防止丢失修改，该锁可以使得除了T以外的所有事务将不能访问R，而事务T则可以阅读或者修改R<br>2.二级封锁协议：一级封锁协议加上事务T在读取数据R之前先对其加S(读锁或共享锁)锁，读完后即可释放S锁。可防止丢失修改，还可防止读”脏”数据，该锁的作用是，所有的事务都可以访问R，但包括T在内的所有事务都不能修改R<br>3.三级封锁协议：一级封锁协议加上事务T在读取数据R之前先对其加S锁，直到事务结束才释放。可防止丢失修改，防止读”脏”数据与防止数据重复读<br>4.两段锁协议：可串行化(通过加锁解锁两个阶段使并发事务排队进行)的。可能发生死锁<br>注：</p><blockquote><p>如果事物T对数据加上X锁后，就只允许事务T读取和修改数据，其他事务对数据A不能再加任何锁，从而也不能读取和修改数据，直到事务T释放数据上的锁<br>如果事务T对数据加上了S锁后，事务T就只能读数据但不可以修改，其他事务可以再对数据A加S锁来读取，只要数据上有S锁，任何事务都只能再对其加S锁，而不能加X锁</p></blockquote><h3 id="数据库完整性约束"><a href="#数据库完整性约束" class="headerlink" title="数据库完整性约束"></a>数据库完整性约束</h3><p>主要有三种约束：实体完整性约束，参照完整性约束，用户自定义完整性约束；约束的作用是提高数据的可靠性</p><h4 id="实体完整性约束"><a href="#实体完整性约束" class="headerlink" title="实体完整性约束"></a>实体完整性约束</h4><p>概念：即我们在使用数据库时，给数据表定义主键</p><h4 id="参照完整性约束"><a href="#参照完整性约束" class="headerlink" title="参照完整性约束"></a>参照完整性约束</h4><p>概念：即外键中的约束，如：我们设置了一个员工表，其中含有部门号，若部门号设置了参照完整性约束，则在设置部门号时，其内容必须是主键中的内容，若不是，则会报错<br>用户自定义完整性约束<br>概念：即用户可以设置属性的值的要求，如属性“年龄”；用户可以自行设置“不能输入负数”限定</p><h4 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h4><p>概念：即：写脚本来约束数据库，用来设置更为复杂的约束</p><h3 id="数据库安全"><a href="#数据库安全" class="headerlink" title="数据库安全"></a>数据库安全</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240831865.png" alt="image.png"></p><h3 id="数据库备份与恢复"><a href="#数据库备份与恢复" class="headerlink" title="数据库备份与恢复"></a>数据库备份与恢复</h3><p>数据备份按备份方式可分为热备份和冷备份；按备份的量可分为：完全备份，差量备份，增量备份；</p><h4 id="冷备份"><a href="#冷备份" class="headerlink" title="冷备份"></a>冷备份</h4><p>1.概念：冷备份也称静态备份，是将数据库正常关闭，在停止状态下，将数据库的文件全部备份(复制)下来<br>2.优点：非常快速的备份方法(只需要复制文件);容易归档(简单复制即可)；容易恢复到某个时间点上(只需将文件再复制回去)；能与归档方法结合，做数据库“最佳状态”的恢复；低度维护，高度安全<br>3.缺点：单独使用时，只能提供到某一时间点上的恢复；在实施备份的全过程中，数据库必须要作备份而不能做其他工作；若磁盘空间有限，只能复制到磁带等其他外部存储设备上，速度会很慢；不能按表或按用户恢复</p><h4 id="热备份"><a href="#热备份" class="headerlink" title="热备份"></a>热备份</h4><p>1.概念：热备份也称动态备份，是利用备份软件，在数据库正常运行的状态下，将数据库中的数据文件备份出来<br>2.优点：可在表空间或数据库文件级备份，备份的时间短；备份时数据库仍然可以使用；可达到秒级恢复(恢复到某一时间节点上)；可对几乎所有数据库实体做恢复；恢复是快速的<br>3.缺点：不能出错，否则后果严重；若热备份不成功所得结果不可用于时间点的恢复；因难于维护，所以要特别小心，不允许“以失败告终”</p><h4 id="完全备份，差量备份，增量备份"><a href="#完全备份，差量备份，增量备份" class="headerlink" title="完全备份，差量备份，增量备份"></a>完全备份，差量备份，增量备份</h4><p>1.完全备份：备份整个数据库的内容<br>2.差量备份：仅备份上一次完全备份之后变化的数据(可以解决增量备份可能出现的错误)<br>3.增量备份：备份上一次备份之后变化的数据</p><h4 id="四种转储方式"><a href="#四种转储方式" class="headerlink" title="四种转储方式"></a>四种转储方式</h4><p>1.静态海量转储：在系统中无事务运行时进行，每次转储全部数据库<br>2.静态增量转储：在系统无运行事务时进行，每次只转储上一次转储后更新过的数据<br>3.动态海量转储：转储期间允许对数据库进行存取或修改，每次转储全部数据库<br>4.动态增量转储：转储期间允许对数据库进行存取或修改，每次只转储上一次转储后更新的内容</p><h4 id="数据库故障与解决办法"><a href="#数据库故障与解决办法" class="headerlink" title="数据库故障与解决办法"></a>数据库故障与解决办法</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240831170.png" alt="image.png"></p><h3 id="数据仓库与数据挖掘"><a href="#数据仓库与数据挖掘" class="headerlink" title="数据仓库与数据挖掘"></a>数据仓库与数据挖掘</h3><h4 id="数据仓库"><a href="#数据仓库" class="headerlink" title="数据仓库"></a>数据仓库</h4><ol><li><p>概念：数据仓库是一种特殊的数据库；数据库系统在刚刚建立时运行速度很快，但随着时间的推移，其存储的数据量越来越大，速度也将逐步下降，而为了提高速度，人们会优化存储，通常采用删除较久远历史数据来进行优化，而这些数据仍然具有部分价值，因此我们会专门用一个数据库来对其进行存放，而用来存放这种数据的数据库并不需要插入，添加，修改等操作，更多的操作是查询，因此我们将这种特殊用途的数据库称之为数据仓库</p></li><li><p>数据仓库的特点——面向主题：不同与一般数据库的面向业务，数据仓库的数据是面向主题的</p></li><li><p>数据仓库的特点——集成性：数据仓库会存储诸如月报表，周报表等集成式的数据，而普通数据库并不会这么干</p></li><li><p>数据仓库的特点——相对稳定性：进去的数据将不会进行修改，删除等操作</p></li><li><p>数据仓库的特点——反映历史变化(随着时间变化)：隔一段时间会将数据导入进来</p></li><li><p>数据仓库的建立过程：<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240831131.png" alt="image.png"><br>图注：首先是从数据源中抽取，清理(使数据格式一致)，装载(放到数据仓库中)，刷新(定期向仓库中添加数据);数据集市即部门级的数据仓库，因为数据仓库的建立从企业全局的战略上讲具有非常大的风险，因此只建立部分数据库最后再将其整合则会降低风险，而其中部门级的数据库则称为数据集市</p></li><li><p>OLAP服务器的概念：即联机分析处理服务器，专门做分析处理工作的，最表层是数据的前端工具，前端工具最普通的如查询工具，报表工具，分析工具以及比较独特的数据挖掘工具</p></li></ol><h4 id="数据挖掘"><a href="#数据挖掘" class="headerlink" title="数据挖掘"></a>数据挖掘</h4><p>1.数据挖掘方法分类——关联分析：挖掘出隐藏在数据间的相互关系<br>2.数据挖掘方法分类——序列模式分析：侧重点是分析数据间的前后关系(因果关系)<br>3.数据挖掘方法分类——分类分析：为每一个记录赋予一个标记再按标记分类<br>4.数据挖掘方法分类——聚类分析：分类分析法的逆过程<br>5.数据挖掘方法：<br>(1)决策树<br>(2)神经网络<br>(3)关联规则挖掘算法</p><p>最后祝大家高分通过！</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/strive.gif"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;/posts/3e2b8eae.html&quot;&gt;软件设计师知识点整理（一）&lt;/a&gt;&lt;br&gt; 一、计算机网络&lt;br&gt; 二、操作系统基本原理&lt;br&gt; 四、计算机组成原理与体系结构&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/posts/aebcf5</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://blog.bywind.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="软考" scheme="https://blog.bywind.xyz/tags/%E8%BD%AF%E8%80%83/"/>
    
    <category term="软件设计师" scheme="https://blog.bywind.xyz/tags/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
    
  </entry>
  
  <entry>
    <title>软件设计师知识点整理（二）</title>
    <link href="https://blog.bywind.xyz/posts/aebcf5cb.html"/>
    <id>https://blog.bywind.xyz/posts/aebcf5cb.html</id>
    <published>2023-07-24T00:51:53.000Z</published>
    <updated>2024-07-03T08:40:08.543Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="/posts/3e2b8eae.html">软件设计师知识点整理（一）</a><br> 一、计算机网络<br> 二、操作系统基本原理<br> 四、计算机组成原理与体系结构</p><p><a href="#">软件设计师知识点整理（二）</a><br> 四、编译原理基础<br> 五、软件工程概述<br> 六、计算机软件法律法规</p><p><a href="/posts/e3a25699.html">软件设计师知识点整理（三）</a><br> 七、系统安全设计与分析<br> 八、数据结构与算法基础<br> 九、数据库系统</p></blockquote><h2 id="四、编译原理基础"><a href="#四、编译原理基础" class="headerlink" title="四、编译原理基础"></a>四、编译原理基础</h2><h3 id="编译与解释"><a href="#编译与解释" class="headerlink" title="编译与解释"></a>编译与解释</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232353351.png" alt="image.png"><br><strong>词法错误</strong>：从左到右逐个扫描源程序中的字符，识别其中如关键字(或保留字)、标识符、常数、运算符以及分隔符(标点符号和括号)等<br><strong>语法错误</strong>：主要是分析句子结构的错误，如非法字符，关键字或标识符拼写错误，语法结构错误，if endif不匹配，缺分号等<br><strong>语义错误</strong>：死循环，零循环，其他逻辑错误等<br>词法分析的输出是“记号流”；也就是语法分析的输入，而语法分析的输出是“语法树”<br>词法分析的任务是把源程序的字符串转换为单词符号序列<br>注：<br>(1)符号表在编译程序工作的过程中需要不断收集、记录和使用源程序中一些语法符号的类型和特征等相关信息。这些信息一般以表格形式存储于系统之中<br>(2)在对源程序进行编译的过程中，常生成与源程序等价的中间代码，以利于进行优化，常见的中间代码包括：后缀式、三地址码和树等<br>(3)中间代码的生成与具体的机器没有任何关系，但目标代码的生成与具体的机器有着密切的关系<br>(4)编译过程中，中间代码生成和代码优化并不是每一个编译编译器都必须的</p><h3 id="文法"><a href="#文法" class="headerlink" title="文法"></a>文法</h3><h4 id="文法定义"><a href="#文法定义" class="headerlink" title="文法定义"></a>文法定义</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232353573.png" alt="image.png"></p><h4 id="文法类型"><a href="#文法类型" class="headerlink" title="文法类型"></a>文法类型</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232353715.png" alt="image.png"></p><h4 id="语法推导树"><a href="#语法推导树" class="headerlink" title="语法推导树"></a>语法推导树</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232353665.png" alt="image.png"></p><h3 id="正规式"><a href="#正规式" class="headerlink" title="正规式"></a>正规式</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232353759.png" alt="image.png"></p><h3 id="有限自动机"><a href="#有限自动机" class="headerlink" title="有限自动机"></a>有限自动机</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232353988.png" alt="image.png"></p><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232353149.png" alt="image.png"><br>图注：首先将表达式(括号无需构造)构造为一颗中序表达树，然后再进行下一步运算，该题答案即为D</p><h3 id="传值与传址"><a href="#传值与传址" class="headerlink" title="传值与传址"></a>传值与传址</h3><p>函数调用的方式分为两种：传值调用和传址调用<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232353567.png" alt="image.png"></p><h3 id="多种程序语言特点"><a href="#多种程序语言特点" class="headerlink" title="多种程序语言特点"></a>多种程序语言特点</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232353987.png" alt="image.png"></p><h2 id="五、计算机软件法律法规"><a href="#五、计算机软件法律法规" class="headerlink" title="五、计算机软件法律法规"></a>五、计算机软件法律法规</h2><h3 id="保护期限"><a href="#保护期限" class="headerlink" title="保护期限"></a>保护期限</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240828808.png" alt="image.png"></p><h3 id="知识产权人的确定"><a href="#知识产权人的确定" class="headerlink" title="知识产权人的确定"></a>知识产权人的确定</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240828104.png" alt="image.png"></p><h3 id="侵权判定"><a href="#侵权判定" class="headerlink" title="侵权判定"></a>侵权判定</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240828836.png" alt="image.png"></p><h3 id="标准的分类与标准的代号"><a href="#标准的分类与标准的代号" class="headerlink" title="标准的分类与标准的代号"></a>标准的分类与标准的代号</h3><h4 id="标准的分类"><a href="#标准的分类" class="headerlink" title="标准的分类"></a>标准的分类</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240828853.png" alt="image.png"></p><h4 id="标准的代号"><a href="#标准的代号" class="headerlink" title="标准的代号"></a>标准的代号</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240828308.png" alt="image.png"></p><h3 id="软件能力成熟度模型（CMMI）"><a href="#软件能力成熟度模型（CMMI）" class="headerlink" title="软件能力成熟度模型（CMMI）"></a>软件能力成熟度模型（CMMI）</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240828717.png" alt="image.png"><br>CMMI是一个软件开发团队的评级标准，该评级标准分为了阶段式和连续式两种分组<br>阶段式<br>一级为混乱级，即未通过CMMI认证的团队都是该等级<br>二级为项目级，即对某个具体的项目有相关开发经验和开发能力，但只限于模仿和套用<br>三级为定义级，该进别下的团队有了自己的改进能力，能对他人的项目提出不同的看法<br>连续式<br>CL0(未完成的)：过程域未执行或未得到CL1中定义的所有目标<br>CL1(已执行的)：其共性目标是过程将可标识的输入工作产品转换成可标识的输出工作产品，以实现支持过程域的特别目标<br>CL2(已管理的)：其共性目标是已管理的过程的制度化。根据组织级政策规定过程的运作将使用哪个过程，项目遵循已文档化的计划和过程描述，所有正在工作的人都有权使用足够的资源，所有工作任务和工作产品都将被监控、控制、和审评<br>CL3(已定义级的)：其共性目标集中于已定义的过程的制度化。过程是按照组织的裁剪指南从组织的标准过程中裁剪得到的，还必须收集过程资产和过程的度量，并且用于将来对过程的改进<br>CL4(定量管理的)：其共性目标集中于可定量管理的过程的制度化，使用测量和质量保证来控制和改进过程域，建立和使用关于质量和过程执行的质量目标作为管理准则<br>CL5(优化的)：使用量化(统计学)手段改变和优化过程域，以满足客户的改变和持续改进计划中的过程域的功效</p><h3 id="软件项目管理基础知识"><a href="#软件项目管理基础知识" class="headerlink" title="软件项目管理基础知识"></a>软件项目管理基础知识</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240828922.png" alt="image.png"><br>Gantt图，其最为直观的特点是简洁明了，可以很清楚的看到计划的开展，缺点是不能看出计划间的逻辑关系，无法看出哪个任务先做，哪个任务后做<br>PERT图的缺点是不能清晰地描述各个任务之间的并行关系，每一个原型的左侧是事件执行的顺序号，右上角是最早时间，右下角是最晚时间；<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240828236.png" alt="image.png"><br>事件六的最晚开始时间的计算步骤：先从事件1逐步进行推进，如事件1到事件2最早需要时间加2，事件2到事件5则再需要加2(此时最早时间等于4),而事件1到事件6需要的最早执行时间为3，事件4到事件6的最早时间为4，因此取时间长的为事件6的执行时间(原因是事件六的执行需要事件3和4共同作用),以此类推，事件9所需最早时间为15，再由事件9逆推回来15-4-1&#x3D;10即为事件6的最晚开始时间</p><h4 id="风险管理"><a href="#风险管理" class="headerlink" title="风险管理"></a>风险管理</h4><p>1.风险：指“损失或伤害的可能性”，风险可以分为项目风险和技术风险以及商业风险，特点是关心未来、关心变化、关心选择<br>2.风险曝光度：计算方法是：风险出现的概率乘以风险可能造成的损失；风险曝光度常用于风险的管控</p><h4 id="软件项目估算"><a href="#软件项目估算" class="headerlink" title="软件项目估算"></a>软件项目估算</h4><p>常用的估算方法有三种：基于已经完成的类似项目进行估算、基于分解技术进行估算(分解技术包括问题分解和过程分解)、基于经验估算模型(IBM模型、COCOMO模型、Putnam模型)<br>1.COCOMO：该模型按其详细程度分为基本、中级、详细COCOMO模型<br>基本：该模型是一个静态单变量模型，用于对整个软件系统进行估算<br>中级：该模型时一个静态多变量模型，将软件系统模型分为了系统和部件两个层次，系统由部件构成<br>详细：将软件系统模型分为系统、子系统和模块三个层次<br>注：COCOMOII模型在模型层次结构中有三种不同的规模估算选择：对象点、功能点和代码行</p><h2 id="六、软件工程概述"><a href="#六、软件工程概述" class="headerlink" title="六、软件工程概述"></a>六、软件工程概述</h2><h3 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240005587.png" alt="image.png"><br>优点：是结构化方法的模型，每一个阶段都分工明确<br>缺点：需求分析很难把控，因此一般适用于需求明确或者二次开发<br>注：瀑布模型适用于软件需求很明确的工程</p><h3 id="原型模型、演化模型、增量模型"><a href="#原型模型、演化模型、增量模型" class="headerlink" title="原型模型、演化模型、增量模型"></a>原型模型、演化模型、增量模型</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240005693.png" alt="image.png"><br>(1)原型和瀑布模型是互补关系，原型是为了解决用户需求分析难以把控即需求不明确而提出的，该模型即：先做出初步模型，然后让用户使用，以便于用户进一步明确自己的需求，是一种抛弃式的模型，因为需求一旦明确就会被抛弃<br>(2)演化模型即是一种渐进式的原型，即它采取原型的设计模式，但不会将其抛弃，而是在此基础上进一步进行设计<br>(3)增量模型：是一种递增式设计，将产品一步一步进行设计，每完成一步就交由客户审视，这样也可以使得下一步的设计更为明确</p><h3 id="螺旋模型"><a href="#螺旋模型" class="headerlink" title="螺旋模型"></a>螺旋模型</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240005659.png" alt="image.png"></p><h3 id="V模型"><a href="#V模型" class="headerlink" title="V模型"></a>V模型</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240005499.png" alt="image.png"><br>该模型极为强调测试的作用，测试始终贯穿流程的始终，如：需求分析完成后就进行验收测试和系统测试，概要设计完成后就进行集成测试</p><h3 id="喷泉模型与RAD（了解）"><a href="#喷泉模型与RAD（了解）" class="headerlink" title="喷泉模型与RAD（了解）"></a>喷泉模型与RAD（了解）</h3><h4 id="喷泉模型"><a href="#喷泉模型" class="headerlink" title="喷泉模型"></a>喷泉模型</h4><p>1.概述：该模型最大的特点是面向对象<br>2.特点：基于面向对象的迭代和无间隙</p><h4 id="RAD模型"><a href="#RAD模型" class="headerlink" title="RAD模型"></a>RAD模型</h4><p>1.概述：该模型最大的特点是能够快速构建业务系统<br>2.内容：包括：业务建模、数据建模、过程建模、应用生成、测试与交付</p><h3 id="构件组装模型（CBSD）"><a href="#构件组装模型（CBSD）" class="headerlink" title="构件组装模型（CBSD）"></a>构件组装模型（CBSD）</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240005747.png" alt="image.png"><br>该模型将软件开发过程中的各个模块都做成构件，最后再将构件进行组装，基于构件的软件开发，主要强调在构建软件系统时复用已有的软件“构件”，在检索到可以使用的构件后，需要针对新系统的需求对构件进行合格性检验适应性修改，然后集成到新系统中<br>优点：极大的提高了软件开发当中的复用性，缩短时间、节省成本、增强可靠性</p><h3 id="统一过程模型（UP）"><a href="#统一过程模型（UP）" class="headerlink" title="统一过程模型（UP）"></a>统一过程模型（UP）</h3><p>统一过程模型定义了四个技术阶段及其制品，包括：<br>1.起始阶段：该阶段专注于项目的初创活动<br>2.精化阶段：精化阶段在理解了最初的领域范围之后进行需求分析和架构演进<br>3.构建阶段：该阶段关注系统的构建，产生实现模型<br>4.移交阶段：关注软件提交方面的问题，产生软件增量<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240005420.png" alt="image.png"></p><h3 id="敏捷开发方法"><a href="#敏捷开发方法" class="headerlink" title="敏捷开发方法"></a>敏捷开发方法</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240005950.png" alt="image.png"><br>图注：该方法是一类方法，其特点是快捷，该类方法包括：自适应开发、水晶方法、特征驱动开发、SCRUM、极限编程；他们都遵循一些基本原则和价值观，该类方法适用于做小型项目<br>1.极限编程(XP)特点：测试先行、结对编程、集体代码所有制、持续集成(可以按日甚至按小时为客户提供可运行的版本)、每周工作40个小时<br>2.并列争球法特点：使用迭代的方法，其中把每三十天一次的迭代成为一个冲刺，并按需求的优先级来实现产品，多个自组织和自治小组递增实现产品，并通过简短的日常情况会议进行协调<br>3.水晶法特点：该方法认为每一个不同的项目都需要一套不同的策略、约定和方法论<br>4.敏捷开发方法的重要技术<br>·重构：重构是一种重新组织技术，重新审视需求和设计，重新明确的描述他们的需求和现有的需求，可以简化构件的设计而无需改变其功能或行为</p><h3 id="信息系统开发方法"><a href="#信息系统开发方法" class="headerlink" title="信息系统开发方法"></a>信息系统开发方法</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240005464.png" alt="image.png"><br>图注：该类方法包括四种：结构化法、原型法、面向对象方法、面向服务方法；其中结构化方法的典型代表是瀑布模型，原型法的典型代表是原型和演化模型，目前应用最广的方法是面向对象方法，而面向服务方法尚处于摸索阶段</p><h3 id="需求的分类"><a href="#需求的分类" class="headerlink" title="需求的分类"></a>需求的分类</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240005468.png" alt="image.png"></p><h3 id="结构化设计"><a href="#结构化设计" class="headerlink" title="结构化设计"></a>结构化设计</h3><p>即结构化方法中的软件设计问题，包括概要设计和详细设计，其设计原则是：自顶向下、逐步求精，信息隐蔽、模块独立(通过：高内聚、低耦合、复杂度)</p><h4 id="内聚与耦合"><a href="#内聚与耦合" class="headerlink" title="内聚与耦合"></a>内聚与耦合</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240005339.png" alt="image.png"></p><h4 id="结构化设计的原则"><a href="#结构化设计的原则" class="headerlink" title="结构化设计的原则"></a>结构化设计的原则</h4><p>1.保持模块的大小适中<br>2.尽可能减少调用的深度<br>3.多扇入，少扇出(上层模块调用自己称之为扇入，自己调用其他模块称之为扇出)<br>4.单入口，单出口<br>5.模块的作用域应该在模块之内<br>6.功能应该是可预测的<br>结构化分析的结果<br>包括：一套分层的数据流图、一本数据词典、一组小说明(又称加工逻辑说明)、补充说明</p><h4 id="概要设计"><a href="#概要设计" class="headerlink" title="概要设计"></a>概要设计</h4><p>概要设计包括四个项目<br>1.设计软件系统总体结构<br>2.数据结构设计<br>3.数据库设计<br>4.编写概要设计文档：文档中应有概要设计说明书、数据库设计说明书、用户手册以及修订测试计划<br>注：需求分析确定软件要完成的功能及非功能要求，概要设计将需求转化为软件的模块划分，确定模块之间的调用关系；详细设计将模块进行细化，得到详细的数据结构和算法；编码根据详细设计进行代码的编写，得到可以运行的软件，并进行单元测试</p><h3 id="软件测试"><a href="#软件测试" class="headerlink" title="软件测试"></a>软件测试</h3><h4 id="测试原则与类型"><a href="#测试原则与类型" class="headerlink" title="测试原则与类型"></a>测试原则与类型</h4><p>1.<strong>原则</strong>：(1)尽早、不断的进行测试；<br>(2)程序员避免测试自己设计的程序<br>(3)既要选择有效、合理的数据，也要选择无效、不合理的数据<br>(4)修改后应进行回归测试<br>(5)尚未发现的错误数量与该程序已发现错误数成正比<br>2.<strong>类型</strong>：软件测试类型分为动态测试(利用到了计算机的测试)和静态测试(纯手工的测试)<br>(1)动态测试包括：黑盒测试法(即看不到程序内部，只管输入的是什么，输出的是什么)、白盒测试法(从程序结构方面进行测试)、灰盒测试法<br>(2)静态测试包括：桌前检查、代码走查、代码审查</p><h4 id="测试用例设计"><a href="#测试用例设计" class="headerlink" title="测试用例设计"></a>测试用例设计</h4><p><strong>黑盒测试：</strong><br>等价类划分：即将所有数据类划分为许多个层次，每个数据层次挑选出一个最具代表性的数据进行测试即可<br>边界值分析：即需要对等价类之间的边界值进行测试(一般是端点、略小于端点的值、略大于端点的值)<br>错误推测：即自己推测错误的原因，该方法强调经验<br><strong>白盒测试</strong>(主要是逻辑覆盖测试)：<br>语句覆盖测试：即程序中的每一条语句都要进行测试(覆盖度最低的测试)，通过设计n组数据，使其覆盖掉所有的路径<br>判定覆盖：即所有判断的真假分支都要测试一遍<br>条件覆盖：即在判定时对判定的条件的真假性进行测试<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240005908.png" alt="image.png"></p><h4 id="测试阶段"><a href="#测试阶段" class="headerlink" title="测试阶段"></a>测试阶段</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240005926.png" alt="image.png"><br>单元测试：模块性的测试，即对于一个函数，是否达到了其目的，每个模块的功能是否完善<br>集成测试：即模块间的衔接测试，不衔接的模块就将其组装起来，组装方式有两种：一次性组装(一次全部组装)和增量式组装(组装两个模块时测试一下、组装到三个模块时再测试一下….)<br>确认测试：即对需求进行确认，测试该程序是否满足需求，测试包括：内部确认测试、Alpha测试(即项目在开发环境进行测试)、Beta测试(即用户在自己的本地计算机自行测试)、验收测试<br>系统测试：主要是压力、性能、可靠性的测试，而性能测试包括：负载测试、强度测试(即系统资源缺失的情况下系统能否正常运行)、容量测试，压力测试则是测试同时访问人数的极限</p><h4 id="McCabe复杂度"><a href="#McCabe复杂度" class="headerlink" title="McCabe复杂度"></a>McCabe复杂度</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240005595.png" alt="image.png"></p><h3 id="系统运行与维护"><a href="#系统运行与维护" class="headerlink" title="系统运行与维护"></a>系统运行与维护</h3><h4 id="软件维护的概念"><a href="#软件维护的概念" class="headerlink" title="软件维护的概念"></a>软件维护的概念</h4><p>软件维护即需要提供软件支持的全部活动，这些活动包括在交付前完成的活动，以及在交付后完成的活动，交付前完成的活动包括交付后运行的计划和维护计划等；交付后的活动包括软件修改、培训、帮助资料等<br><strong>可维护性</strong><br>包括可分析性、易分析性(即代码应该容易看懂)、易改变性、易测试性<br><strong>维护类型</strong><br>包括：<br>1.改正性维护：即用户发现bug，然后我就修改bug<br>2.适应性维护：即解决运行平台版本更迭的问题<br>3.完善性维护：指在运行过程中发现了一些不足，进而对系统的性能等方面进行完善和扩充<br>4.预防性维护：对将来可能导致的问题进行预防工作<br>注：系统设计中，人机交互“黄金三原则”包括：置于用户控制之下、减少用户的记忆负担、保持界面的一致性</p><h4 id="软件的质量特性及其子特性"><a href="#软件的质量特性及其子特性" class="headerlink" title="软件的质量特性及其子特性"></a>软件的质量特性及其子特性</h4><p>1.功能性：适合性、准确性、互操作性、依从性、安全性<br>2.可靠性：成熟性、容错性、易恢复性<br>3.易用性：易理解性、易学性、易操作性<br>4.效率：时间特性、资源特性<br>5.可维护性：易分析性、易改变性、稳定性、易测试性<br>6.可移植性：适应性、易安装性、遵循性、易替换性</p><h4 id="软件维护工具"><a href="#软件维护工具" class="headerlink" title="软件维护工具"></a>软件维护工具</h4><p>包括：<br>1.版本控制工具<br>2.文档分析工具<br>3.开发信息库工具<br>4.逆向工程工具<br>5.再工程工具</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;/posts/3e2b8eae.html&quot;&gt;软件设计师知识点整理（一）&lt;/a&gt;&lt;br&gt; 一、计算机网络&lt;br&gt; 二、操作系统基本原理&lt;br&gt; 四、计算机组成原理与体系结构&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#&quot;&gt;软件设计师知识点整理</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://blog.bywind.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="软考" scheme="https://blog.bywind.xyz/tags/%E8%BD%AF%E8%80%83/"/>
    
    <category term="软件设计师" scheme="https://blog.bywind.xyz/tags/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
    
  </entry>
  
  <entry>
    <title>软件设计师知识点整理（一）</title>
    <link href="https://blog.bywind.xyz/posts/3e2b8eae.html"/>
    <id>https://blog.bywind.xyz/posts/3e2b8eae.html</id>
    <published>2023-07-23T15:22:06.000Z</published>
    <updated>2024-07-03T08:40:08.541Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="#">软件设计师知识点整理（一）</a><br> 一、计算机网络<br> 二、操作系统基本原理<br> 四、计算机组成原理与体系结构</p><p><a href="/posts/aebcf5cb.html">软件设计师知识点整理（二）</a><br> 四、编译原理基础<br> 五、软件工程概述<br> 六、计算机软件法律法规</p><p><a href="/posts/e3a25699.html">软件设计师知识点整理（三）</a><br> 七、系统安全设计与分析<br> 八、数据结构与算法基础<br> 九、数据库系统</p></blockquote><h2 id="一、计算机网络"><a href="#一、计算机网络" class="headerlink" title="一、计算机网络"></a>一、计算机网络</h2><h3 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h3><p>OSI 将计算机网络体系结构划分为七层，每一层实现各自的功能和协议，并完成与相邻层的接口通信。OSI 的服务定义详细说明了各层所提供的服务。</p><ol><li>应用层：通过应用程序间的交互来完成特定的网络应用</li><li>表示层：解释交换数据的含义。该层提供的服务主要包括数据压缩，数据加密以及数据描述。</li><li>会话层：负责建立、管理和终止表示层实体之间的通信会话。该层提供了数据交换的定界和同步功能，包括了建立检查点和恢复方案的方法。</li><li>传输层：负责因特网中两台主机的进程提供通信服务。</li><li>网络层：选择合适的网间路由和交换节点，确保数据按时成功传送。</li><li>数据链路层(链路层)：数据链路层将网络层交下来的 IP 数据报组装成帧，在两个相邻节点间的链路上传送帧。</li><li>物理层：实现计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异。该层的主要任务是确定与传输媒体的接口的一些特性（机械特性、电气特性、功能特性，过程特性）</li></ol><h3 id="TCP-x2F-IP-五层参考模型"><a href="#TCP-x2F-IP-五层参考模型" class="headerlink" title="TCP&#x2F;IP 五层参考模型"></a>TCP&#x2F;IP 五层参考模型</h3><ol><li>应用层 ：为特定应用程序提供数据传输服务。</li><li>传输层 ：为进程提供通用数据传输服务。</li><li>网络层 ：为主机提供数据传输服务。而传输层协议是为主机中的进程提供数据传输服务。</li><li>数据链路层 ：网络层针对的还是主机之间的数据传输服务，而主机之间可以有很多链路，链路层协议就是为同一链路的主机提供数据传输服务。</li><li>物理层 ：负责比特流在传输介质上的传播。<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240003697.png" alt="image.png"></li></ol><h3 id="数据在各层传输过程"><a href="#数据在各层传输过程" class="headerlink" title="数据在各层传输过程"></a>数据在各层传输过程</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240003820.png" alt="1675867690-lXXziw-image.png"><br>假设一个主机上的一个应用向另一个主机的一个应用发送数据。</p><ol><li>在发送主机端，一个应用层报文被传送到传输层。在最简单的情况下，传输层收取到报文并附上附加信息，该首部将被接收端的传输层使用。</li><li>应用层报文和传输层首部信息一道构成了传输层报文段。附加的信息可能包括：允许接收端传输层向上向适当的应用程序交付报文的信息以及差错检测位信息。该信息让接收端能够判断报文中的比特是否在途中已被改变。</li><li>传输层则向网络层传递该报文段，网络层增加了如源和目的端系统地址等网络层首部信息，生成了网络层数据报文。</li><li>该数据报文接下来被传递给链路层，在数据链路层数据包添加发送端 MAC 地址和接收端 MAC 地址后被封装成数据帧。</li><li>在物理层数据帧被封装成比特流，之后通过传输介质传送到对端。而在接收主机端，整个过程正好反过来。</li></ol><h3 id="网络技术标准与协议"><a href="#网络技术标准与协议" class="headerlink" title="网络技术标准与协议"></a>网络技术标准与协议</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240003968.png" alt="image.png"><br>(1)<strong>IGMP</strong>：称之为因特网的控制协议<br>(2)<strong>ARP</strong>：是地址解析协议(即IP转MC）<br>(3)<strong>RARP</strong>：是反向地址解析协议(MC转IP）<br>(4)<strong>TCP</strong>：被称为可靠的协议，因其在通信时会建立连接(通过三次握手来建立连接，即A与B三次互发信息)，且在传输信息时有验证机制，以验证数据包是否顺利传输，其上方的FTP，Telnet等协议都是建立在TCP基础上的<br>(5)<strong>UDP</strong>：称为不可靠的协议，因其在建立时不会建立连接，因其在传输数据时，会直接将数据发送给另一方<br>(6)<strong>DHCP</strong>：用来做动态的IP地址的分配工作<br>(7)<strong>TFTP</strong>：是小文件传输协议，<code>文件传输不可靠且不安全</code><br>(8)<strong>SNMP</strong>：是简单网络管理协议<br>(9)<strong>DNS</strong>：是域名解析协议<br>(10)位于中间部分的Samba协议、CIFS协议、NFS协议则是可基于两种基本协议<br>(11)TCP和UDP均提供了端口寻址能力<br>(12)<strong>MIME</strong>：是一个互联网标准，扩展了电子邮箱标准，使其能够支持电子邮箱的使用<br>(13)<strong>PGP</strong>：是一套用于信息加密、验证的应用程序，可用于加密电子邮件内容<br>(14)<strong>Https</strong>：是HTTP的安全版，它是在HTTP的基础上加上了SSL协议，SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密<br>(15)<strong>FTP</strong>：文件传输是<code>可靠但不安全</code>的方式<br>(16)<strong>SFTP</strong>：在FTP基础上，通过SSH对传输文件进行加密，<code>安全文件传输</code><br>(17)<strong>ICMP</strong>：Internet控制报文协议，与文件传输功能无关<br>(18)<strong>SMTP</strong>：邮件传输协议，负责邮件发送，<code>端口：25</code><br>(19)<strong>POP</strong>：邮件协议，用于收邮件，<code>POP3端口：110</code><br>(20)<strong>IMAP</strong>：交互邮件访问协议<br>(21)<strong>RFB</strong>：远程帧缓冲协议，用于远程访问图形用户界面<br>(22)<strong>IGP</strong>：内部网关协议。常见的有OSPF，RIP<br>(23)<strong>EGP</strong>：外部网关协议。BGP：边界网关协议，是建立在EGP的经验之上的</p><h3 id="网络类型与拓扑结构"><a href="#网络类型与拓扑结构" class="headerlink" title="网络类型与拓扑结构"></a>网络类型与拓扑结构</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240003756.png" alt="image.png"></p><h3 id="网络规划与设计"><a href="#网络规划与设计" class="headerlink" title="网络规划与设计"></a>网络规划与设计</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240003936.png" alt="image.png"></p><h4 id="逻辑网络设计"><a href="#逻辑网络设计" class="headerlink" title="逻辑网络设计"></a>逻辑网络设计</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240003670.png" alt="image.png"></p><h4 id="物理网络设计"><a href="#物理网络设计" class="headerlink" title="物理网络设计"></a>物理网络设计</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240003321.png" alt="image.png"></p><h4 id="分层设计"><a href="#分层设计" class="headerlink" title="分层设计"></a>分层设计</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240003153.png" alt="image.png"></p><h3 id="IP地址与子网划分"><a href="#IP地址与子网划分" class="headerlink" title="IP地址与子网划分"></a>IP地址与子网划分</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240003987.png" alt="image.png"></p><h4 id="特殊含义的IP地址"><a href="#特殊含义的IP地址" class="headerlink" title="特殊含义的IP地址"></a>特殊含义的IP地址</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240003955.png" alt="image.png"></p><h3 id="无线网"><a href="#无线网" class="headerlink" title="无线网"></a>无线网</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240003905.png" alt="image.png"><br>图注：无线网可分为无线局域网、无线城域网、无线广域网、无线个人网；覆盖范围：个人&lt;局域&lt;城域&lt;广域;优势:移动性、灵活性、成本低、容易扩充；无线局域网的接入方式有两种:接入点模式、无接入点模式；蓝牙属于无线个人网</p><h3 id="网络接入技术"><a href="#网络接入技术" class="headerlink" title="网络接入技术"></a>网络接入技术</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240003544.png" alt="image.png"><br><strong>PSTN</strong>：在十多年前非常流行，其上网和通话功能不能同时进行，目前基本被淘汰，但pos机和传真依旧在使用；<br><strong>ISDN</strong>：解决了上网和通话不能同时进行的问题，速度达到128KB；<br><strong>ADSL</strong>：是ISDN的发展，目前是主流的有线网络接入方式，速度达到了8MBS；ADSL上网拨号有三种方式，即专线方式(静态IP)、pppoA和pppoE。<br><strong>HFC</strong>：目前广泛用于电视机接入网络；<br><strong>TD—SCDMA</strong>：是国产的技术，只在中国应用，由移动公司主导推广；目前最为广泛应用的技术是WCDMA，而FDD则是其发展版本，<br><strong>TDD</strong>：是LTE—Advanced发展而来，是4G时代智能机的主流接入网络的方式</p><h3 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307240003688.png" alt="image.png"></p><h2 id="二、操作系统基本原理"><a href="#二、操作系统基本原理" class="headerlink" title="二、操作系统基本原理"></a>二、操作系统基本原理</h2><p>ps：在上午考试中一般占到5—7分<br>重点：银行家算法、pv操作、文件管理、存储管理、操作系统的分类及其特点</p><h3 id="操作系统概述"><a href="#操作系统概述" class="headerlink" title="操作系统概述"></a>操作系统概述</h3><p>操作系统与计算机体系结构之间的关系<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232335192.png" alt="image.png"><br>操作系统具备的管理职能</p><ol><li>进程管理：包括(1)进程的状态；(2)前趋图；(3)pv操作；(4)死锁问题。</li><li>存储管理：包括(1)段页式存储；(2)页面置换算法。</li><li>文件管理：包括(1)索引文件；(2)位示图。</li><li>作业管理</li><li>设备管理 包括：数据传输控制方式</li><li>微内核操作系统：包括虚设备与SPOOLING技术</li></ol><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><h4 id="进程的三种基本状态"><a href="#进程的三种基本状态" class="headerlink" title="进程的三种基本状态"></a>进程的三种基本状态</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232335318.png" alt="image.png"><br>图注：<br>等待状态下的程序缺少除cpu资源以外的其他资源，如用户指令或外设支持等资源；<br>就绪状态的程序除了CPU资源以外的所有资源都已经准备就绪；<br>处于就绪状态的程序需要排队获取CPU资源，且即使获取到了CPU资源，他们的运行时间也是有限的，因此，时间片到了以后就会从运行状态退出到就绪状态，而程序在运行时出现了某些资源的缺失则会退出至等待状态.</p><h4 id="进程的五态模型-三态模型的发展"><a href="#进程的五态模型-三态模型的发展" class="headerlink" title="进程的五态模型(三态模型的发展)"></a>进程的五态模型(三态模型的发展)</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232335349.png" alt="image.png"><br>图注：<br>该模型是三态模型的发展，将就绪状态分为了静止就绪和活跃就绪，静止就绪是该进程已经获得了CPU资源，但由于人为需要，由运行状态将其退出至就绪状态，如我们在听歌时突然来了电话，我们暂时将音乐关闭，这种人为的将程序由运行态转至的就绪态，即为静止就绪，再次调动该程序时，该程序就将由静止就绪转至活跃就绪进而被调用；<br>此外，阻塞态即为三态模型中的等待态</p><h4 id="进程控制块的组织方式"><a href="#进程控制块的组织方式" class="headerlink" title="进程控制块的组织方式"></a>进程控制块的组织方式</h4><p>分为索引方式和链接方式</p><ol><li>链接方式：把具有同一状态的进程(PCB)，用其中的链接字链接成一个队列。这样，可以形成就绪队列、若干个阻塞队列和空白队列等。对其中的就绪队列常按进程优先级的高低排列，把优先级高的进程排在队列前面。此外，也可以根据阻塞原因的不同而把处于阻塞状态的进程的PCB排成等待I&#x2F;O操作完成的队列和等待分配内存的队列等</li><li>索引方式：系统根据所有进程的状态建立若干索引表。例如，就绪索引表、阻塞索引表等，并把各索引表在内存的首地址记录在内存的一些专用单元中。在每个索引表的表目中，记录具有相应状态的某个PCB在PCB表中的位置</li></ol><h4 id="前趋图"><a href="#前趋图" class="headerlink" title="前趋图"></a>前趋图</h4><ol><li>概念：前趋图是将一个完整的进程所需的工序按照是否具有先后关系将进程进行再次区分的图象</li><li>示例</li></ol><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232335375.png" alt="image.png"><br>图注：A,B,C三个步骤是平行的，他们之间可以并行，这样可以增大CPU的处理效率。</p><h4 id="进程的同步与互斥"><a href="#进程的同步与互斥" class="headerlink" title="进程的同步与互斥"></a>进程的同步与互斥</h4><p><strong>进程的同步</strong></p><ol><li>概念：运行速度有差异的两个进程同时开始运行，在一定情况下，速度较快的进程会停下来等待速度较慢的进程</li><li>示例：</li></ol><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232335255.png" alt="image.png"></p><p><strong>进程的互斥</strong></p><ol><li>概念：在同一时刻只允许某一个进程使用资源，即同一资源不能服务于多个进程</li><li>示例：</li></ol><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232336635.png" alt="image.png"></p><h4 id="PV操作"><a href="#PV操作" class="headerlink" title="PV操作"></a>PV操作</h4><ol><li>临界资源：诸进程间需要互斥方式对其进行共享的资源，如打印机，磁带机等。</li><li>临界区：每个进程中访问临界资源的那段代码称为临界区。</li><li>信号量：是一种特殊的变量，符号为s，只用于pv操作</li></ol><p>用PV操作控制进程同步与互斥时，应该在进程执行前执行P操作，在进程执行后执行V操作<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232336049.png" alt="image.png"><br>单缓冲区生产者、消费者问题PV原语描述<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232336507.png" alt="image.png"></p><h4 id="pv操作与前趋图"><a href="#pv操作与前趋图" class="headerlink" title="pv操作与前趋图"></a>pv操作与前趋图</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232336901.png" alt="image.png"><br>图注：这种例题通过观察箭头的指向来解题，被指箭头用p操作，指向箭头就用v操作，有几个箭头就用几次。</p><h4 id="死锁问题"><a href="#死锁问题" class="headerlink" title="死锁问题"></a>死锁问题</h4><p>死锁：各进程互相等待对方手里的资源，导致各进程都阻塞，无法向前推进的现象。<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232336069.png" alt="image.png"><br>最少需要(4+4+4)+1&#x3D;13个资源</p><p><strong>发生死锁的四大必要条件</strong></p><ol><li>进程互斥</li><li>保持和等待：在资源总量并未满足完成进程所需资源的总量前提下，每个进程都保持自身占用的资源不变并且一直等待其他进程完成以获取其释放的系统资源</li><li>不剥夺：系统不会把已分配给一个进程的资源剥夺掉分配给其他进程</li><li>环路等待：如总共有三个进程，A等待B，B等待C，C等待A;诸如此类的，等待的进程形成了一个闭合环状</li></ol><p>注：死锁的预防就是通过打破四大条件来进行</p><p><strong>死锁的避免</strong></p><p>有两大方法，分别是：<br>1.有序资源分配法：将系统资源按照顺序分配给进程，一个进程完成后才将资源分配给下一个进程<br>2.银行家算法</p><p><strong>资源分配图</strong></p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232336547.png" alt="image.png"><br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232336929.png" alt="image.png"></p><ul><li>如果系统中剩余的可用资源数足够满足进程的需求，那么这个进程暂时是不会阻塞的，可以顺利地执行下去。</li><li>如果这个进程执行结束了把资源归还系统，就可能使某些正在等待资源的进程被激活，并顺利地执行下去。</li><li>相应的，这些被激活的进程执行完了之后又会归还一些资源．这样可能又会激活另外一些阳塞的讲程.</li></ul><p><strong>银行家算法</strong><br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232336574.png" alt="image.png"></p><h3 id="存储管理"><a href="#存储管理" class="headerlink" title="存储管理"></a>存储管理</h3><h4 id="分区存储组织"><a href="#分区存储组织" class="headerlink" title="分区存储组织"></a>分区存储组织</h4><ul><li>首次适应法：首次适应法会把即将执行的作业安排在第一个能够容纳它的空间</li><li>最佳适应法：该算法优先将作业存放至内存空间较小的地址。空闲区块按大小顺序连接。当前空闲的三个块分别是25,28,10。当他发现10k已经放得下，就分配出去了。该算法会造成内存空间碎片化，降低内存地址的利用率</li><li>最差适应法：该算法优先将作业存放至内存空间最大的地址。该算法能够解决内存空间碎片化的问题</li><li>循环首次适应法：每次为进程分配空间的时候，从<strong>上一次刚分配过的空闲区的下一块</strong>开始寻找</li></ul><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232336788.png" alt="image.png"></p><h4 id="页式存储、段式存储、段页式存储"><a href="#页式存储、段式存储、段页式存储" class="headerlink" title="页式存储、段式存储、段页式存储"></a>页式存储、段式存储、段页式存储</h4><blockquote><p>此部分参考：<a href="https://blog.csdn.net/imreal_/article/details/113965349">https://blog.csdn.net/imreal_&#x2F;article&#x2F;details&#x2F;113965349</a></p></blockquote><h4 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232336528.png" alt="image.png"><br><a href="https://blog.csdn.net/qq_35128300/article/details/109217440">https://blog.csdn.net/qq_35128300&#x2F;article&#x2F;details&#x2F;109217440</a><br>页面的大小为100个字节，则460个字节应占5页，编号为0～4，第0页字节为0～99，第1页为100～199，依此类推。得到页面的访问序列是(0，0，1，1，0，3，1，2，2，4，4，3)，可简化为(0，1，0，3，1，2，4，3)。</p><h4 id="最佳页面置换算法（OPT）"><a href="#最佳页面置换算法（OPT）" class="headerlink" title="最佳页面置换算法（OPT）"></a>最佳页面置换算法（OPT）</h4><p>既然带着最佳，就是最理想的算法<br>一句话：比比当前三个，谁将来最远被用淘汰谁<br>思想：为调入新页面而必须预先淘汰某个老页面时，所选择的老页面应在将来不被使用，或者是<strong>在最远的将来才被访问</strong>。以此保证获得最低的缺页率。<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232336331.png" alt="image.png"><br><strong>优点：</strong>性能最佳，缺页中断率最低。<strong>缺点：</strong>理想化的算法，无法实现。因为它需要预先知道一个进程整个运行过程中页面走向的全部情况。<strong>作用：</strong>模拟实验分析或理论分析其他算法的优劣。</p><h4 id="先进先出法（FIFO）"><a href="#先进先出法（FIFO）" class="headerlink" title="先进先出法（FIFO）"></a>先进先出法（FIFO）</h4><p>很容易理解<br><strong>思想：</strong>为调入新页面而必须预先淘汰某个老页面时，<strong>总是淘汰在内存中停留时间最长的一页</strong>，即先进入内存的页，先被换出<br><strong>实现方法</strong></p><ol><li>计时器。在页面上加计时器记录最早进入的页。</li><li>队列。只需把调入内存的页面根据先后次序链接成队列，设置一个指针总是指向队首的页面。</li></ol><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232336390.png" alt="image.png"><br><strong>优点：</strong>容易理解，实现简单，方便程序设计。<strong>缺点：</strong>性能不好。因为常被访问的页，通常在内存中停留最久。仅当按线性顺序访问地址空间时，才是最理想的，否则效率不高。<strong>作用：</strong>作为基础算法被应用在其他算法中。</p><h4 id="最近最少使用置换法（LRU）"><a href="#最近最少使用置换法（LRU）" class="headerlink" title="最近最少使用置换法（LRU）"></a>最近最少使用置换法（LRU）</h4><p>一句话：看看之前的谁最久没用过，就淘汰谁<br><strong>Least Recently Used。</strong>也称“最近最久未使用置换法”。<strong>思想：</strong>当需要置换一页时，选择在最近一段时间里最久没有使用过的页面予以淘汰。<strong>理由：</strong>认为过去一段时间内未被访问过的页面，在最近的将来可能也不会被访问。<br><strong>实现方法</strong>1、计数器。要求在硬件上有一个64位的计数器C（给CPU增加一个计数器C），每条指令执行完后，C的值自动加1 。在每个页表项中，增加一个“使用时间”字段（时间戳）。每一次内存访问后，C的值就被复制到被访问页面的“使用时间”字段中。系统始终保留着每个页面最后被访问的“时间”，淘汰该时间值最小的页面，即最近最久未被使用的页面。<br>2、栈。<br>用一个栈保留页号，每访问一个页面时，就把它从栈中取出，放入栈顶。要用具有首指针和尾指针的双向链把各个栈单元连起来。<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232336079.png" alt="image.png"><br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232336592.png"><br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232336038.png" alt="image.png"><br>图注：”没有使用快表“即表示每读一次程序的块，需要先在内存上面查表，才能读取相应的内存块，所以每一个块需要两次内存的访问，所以6个块(在页式存储结构中，每一个页面对应一个块)总共会产生12次对内存的访问;一个内存单元占据1b的内存，所有的指令(无论占据了几个页面)都只产生一次缺页中断，而操作数A和操作数B则各自产生两次缺页中断，因此总共产生了5次缺页中断</p><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><h4 id="索引文件结构"><a href="#索引文件结构" class="headerlink" title="索引文件结构"></a>索引文件结构</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232336463.png" alt="image.png"></p><p>图注：索引一般会有13个节点(默认情况下)，从0开始编号，其中索引0到9这十个索引称为直接索引，直接对应物理盘块，每一个物理盘块都对应了索引文件的内容，而索引10则称为间接索引，里面只存储地址，如一个物理盘块的地址大小为4个字节，而一个物理盘块的大小为4k，则4k\4字节等于1024，代表着1024个物理盘块的地址，因此该索引内可以存储的文件大小为4k<em>1024；该10号索引称之为一级间接索引；索引11则是二级间接索引，即索引的内容还是索引，再索引的内容才是物理盘块<br>，二级简介索引存储的文件大小即为：4k</em>1024*1024；虽然分级越多存储的内容越多，但相应的，效率也会更低</p><h4 id="文件和数型结构目录"><a href="#文件和数型结构目录" class="headerlink" title="文件和数型结构目录"></a>文件和数型结构目录</h4><p>树型目录结构的路径<br>1.绝对路径：是从盘符开始的路径<br>2.相对路径：是从当前路径开始的路径<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232336684.png" alt="image.png"></p><p>图注：在该文件树型图中，若文件目录的位置是D1，若要求f2的路径，则绝对路径：&#x2F;D1&#x2F;W2&#x2F;F2；相对路径：W2&#x2F;F2<br>文件属性及文件名的组成<br>1.文件属性：R：只读文件属性 A：存档属性 S：系统文件 H：隐藏文件<br>2.文件名的组成：驱动器号；路径；主文件名；扩展名</p><h4 id="空闲存储空间的管理"><a href="#空闲存储空间的管理" class="headerlink" title="空闲存储空间的管理"></a>空闲存储空间的管理</h4><p>总共有四种管理方法，分别是：空闲区表法；空闲链表法；位示图法；成组链接法<br>空闲区表法<br>1.概念：我们可以用一个表来记录哪些地方是空闲的，以便将其管理起来<br>空闲链表法<br>1.概念：把空闲区域都链起来，链成一条链表，然后需要空间分配的时候，从这条链表中划出一部分出来即可<br>位示图法(重点)<br>常以计算题方式考察<br>1.概念:将所有存储区域分成无数个物理块，然后以1表示被占用，0表示空闲，将所有空间进行标记<br>2.例题：<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232336437.png" alt="image.png"></p><p>图注：4195号是第4196个位，因此4196&#x2F;32&#x3D;131.125；因此物理块的使用情况应该在第132个字中描述<br>成组链接法</p><h3 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h3><h4 id="数据传输控制方式"><a href="#数据传输控制方式" class="headerlink" title="数据传输控制方式"></a>数据传输控制方式</h4><p>主要是指内存和外设之间的数据传输控制问题，解决方式包括：程序控制方式；程序中断方式；DMA方式；通道；输入输出处理机；前三种要求重点掌握<br>程序控制方式<br>1.概念：也称程序查询方式，由这种方式是最为低级的，也是CPU介入最多的一种机制，即整个数据的传输控制很多时候都要CPU的介入，此时外设会处于非常被动的位置，即不会主动的去返回信息，如是否完成等信息，而是由CPU主动发出查询指令，进而对信息进行查询<br>程序中断方式<br>1.概念：大部分与程序控制方式相同，但相较于程序控制方式，由于增加了中断方式，主动性更强，即：如果外设完成了数据的传输等操作，外设会发出中断指令，效率比程序控制方式更高<br>DMA方式<br>1.概念：也称直接存储器存取方式，在该方式中，会有专门的DMA控制器，只要是外设和内存之间的数据交换过程，就由这个控制器进行管控了，CPU只需要在开头的时候做一些介入，如初始化等操作<br>设备管理的五个层次<br>由上到下依次是：用户进程、与设备无关的系统软件、设备驱动程序、中断处理程序、硬件</p><h3 id="虚设备与SPOOLING技术"><a href="#虚设备与SPOOLING技术" class="headerlink" title="虚设备与SPOOLING技术"></a>虚设备与SPOOLING技术</h3><p>SPOOLING技术<br>1.概念：例如：四个人通过远程手段准备使用一台打印机，而这台打印机在同一段时间内只能让一个用户使用，若一个用户正在使用该打印机，另一名用户试图使用该打印机时就会提示该打印机被占用，，事实上这样做使得打印机的技术非常的低，而面对这个问提，采用了SPOOLING技术的打印机会进行如下操作：给打印机创建一个缓存区，每一个用户在打印时都会进入缓存区，而从缓存区到真正打印则需要挨个排队，即打印机在打印时不再排斥其他用户的打印操作，而是将其缓存起来，在将当前操作完成后立即进行第二个操作，这样做不仅使得用户的操作界面变得更为友好，也极大的提高了打印机的打印效率</p><h3 id="微内核操作系统"><a href="#微内核操作系统" class="headerlink" title="微内核操作系统"></a>微内核操作系统</h3><p>即把内核做得更小的操作系统<br>1.概念：把内核做的更小具有许多好处与优势，如提高了可靠性，稳定性，安全性；因为操作系统作为核心的系统软件，如果操作系统出现故障，就会影响整个系统的运行，将内核做的更小就会降低故障的发生率<br>2.单体内核和微内核的区别及各自优缺点如下图所示<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232336168.png" alt="image.png"><br>Linux系统的常用命令<br>attrib：声明<br>modify：修改<br>chmod：修改文件权限<br>change：改变</p><h2 id="三、计算机组成原理与体系结构"><a href="#三、计算机组成原理与体系结构" class="headerlink" title="三、计算机组成原理与体系结构"></a>三、计算机组成原理与体系结构</h2><h3 id="数据的表示"><a href="#数据的表示" class="headerlink" title="数据的表示"></a>数据的表示</h3><h4 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h4><ol><li>R进制转十进制：将每一位数字用R^k表示然后相加，k与该位与小数点的距离有关，小数点左边第一位为0，右边第一位为-1，往左递增，网往右递减，如：二进制数10100.01&#x3D;1<em>2^4+1</em>2^2+1*2^-2</li><li>十进制转R进制：整数位使用短除法，即将十进制数除以R再取余，直至余数为零，然后将余数由下往上按顺序排列，小数位乘以R，每乘一次就取它的整数位（ 整数位为零时就取零)，直至小数位为零，然后将取得的整数位由上往下排列即可。</li></ol><p>例如：94转二进制<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232305811.png" alt="image.png"></p><ol start="3"><li>二进制转八进制及二进制转十六进制：将二进制数以小数点为界向左及向右每三个一组(转八进制),或者每四个一组(转十六进制)，缺的数用零来补充，然后依次转化为相应的进制数然后按顺序排列即可</li></ol><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232305744.png" alt="image.png"></p><h4 id="原码反码补码移码"><a href="#原码反码补码移码" class="headerlink" title="原码反码补码移码"></a>原码反码补码移码</h4><p><strong>原码</strong><br><strong>数值直接转为二进制数，负数的最高位置1。</strong><br>以8位为例：<br>+1的原码为0000 0001，-1的原码为1000 0001.<br>+127的原码为0111 1111，-127的原码为1111 1111.<br>+0的原码为0000 0000，-0的原码为1000 0000.</p><p><strong>反码</strong><br><strong>①正数的反码和原码相同</strong><br><strong>②负数的反码，在原码基础上，符号位不变，其余各位取反</strong><br>以8位为例：<br>-1的反码为1111 1110<br>-127的反码为1000 0000<br>-0的反码为1111 1111</p><p><strong>补码</strong><br><strong>①正数的补码和原码相同</strong><br><strong>②负数的补码，在反码基础上，加一</strong><br>以8位为例：<br>-1的补码为1111 1111<br>-127的补码为：1000 0001<br>+0的补码&#x3D;-0的补码，为0000 0000</p><p><strong>移码</strong><br><strong>移码的符号位与补码相反，数值位与补码相同</strong><br>移码&#x3D;补码+偏移量<br>当机器字长为8，偏移量为127时，移码&#x3D;补码最高位取反。<br>原码和反码的+0和-0是不同的表示，而补码表示上是一致的。<br>-128的补码是1000 0000<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232305851.png" alt="image.png"></p><h4 id="浮点数运算"><a href="#浮点数运算" class="headerlink" title="浮点数运算"></a>浮点数运算</h4><ol><li>浮点数的概念：浮点数即科学计数法，如1000&#x3D;1X10^3; 其中，1为尾数，10为基数，3为指数（阶码）。</li><li>计算机中浮点数的运算：当两个指数不等的浮点数相加时，计算机会把低阶浮点数的指数转化为高阶浮点数的指数，如：1.0X10^3+1.19X10^2,计算机会将1.19X10^2转化为0.119X10^3,然后作和，然后结果格式化(即通过指数的转化保证尾数必须为非零的一位数)如：得到11.3019X10^3以后，要化为1.13019X10^4</li></ol><h3 id="计算机结构"><a href="#计算机结构" class="headerlink" title="计算机结构"></a>计算机结构</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232305976.png" alt="image.png"><br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232305016.png"></p><h3 id="Flynn分类法"><a href="#Flynn分类法" class="headerlink" title="Flynn分类法"></a>Flynn分类法</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232305654.png" alt="image.png"></p><h3 id="CISC与RISC（指令系统）"><a href="#CISC与RISC（指令系统）" class="headerlink" title="CISC与RISC（指令系统）"></a>CISC与RISC（指令系统）</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232306573.png" alt="image.png"></p><h3 id="流水线技术"><a href="#流水线技术" class="headerlink" title="流水线技术"></a>流水线技术</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ol><li>概念：流水线是指在程序执行时多条指令重叠进行操作的一种准并行处理实现技术。各种部件同时处理是针对不同指令而言的，他们可以同时为多条指令的不同部分进行工作，以提高各部分的利用率和指令的平均执行速度</li><li>流程：</li></ol><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232306024.png" alt="image.png"><br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232306917.png" alt="image.png"></p><h4 id="流水线周期及流水线执行时间计算"><a href="#流水线周期及流水线执行时间计算" class="headerlink" title="流水线周期及流水线执行时间计算"></a>流水线周期及流水线执行时间计算</h4><ol><li>流水线周期计算：流水线周期为执行时间最长的一段</li><li>流水线执行时间计算：</li></ol><p>(1)理论公式：1条指令完整执行的时间+(指令条数-1) × 流水线周期；<br>(2)实际公式(实际生产中工厂往往采用该方法，因为该方法效率更高)：(一个完整指令的步骤数+指令条数-1) × 流水线周期；<br>注：计算时优先用理论公式，选项中没有该答案时再采用实际公式</p><h4 id="流水线吞吐率计算"><a href="#流水线吞吐率计算" class="headerlink" title="流水线吞吐率计算"></a>流水线吞吐率计算</h4><ol><li>概念：是指在单位时间内流水线所完成的任务数量或输出的结果数量</li><li>计算公式：TP&#x3D;指令条数&#x2F;流水线执行时间</li><li>流水线最大吞吐率计算公式：$TP_{max}&#x3D; \lim_{n \to \infty} \frac{n}{(k+n-1)\Delta t} &#x3D;\frac{1}{\Delta t}$，其中$\Delta t$是流水线周期</li></ol><h4 id="流水线的加速比"><a href="#流水线的加速比" class="headerlink" title="流水线的加速比"></a>流水线的加速比</h4><ol><li>概念：完成同样一批任务，不使用流水线所用的时间与使用流水线所用的时间之比称为流水线的加速比</li><li>加速比计算公式：不使用流水线的执行时间&#x2F;使用流水线执行时间</li></ol><h4 id="流水线的效率"><a href="#流水线的效率" class="headerlink" title="流水线的效率"></a>流水线的效率</h4><ol><li>概念：指流水线的设备利用率</li><li>计算公式：E&#x3D;n个任务占用的时空区&#x2F;k个流水段的总的时空区&#x3D;$\frac{T_{0}}{k*T_{k}}$；即从图形面积求解面积</li></ol><p>如：<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232306949.png" alt="image.png"><br>T0&#x3D;（1+1+1+3）△t × 4&#x3D;24△t<br>E&#x3D; 24&#x2F;(15×4)&#x3D;0.4<br>注：所有步骤花费时间相等的指令执行的效率最高<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232306005.png" alt="image.png"><br>流水线执行时间：理论公式： 5+（100-1）* 2&#x3D;203<br>实际公式：（3+100-1）* 2&#x3D;204<br>吞吐率：TP&#x3D;100&#x2F;203<br>最大吞吐率：TPmax&#x3D;1&#x2F;2<br>加速比：（2+2+1）* 100&#x2F;203&#x3D;500&#x2F;203</p><h3 id="存储系统"><a href="#存储系统" class="headerlink" title="存储系统"></a>存储系统</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232306052.png" alt="image.png"></p><h4 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h4><ol><li>cache的功能：提高CPU输入输出的速率，突破冯诺依曼瓶颈，即CPU与存储器系统间数据传送带宽限制，在程序执行过程中，Cache与主存的地址映射是由硬件自动完成的。</li><li>与cache相关的计算：如果以h代表对cache的访问命中率，t1表示cache的周期时间，t2表示主存储器周期时间，以读操作为例，使用“cache+主存储器”的系统的平均周期为t3，则：t3&#x3D;h*t1+(1-h)*t2；其中，(1-h)又称为失效率(未命中率)。</li></ol><blockquote><p>注：CPU会在cache中寻找它需要的数据，如果不能找到，CPU就将前往内存中寻找，而chche的访问命中率就是CPU需要的数据在cache中被找到的比例，未能找到的数据CPU将前往内存中进行再次寻找</p></blockquote><ol start="3"><li>内存与cache地址映射的三种方式：cache与内存的地址映像方式有三种，分别是直接映像(cache的区号与内存的区号一一对应)、全相连映像(cache的一个块号可以对应多个内存的块号，内存的一个块号也可以对应cache的多个块号)，组相连映像(即两种方式相结合的方法)</li></ol><blockquote><p>注：这三种映射方式都是计算机硬件自动完成的，不是软件</p></blockquote><ol start="4"><li>替换算法：替换算法的目的是使cache获得尽可能高的命中率，有以下四种：随机替换算法、先进先出算法、近期最少使用算法、优化替换算法</li></ol><blockquote><p>注：现代的计算机cache系统是分为了三个级别的，访问时先从第一层开始访问，直至三个级别的cache都被访问完全时才会访问内存</p></blockquote><ol start="5"><li>虚拟存储器：即cpu在给出需要访问的内存地址时，给出的并不是真正的物理地址，而是物理地址的抽象，虚拟存储器是由主存-辅存两级存储器组成</li></ol><h4 id="主存"><a href="#主存" class="headerlink" title="主存"></a>主存</h4><p><strong>主存的分类</strong></p><ol><li>随机存取存储器：简称RAM，断电后所有数据都将清除，有两类RAM：<strong>静态RAM</strong>(SRAM)和<strong>动态RAM</strong>(DRAM)，SRAM比DRAM速度更快，但价格也更贵。<ol><li>SRAM用来作为高速缓冲存储器(Cache)，DRAM用来作为主存及图形系统的帧缓冲区。</li><li>SRAM将每个位存储在一个双隐态的存储器单元中，DRAM将每个位存储为对一个电容的充电，由于电容非常小，在10~100ms时间内会失去电荷，所以需要周期性地刷新充电以保持信息</li></ol></li><li>只读存储器：简称ROM，断电后仍然能够存储信息</li></ol><p><strong>主存的编址</strong><br>1.概念：主存的编址就是把许多块芯片组成相应的存储器<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232306407.png" alt="image.png"></p><blockquote><p>注：一般表示方式如下图，其中左图一中的8表示它有8个地址空间，4表示每一个地址空间存储了4位的信息，而两个图一则可以拼接为图二，两个图二可以拼接为图三</p></blockquote><p>2.编址相关计算：<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232306193.png" alt="image.png"></p><blockquote><p>图注：其中H表示十六进制，存储单元数量等于大的内存地址减去小的内存地址再加上一；K&#x3D;1024，第一个空即为存储单元数量除以1024<br>解题步骤：<br>C7FFFH-AC000H+1&#x3D;C7FFFH+1-AC000H&#x3D;C8000H-AC000H&#x3D;1C000H<br>1C000H&#x3D;12×16^3+16^4，所以共有（12×16^3+16^4）&#x2F;1024&#x3D;112 K个地址单元<br>总容量112K×16，存储位数为(112K×16)&#x2F;(28×16K)&#x3D;4</p></blockquote><h4 id="磁盘结构与参数"><a href="#磁盘结构与参数" class="headerlink" title="磁盘结构与参数"></a>磁盘结构与参数</h4><p>存取时间&#x3D;寻道时间+等待时间<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232306220.png" alt="image.png"><br>最长时间为（33+3）×10+6&#x3D;366ms<br>对信息存储进行优化分布后，结果为下图<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232306789.png" alt="image.png"><br>读完R1后恰好可以进行读取R1、R2…….，所以最少时间为两圈，66ms</p><h3 id="总线系统"><a href="#总线系统" class="headerlink" title="总线系统"></a>总线系统</h3><p><strong>概念</strong>：总线是连接计算机有关部件的一组信号线，是计算机中用来传送信息代码的公共通道。<br>根据总线所处的位置不同，总线通常被分成三种类型</p><ol><li>内部总线：微机内部的，各个外围芯片与处理器之间的总线，属于芯片级别</li><li>系统总线：系统总线即为各个插线板和系统板之间的总线；包括<ol><li>(1)数据总线：如32位，64位等一次性能够传输的位</li><li>(2)地址总线：假设该计算机的地址总线为32位，那就代表它的地址空间为2^32个字节</li><li>(3)控制总线：发送相应的控制信号的总线</li></ol></li><li>外部总线：即微机和外部设备的总线</li></ol><p>注：总线上的多个部件之间只能分时向总线发送数据，但可以同时从总线接收数据</p><h3 id="系统可靠性分析与设计"><a href="#系统可靠性分析与设计" class="headerlink" title="系统可靠性分析与设计"></a>系统可靠性分析与设计</h3><h4 id="串联系统"><a href="#串联系统" class="headerlink" title="串联系统"></a>串联系统</h4><ol><li>串联系统的结构：只要一个子系统失效，则整个系统都将失效</li></ol><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232306945.png" alt="image.png"></p><ol start="2"><li>串联系统可靠性的计算：即各个串联子系统可靠性相乘，如上图，其中R为可靠性，此外，1-可靠性即为失效率，而总的失效率即为串联各个部件的失效率作和(近似计算)</li></ol><h4 id="并联系统"><a href="#并联系统" class="headerlink" title="并联系统"></a>并联系统</h4><ol><li>并联系统的结构 注：少数子系统的失效将不会影响整个系统</li></ol><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232306825.png" alt="image.png"></p><ol start="2"><li>并联系统可靠性的计算：通过计算失效率来求得可靠性，即各个子系统的失效率相乘，再由1减去它，即可得到系统可靠性</li></ol><h4 id="模冗余系统与混合系统"><a href="#模冗余系统与混合系统" class="headerlink" title="模冗余系统与混合系统"></a>模冗余系统与混合系统</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232306621.png" alt="image.png"><br>图片解释：数据输入n个子系统中，它们各自得出自己的结果，然后汇总到表决器，表决器将遵循少数服从多数的原则，输出大多数子系统得到的那个答案然后进行输出</p><h3 id="差错控制-CRC与海明校验码"><a href="#差错控制-CRC与海明校验码" class="headerlink" title="差错控制-CRC与海明校验码"></a>差错控制-CRC与海明校验码</h3><h4 id="检错与纠错"><a href="#检错与纠错" class="headerlink" title="检错与纠错"></a>检错与纠错</h4><ol><li>检错：将错误检查出来</li><li>纠错：将错误检查出来的同时并进行纠正</li></ol><h4 id="码距及其作用"><a href="#码距及其作用" class="headerlink" title="码距及其作用"></a>码距及其作用</h4><ol><li>码距的概念：指整个编码系统中任意两个码字的最小距离,如A变化X个位得到B，则X就为码距，如：若使用2位长度的二进制编码，若以A&#x3D;11，B&#x3D;00为例，A,B之间的最小码距为2</li><li>码距的作用：增大码距能够起到检错的作用，因为数据在传输的过程中如果链路出现了问题，那么将会使得接收到的二进制数发生变化，若码距过小，则很可能造成信息的混淆，增大码距就使得被改变的二进制数混淆信息的概率极大的降低;若码距再进行增大，则能够起到纠错的作用，因为数据链路出错的概率比较低，只能造成传输中极少二进制数的改变，我们可以根据该传输失真的二进制数中大部分二进制数的构成来进行推断，推断出结果就达到了纠错的目的。</li></ol><blockquote><p>在一个码组内为了检测e个误码，要求最小码距d应满足：d&gt;&#x3D;e+1<br>在一个码组内为了纠正t个误码，要求最小码距d应该满足：d&gt;&#x3D;2t+1</p></blockquote><h4 id="循环校验码CRC"><a href="#循环校验码CRC" class="headerlink" title="循环校验码CRC"></a>循环校验码CRC</h4><p>这是一种可以检错但不能纠错的一种编码</p><ol><li>CRC的概念：在对信息进行编码的时候在其尾部加入一些校验信息，让编码后的数据能够与循环校验码的生成多项式相除余数为零，若不为零则说明传输过程出现了错误，其中，原码加上(增添在右方)校验信息加(做加法)上余数所得的码即为CRC，</li></ol><p>注(1)：生成多项式是一个二进制数，如”X^4+X^3+X+1”,这个生成多项式实际上就是二进制数11011；在相除时，需在原码后方添加一些0，添加的0的个数等于生成多项式的位数减去1，增加的0即为校验信息。<br>注(2)：二进制的除法与算术除法相似，唯一不同的是所得除数在作减法时，减得的值要取绝对值，即0-1&#x3D;1；这样使得整个除法运算中不存在借位。</p><h4 id="海明校验码"><a href="#海明校验码" class="headerlink" title="海明校验码"></a>海明校验码</h4><ol><li>概念：海明码是一种利用奇偶性进行检错和纠错的校验码，是一种插入到信息中的编码，一般为多个码，其插入的位置满足规律：<strong>2^r&gt;&#x3D;x+r+1</strong>；其中，x为信息的二进制数的位数，r为校验码的个数，而插入信息的位置则是2^r-1，2^r-2……2^0;如r&#x3D;3时，校验码就插在1，2，4位置</li><li>海明校验码的作用：将信息转换为海明校验码形式以后，我们就能进行纠错，如信息1011，其海明校验码的正确形式为1010101，若收到了1011101，我们可以将两个数的校验码位的数提取出来，并在对应位置进行异或运算，如该例得到了001，则说明第1位’(左数第一个信息位)出错了,若得到了010，则说明第二个信息位出错了。</li></ol><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202307232307848.png" alt="image.png"></p><blockquote><p>给出一个容易理解的题解：<a href="https://blog.csdn.net/coolskyying/article/details/78963550">https://blog.csdn.net/coolskyying/article/details/78963550</a><br>第三步之后，H1就是二进制末第一位为1的（不包括自身），H2为第二位，H3为第三位</p></blockquote><h4 id="奇偶校验码"><a href="#奇偶校验码" class="headerlink" title="奇偶校验码"></a>奇偶校验码</h4><p>奇偶校验码是在有效信息位前边加上一位校验码，码距为2，可以检测一位错误（或奇数位错误），不能确定出错的位置。<br><strong>奇校验码</strong>：整个校验码（校验位和有效信息位）中“1”的个数为奇数；<br><strong>偶校验码</strong>：整个校验码（校验位和有效信息位）中“1”的个数为偶数；<br>收发端约定采用的是奇校验还是偶校验，然后接收端对接收的数据进行校验。比如，1011是奇校验码，0011是偶校验码。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;#&quot;&gt;软件设计师知识点整理（一）&lt;/a&gt;&lt;br&gt; 一、计算机网络&lt;br&gt; 二、操作系统基本原理&lt;br&gt; 四、计算机组成原理与体系结构&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/posts/aebcf5cb.html&quot;&gt;软件设计师知识点整理</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://blog.bywind.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="软考" scheme="https://blog.bywind.xyz/tags/%E8%BD%AF%E8%80%83/"/>
    
    <category term="软件设计师" scheme="https://blog.bywind.xyz/tags/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题记录（二）</title>
    <link href="https://blog.bywind.xyz/posts/1de04ceb.html"/>
    <id>https://blog.bywind.xyz/posts/1de04ceb.html</id>
    <published>2023-04-07T12:14:28.000Z</published>
    <updated>2023-07-22T15:29:53.592Z</updated>
    
    <content type="html"><![CDATA[<h1 id="栈与队列"><a href="#栈与队列" class="headerlink" title="栈与队列"></a>栈与队列</h1><h2 id="232-用栈实现队列"><a href="#232-用栈实现队列" class="headerlink" title="232. 用栈实现队列"></a>232. 用栈实现队列</h2><p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（<code>push</code>、<code>pop</code>、<code>peek</code>、<code>empty</code>）：</p><p>实现 <code>MyQueue</code> 类：</p><ul><li><code>void push(int x)</code> 将元素 x 推到队列的末尾</li><li><code>int pop()</code> 从队列的开头移除并返回元素</li><li><code>int peek()</code> 返回队列开头的元素</li><li><code>boolean empty()</code> 如果队列为空，返回 <code>true</code> ；否则，返回 <code>false</code></li></ul><p><strong>说明：</strong></p><ul><li>你 <strong>只能</strong> 使用标准的栈操作 —— 也就是只有 <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, 和 <code>is empty</code> 操作是合法的。</li><li>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;MyQueue&quot;, &quot;push&quot;, &quot;push&quot;, &quot;peek&quot;, &quot;pop&quot;, &quot;empty&quot;]</span><br><span class="line">[[], [1], [2], [], [], []]</span><br><span class="line">输出：</span><br><span class="line">[null, null, null, 1, 1, false]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">MyQueue myQueue = new MyQueue();</span><br><span class="line">myQueue.push(1); // queue is: [1]</span><br><span class="line">myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)</span><br><span class="line">myQueue.peek(); // return 1</span><br><span class="line">myQueue.pop(); // return 1, queue is [2]</span><br><span class="line">myQueue.empty(); // return false</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= x &lt;= 9</code></li><li>最多调用 <code>100</code> 次 <code>push</code>、<code>pop</code>、<code>peek</code> 和 <code>empty</code></li><li>假设所有操作都是有效的 （例如，一个空的队列不会调用 <code>pop</code> 或者 <code>peek</code> 操作）</li></ul><p><strong>进阶：</strong></p><ul><li>你能否实现每个操作均摊时间复杂度为 <code>O(1)</code> 的队列？换句话说，执行 <code>n</code> 个操作的总时间复杂度为 <code>O(n)</code> ，即使其中一个操作可能花费较长时间。</li></ul><p><strong>解题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line"></span><br><span class="line">    Stack&lt;Integer&gt; stackIn;</span><br><span class="line">    Stack&lt;Integer&gt; stackOut;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        stackIn = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;(); <span class="comment">// 负责进栈</span></span><br><span class="line">        stackOut = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;(); <span class="comment">// 负责出栈</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将一个元素放入队列的尾部</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        stackIn.push(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从队列首部移除元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        dumpstackIn();</span><br><span class="line">        <span class="keyword">return</span> stackOut.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回队列首部的元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        dumpstackIn();</span><br><span class="line">        <span class="keyword">return</span> stackOut.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断队列是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stackIn.isEmpty() &amp;&amp; stackOut.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果stackOut为空，那么将stackIn中的元素全部放到stackOut中</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dumpstackIn</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!stackOut.isEmpty()) <span class="keyword">return</span>; </span><br><span class="line">        <span class="keyword">while</span> (!stackIn.isEmpty())&#123;</span><br><span class="line">                stackOut.push(stackIn.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyQueue obj = new MyQueue();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.peek();</span></span><br><span class="line"><span class="comment"> * boolean param_4 = obj.empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="225-用队列实现栈"><a href="#225-用队列实现栈" class="headerlink" title="225. 用队列实现栈"></a>225. 用队列实现栈</h2><p>请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（<code>push</code>、<code>top</code>、<code>pop</code> 和 <code>empty</code>）。</p><p>实现 <code>MyStack</code> 类：</p><ul><li><code>void push(int x)</code> 将元素 x 压入栈顶。</li><li><code>int pop()</code> 移除并返回栈顶元素。</li><li><code>int top()</code> 返回栈顶元素。</li><li><code>boolean empty()</code> 如果栈是空的，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li></ul><p><strong>注意：</strong></p><ul><li>你只能使用队列的基本操作 —— 也就是 <code>push to back</code>、<code>peek/pop from front</code>、<code>size</code> 和 <code>is empty</code> 这些操作。</li><li>你所使用的语言也许不支持队列。 你可以使用 list （列表）或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。</li></ul><p><strong>示例：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;MyStack&quot;, &quot;push&quot;, &quot;push&quot;, &quot;top&quot;, &quot;pop&quot;, &quot;empty&quot;]</span><br><span class="line">[[], [1], [2], [], [], []]</span><br><span class="line">输出：</span><br><span class="line">[null, null, null, 2, 2, false]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">MyStack myStack = new MyStack();</span><br><span class="line">myStack.push(1);</span><br><span class="line">myStack.push(2);</span><br><span class="line">myStack.top(); // 返回 2</span><br><span class="line">myStack.pop(); // 返回 2</span><br><span class="line">myStack.empty(); // 返回 False</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= x &lt;= 9</code></li><li>最多调用<code>100</code> 次 <code>push</code>、<code>pop</code>、<code>top</code> 和 <code>empty</code></li><li>每次调用 <code>pop</code> 和 <code>top</code> 都保证栈不为空</li></ul><p><strong>进阶：</strong>你能否仅用一个队列来实现栈。</p><p><strong>解题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line"></span><br><span class="line">    Queue&lt;Integer&gt; queue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span> &#123;</span><br><span class="line">        queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每 offer 一个数（A）进来，都重新排列，把这个数（A）放到队列的队首</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        queue.offer(x);</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line">        <span class="comment">//移动除了 A 的其它数</span></span><br><span class="line">        <span class="keyword">while</span> (size-- &gt; <span class="number">1</span>)</span><br><span class="line">            queue.offer(queue.poll());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue.poll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyStack obj = new MyStack();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.top();</span></span><br><span class="line"><span class="comment"> * boolean param_4 = obj.empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a>20. 有效的括号</h2><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串 <code>s</code> ，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li><li>每个右括号都有一个对应的相同类型的左括号。</li></ol><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;()&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;()[]&#123;&#125;&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;(]&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^4</code></li><li><code>s</code> 仅由括号 <code>&#39;()[]&#123;&#125;&#39;</code> 组成</li></ul><p><strong>解题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Character&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                stack.push(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">                stack.push(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">                stack.push(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stack.isEmpty() || stack.pop() != c) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1047-删除字符串中的所有相邻重复项"><a href="#1047-删除字符串中的所有相邻重复项" class="headerlink" title="1047. 删除字符串中的所有相邻重复项"></a>1047. 删除字符串中的所有相邻重复项</h2><p>给出由小写字母组成的字符串 <code>S</code>，<strong>重复项删除操作</strong>会选择两个相邻且相同的字母，并删除它们。</p><p>在 S 上反复执行重复项删除操作，直到无法继续删除。</p><p>在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。</p><p><strong>示例：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：&quot;abbaca&quot;</span><br><span class="line">输出：&quot;ca&quot;</span><br><span class="line">解释：</span><br><span class="line">例如，在 &quot;abbaca&quot; 中，我们可以删除 &quot;bb&quot; 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 &quot;aaca&quot;，其中又只有 &quot;aa&quot; 可以执行重复项删除操作，所以最后的字符串为 &quot;ca&quot;。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ol><li><code>1 &lt;= S.length &lt;= 20000</code></li><li><code>S</code> 仅由小写英文字母组成。</li></ol><p><strong>解题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">removeDuplicates</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>( stack.isEmpty() || stack.peek() != c )&#123;</span><br><span class="line">                stack.push(c);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            ans = stack.pop() + ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="150-逆波兰表达式求值"><a href="#150-逆波兰表达式求值" class="headerlink" title="150. 逆波兰表达式求值"></a>150. 逆波兰表达式求值</h2><p>给你一个字符串数组 <code>tokens</code> ，表示一个根据 <a href="https://baike.baidu.com/item/%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/128437">逆波兰表示法</a> 表示的算术表达式。</p><p>请你计算该表达式。返回一个表示表达式值的整数。</p><p><strong>注意：</strong></p><ul><li>有效的算符为 <code>&#39;+&#39;</code>、<code>&#39;-&#39;</code>、<code>&#39;*&#39;</code> 和 <code>&#39;/&#39;</code> 。</li><li>每个操作数（运算对象）都可以是一个整数或者另一个表达式。</li><li>两个整数之间的除法总是 <strong>向零截断</strong> 。</li><li>表达式中不含除零运算。</li><li>输入是一个根据逆波兰表示法表示的算术表达式。</li><li>答案及所有中间计算结果可以用 <strong>32 位</strong> 整数表示。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：tokens = [&quot;2&quot;,&quot;1&quot;,&quot;+&quot;,&quot;3&quot;,&quot;*&quot;]</span><br><span class="line">输出：9</span><br><span class="line">解释：该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：tokens = [&quot;4&quot;,&quot;13&quot;,&quot;5&quot;,&quot;/&quot;,&quot;+&quot;]</span><br><span class="line">输出：6</span><br><span class="line">解释：该算式转化为常见的中缀算术表达式为：(4 + (13 / 5)) = 6</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：tokens = [&quot;10&quot;,&quot;6&quot;,&quot;9&quot;,&quot;3&quot;,&quot;+&quot;,&quot;-11&quot;,&quot;*&quot;,&quot;/&quot;,&quot;*&quot;,&quot;17&quot;,&quot;+&quot;,&quot;5&quot;,&quot;+&quot;]</span><br><span class="line">输出：22</span><br><span class="line">解释：该算式转化为常见的中缀算术表达式为：</span><br><span class="line">  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5</span><br><span class="line">= ((10 * (6 / (12 * -11))) + 17) + 5</span><br><span class="line">= ((10 * (6 / -132)) + 17) + 5</span><br><span class="line">= ((10 * 0) + 17) + 5</span><br><span class="line">= (0 + 17) + 5</span><br><span class="line">= 17 + 5</span><br><span class="line">= 22</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= tokens.length &lt;= 10^4</code></li><li><code>tokens[i]</code> 是一个算符（<code>&quot;+&quot;</code>、<code>&quot;-&quot;</code>、<code>&quot;*&quot;</code> 或 <code>&quot;/&quot;</code>），或是在范围 <code>[-200, 200]</code> 内的一个整数</li></ul><p><strong>逆波兰表达式：</strong></p><p>逆波兰表达式是一种后缀表达式，所谓后缀就是指算符写在后面。</p><ul><li>平常使用的算式则是一种中缀表达式，如 <code>( 1 + 2 ) * ( 3 + 4 )</code> 。</li><li>该算式的逆波兰表达式写法为 <code>( ( 1 2 + ) ( 3 4 + ) * )</code> 。</li></ul><p>逆波兰表达式主要有以下两个优点：</p><ul><li>去掉括号后表达式无歧义，上式即便写成 <code>1 2 + 3 4 + *</code> 也可以依据次序计算出正确结果。</li><li>适合用栈操作运算：遇到数字则入栈；遇到算符则取出栈顶两个数字进行计算，并将结果压入栈中</li></ul><p><strong>解题</strong></p><p>拓展：<a href="https://blog.csdn.net/whc18858/article/details/126527664">中缀表达式转后缀表达式</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">evalRPN</span><span class="params">(String[] tokens)</span> &#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String token : tokens) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;+&quot;</span>.equals(token))&#123;</span><br><span class="line">                stack.push(stack.pop() + stack.pop());</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;-&quot;</span>.equals(token))&#123;</span><br><span class="line">                stack.push(- stack.pop() + stack.pop());</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;*&quot;</span>.equals(token))&#123;</span><br><span class="line">                stack.push(stack.pop() * stack.pop());</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;/&quot;</span>.equals(token))&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp1</span> <span class="operator">=</span> stack.pop();    <span class="comment">//后者</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">temp2</span> <span class="operator">=</span> stack.pop();    <span class="comment">//前者</span></span><br><span class="line">                stack.push(temp2 / temp1);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                stack.push(Integer.valueOf(token));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h1><h2 id="77-组合"><a href="#77-组合" class="headerlink" title="77. 组合"></a>77. 组合</h2><p>给定两个整数 <code>n</code> 和 <code>k</code>，返回范围 <code>[1, n]</code> 中所有可能的 <code>k</code> 个数的组合。</p><p>你可以按 <strong>任何顺序</strong> 返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 4, k = 2</span><br><span class="line">输出：</span><br><span class="line">[</span><br><span class="line">  [2,4],</span><br><span class="line">  [3,4],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  [1,3],</span><br><span class="line">  [1,4],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 1, k = 1</span><br><span class="line">输出：[[1]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 20</code></li><li><code>1 &lt;= k &lt;= n</code></li></ul><p><strong>解题</strong></p><p>path.size() ： 已经找的个数<br>k-path.size() ：还需找的个数<br>【x, n】的数组长度起码应该是k-path.size()才有继续搜索的可能， 那么就有 n-x+1 &#x3D; k-path.size()  ， 解方程得 x &#x3D; n+1 - (k-path.size()), 而且这个x是可以作为起点往下搜的 也就是for(i &#x3D; s; i&lt;&#x3D;x; i++) 这里的x是可以取到的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span>  <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        backtracking(n,k,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span> n ,<span class="type">int</span> k,<span class="type">int</span> startIndex)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.size()==k)&#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex;i&lt;=n-(k-path.size())+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            path.add(i);</span><br><span class="line">            backtracking(n,k,i+<span class="number">1</span>);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="216-组合总和-III"><a href="#216-组合总和-III" class="headerlink" title="216. 组合总和 III"></a>216. 组合总和 III</h2><p>找出所有相加之和为 <code>n</code> 的 <code>k</code> 个数的组合，且满足下列条件：</p><ul><li>只使用数字1到9</li><li>每个数字 <strong>最多使用一次</strong></li></ul><p>返回 <em>所有可能的有效组合的列表</em> 。该列表不能包含相同的组合两次，组合可以以任何顺序返回。</p><p><strong>示例 1:</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: k = 3, n = 7</span><br><span class="line">输出: [[1,2,4]]</span><br><span class="line">解释:</span><br><span class="line">1 + 2 + 4 = 7</span><br><span class="line">没有其他符合的组合了。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入: k = 3, n = 9</span><br><span class="line">输出: [[1,2,6], [1,3,5], [2,3,4]]</span><br><span class="line">解释:</span><br><span class="line">1 + 2 + 6 = 9</span><br><span class="line">1 + 3 + 5 = 9</span><br><span class="line">2 + 3 + 4 = 9</span><br><span class="line">没有其他符合的组合了。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: k = 4, n = 1</span><br><span class="line">输出: []</span><br><span class="line">解释: 不存在有效的组合。</span><br><span class="line">在[1,9]范围内使用4个不同的数字，我们可以得到的最小和是1+2+3+4 = 10，因为10 &gt; 1，没有有效的组合。</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>2 &lt;= k &lt;= 9</code></li><li><code>1 &lt;= n &lt;= 60</code></li></ul><p><strong>解题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; path =<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum3</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        backtracking(k,n,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> n,<span class="type">int</span> startIndex,<span class="type">int</span> sum)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sum &gt; n) &#123; <span class="comment">// 剪枝操作</span></span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// 如果path.size() == k 但sum != targetSum 直接返回</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(path.size()==k)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum==n)  list.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex;i&lt;=<span class="number">9</span>-(k-path.size())+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            sum+=i;</span><br><span class="line">            path.add(i);</span><br><span class="line">            backtracking(k,n,i+<span class="number">1</span>,sum);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">            sum-=i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="17-电话号码的字母组合"><a href="#17-电话号码的字母组合" class="headerlink" title="17. 电话号码的字母组合"></a>17. 电话号码的字母组合</h2><p>给定一个仅包含数字 <code>2-9</code> 的字符串，返回所有它能表示的字母组合。答案可以按 <strong>任意顺序</strong> 返回。</p><p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/11/09/200px-telephone-keypad2svg.png"></p><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：digits = &quot;23&quot;</span><br><span class="line">输出：[&quot;ad&quot;,&quot;ae&quot;,&quot;af&quot;,&quot;bd&quot;,&quot;be&quot;,&quot;bf&quot;,&quot;cd&quot;,&quot;ce&quot;,&quot;cf&quot;]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：digits = &quot;&quot;</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：digits = &quot;2&quot;</span><br><span class="line">输出：[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= digits.length &lt;= 4</code></li><li><code>digits[i]</code> 是范围 <code>[&#39;2&#39;, &#39;9&#39;]</code> 的一个数字。</li></ul><p><strong>解题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    String[] strings =&#123;<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;def&quot;</span>,<span class="string">&quot;ghi&quot;</span>,<span class="string">&quot;jkl&quot;</span>,<span class="string">&quot;mno&quot;</span>,<span class="string">&quot;pqrs&quot;</span>,<span class="string">&quot;tuv&quot;</span>,<span class="string">&quot;wxyz&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">letterCombinations</span><span class="params">(String digits)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(digits==<span class="literal">null</span>||digits.length()==<span class="number">0</span>) <span class="keyword">return</span> list;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">backtracking(sb, digits);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(StringBuffer sb,String digits)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(sb.length()==digits.length()) &#123;</span><br><span class="line">list.add(sb.toString());</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> digits.charAt(sb.length())-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">String curString= strings[current];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">char</span> i :curString.toCharArray()) &#123;</span><br><span class="line">sb.append(i);</span><br><span class="line">backtracking(sb, digits);</span><br><span class="line">sb.deleteCharAt(sb.length()-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="39-组合总和"><a href="#39-组合总和" class="headerlink" title="39. 组合总和"></a>39. 组合总和</h2><p>给你一个 <strong>无重复元素</strong> 的整数数组 <code>candidates</code> 和一个目标整数 <code>target</code> ，找出 <code>candidates</code> 中可以使数字和为目标数 <code>target</code> 的 所有 <strong>不同组合</strong> ，并以列表形式返回。你可以按 <strong>任意顺序</strong> 返回这些组合。</p><p><code>candidates</code> 中的 <strong>同一个</strong> 数字可以 <strong>无限制重复被选取</strong> 。如果至少一个数字的被选数量不同，则两种组合是不同的。</p><p>对于给定的输入，保证和为 <code>target</code> 的不同组合数少于 <code>150</code> 个。</p><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：candidates = [2,3,6,7], target = 7</span><br><span class="line">输出：[[2,2,3],[7]]</span><br><span class="line">解释：</span><br><span class="line">2 和 3 可以形成一组候选，2 + 2 + 3 = 7 。注意 2 可以使用多次。</span><br><span class="line">7 也是一个候选， 7 = 7 。</span><br><span class="line">仅有这两种组合。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: candidates = [2,3,5], target = 8</span><br><span class="line">输出: [[2,2,2,2],[2,3,3],[3,5]]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: candidates = [2], target = 1</span><br><span class="line">输出: []</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= candidates.length &lt;= 30</code></li><li><code>2 &lt;= candidates[i] &lt;= 40</code></li><li><code>candidates</code> 的所有元素 <strong>互不相同</strong></li><li><code>1 &lt;= target &lt;= 40</code></li></ul><p><strong>解题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">backtracking(target, candidates, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span> target,<span class="type">int</span>[] candidates,<span class="type">int</span> start)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(target&lt;<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(target==<span class="number">0</span>) &#123;</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start;i&lt;candidates.length;i++) &#123;</span><br><span class="line">        path.add(candidates[i]);</span><br><span class="line">        backtracking(target-candidates[i], candidates, i);</span><br><span class="line">        path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="40-组合总和-II"><a href="#40-组合总和-II" class="headerlink" title="40. 组合总和 II"></a>40. 组合总和 II</h2><p>给定一个候选人编号的集合 <code>candidates</code> 和一个目标数 <code>target</code> ，找出 <code>candidates</code> 中所有可以使数字和为 <code>target</code> 的组合。</p><p><code>candidates</code> 中的每个数字在每个组合中只能使用 <strong>一次</strong> 。</p><p><strong>注意：</strong>解集不能包含重复的组合。</p><p><strong>示例 1:</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入: candidates = [10,1,2,7,6,1,5], target = 8,</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">[1,1,6],</span><br><span class="line">[1,2,5],</span><br><span class="line">[1,7],</span><br><span class="line">[2,6]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: candidates = [2,5,2,1,2], target = 5,</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">[1,2,2],</span><br><span class="line">[5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>1 &lt;= candidates.length &lt;= 100</code></li><li><code>1 &lt;= candidates[i] &lt;= 50</code></li><li><code>1 &lt;= target &lt;= 30</code></li></ul><p><strong>解题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span>[] used =<span class="keyword">new</span> <span class="title class_">boolean</span>[candidates.length];</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        backtracking(<span class="number">0</span>,target,candidates,<span class="number">0</span>,used);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span> sum,<span class="type">int</span> target,<span class="type">int</span>[] candidates,<span class="type">int</span> start,<span class="type">boolean</span>[] used)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum&gt;target) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(sum==target)&#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span>start;i&lt;candidates.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>] &amp;&amp; used[i - <span class="number">1</span>] == <span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            path.add(candidates[i]);</span><br><span class="line">            used[i]=<span class="literal">true</span>;</span><br><span class="line">            backtracking(sum+candidates[i],target,candidates,i+<span class="number">1</span>,used);</span><br><span class="line">            used[i]=<span class="literal">false</span>;</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="131-分割回文串"><a href="#131-分割回文串" class="headerlink" title="131. 分割回文串"></a>131. 分割回文串</h2><p>给你一个字符串 <code>s</code>，请你将 <code>s</code> 分割成一些子串，使每个子串都是 <strong>回文串</strong> 。返回 <code>s</code> 所有可能的分割方案。</p><p><strong>回文串</strong> 是正着读和反着读都一样的字符串。</p><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;aab&quot;</span><br><span class="line">输出：[[&quot;a&quot;,&quot;a&quot;,&quot;b&quot;],[&quot;aa&quot;,&quot;b&quot;]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;a&quot;</span><br><span class="line">输出：[[&quot;a&quot;]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 16</code></li><li><code>s</code> 仅由小写英文字母组成</li></ul><p><strong>解题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;List&lt;String&gt;&gt; lists = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;String&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">partition</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        backTracking(s,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> lists;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backTracking</span><span class="params">(String s, <span class="type">int</span> startIndex)</span> &#123;</span><br><span class="line">        <span class="comment">//如果起始位置大于s的大小，说明找到了一组分割方案</span></span><br><span class="line">        <span class="keyword">if</span> (startIndex &gt;= s.length()) &#123;</span><br><span class="line">            lists.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="comment">//如果是回文子串，则记录</span></span><br><span class="line">            <span class="keyword">if</span> (isPalindrome(s, startIndex, i)) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> s.substring(startIndex, i + <span class="number">1</span>);</span><br><span class="line">                path.add(str);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//起始位置后移，保证不重复</span></span><br><span class="line">            backTracking(s, i + <span class="number">1</span>);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否是回文串</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(String s, <span class="type">int</span> startIndex, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex, j = end; i &lt; j; i++, j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) != s.charAt(j)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="93-复原-IP-地址"><a href="#93-复原-IP-地址" class="headerlink" title="93. 复原 IP 地址"></a>93. 复原 IP 地址</h2><p><strong>有效 IP 地址</strong> 正好由四个整数（每个整数位于 <code>0</code> 到 <code>255</code> 之间组成，且不能含有前导 <code>0</code>），整数之间用 <code>&#39;.&#39;</code> 分隔。</p><ul><li>例如：<code>&quot;0.1.2.201&quot;</code> 和 <code>&quot;192.168.1.1&quot;</code> 是 <strong>有效</strong> IP 地址，但是 <code>&quot;0.011.255.245&quot;</code>、<code>&quot;192.168.1.312&quot;</code> 和 <code>&quot;192.168@1.1&quot;</code> 是 <strong>无效</strong> IP 地址。</li></ul><p>给定一个只包含数字的字符串 <code>s</code> ，用以表示一个 IP 地址，返回所有可能的<strong>有效 IP 地址</strong>，这些地址可以通过在 <code>s</code> 中插入 <code>&#39;.&#39;</code> 来形成。你 <strong>不能</strong> 重新排序或删除 <code>s</code> 中的任何数字。你可以按 <strong>任何</strong> 顺序返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;25525511135&quot;</span><br><span class="line">输出：[&quot;255.255.11.135&quot;,&quot;255.255.111.35&quot;]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;0000&quot;</span><br><span class="line">输出：[&quot;0.0.0.0&quot;]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;101023&quot;</span><br><span class="line">输出：[&quot;1.0.10.23&quot;,&quot;1.0.102.3&quot;,&quot;10.1.0.23&quot;,&quot;10.10.2.3&quot;,&quot;101.0.2.3&quot;]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 20</code></li><li><code>s</code> 仅由数字组成</li></ul><p><strong>解题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">restoreIpAddresses</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        backTracking(<span class="number">0</span>,s,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backTracking</span><span class="params">(<span class="type">int</span> start,String s,<span class="type">int</span> point)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(point==<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (isValid(s,start,s.length()-<span class="number">1</span>)) &#123;</span><br><span class="line">                list.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;s.length();i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (isValid(s, start, i)) &#123;</span><br><span class="line">                s = s.substring(<span class="number">0</span>, i + <span class="number">1</span>) + <span class="string">&quot;.&quot;</span> + s.substring(i + <span class="number">1</span>);</span><br><span class="line">                point++;</span><br><span class="line">                backTracking(i + <span class="number">2</span>,s,point);</span><br><span class="line">                point--;</span><br><span class="line">                s = s.substring(<span class="number">0</span>, i + <span class="number">1</span>) + s.substring(i + <span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> Boolean <span class="title function_">isValid</span><span class="params">(String s, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (start &gt; end) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(start) == <span class="string">&#x27;0&#x27;</span> &amp;&amp; start != end) &#123; <span class="comment">// 0开头的数字不合法</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= end; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) &gt; <span class="string">&#x27;9&#x27;</span> || s.charAt(i) &lt; <span class="string">&#x27;0&#x27;</span>) &#123; <span class="comment">// 遇到⾮数字字符不合法</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            num = num * <span class="number">10</span> + (s.charAt(i) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (num &gt; <span class="number">255</span>) &#123; <span class="comment">// 如果⼤于255了不合法</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="78-子集"><a href="#78-子集" class="headerlink" title="78. 子集"></a>78. 子集</h2><p>给你一个整数数组 <code>nums</code> ，数组中的元素 <strong>互不相同</strong> 。返回该数组所有可能的子集（幂集）。</p><p>解集 <strong>不能</strong> 包含重复的子集。你可以按 <strong>任意顺序</strong> 返回解集。</p><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3]</span><br><span class="line">输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0]</span><br><span class="line">输出：[[],[0]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10</code></li><li><code>-10 &lt;= nums[i] &lt;= 10</code></li><li><code>nums</code> 中的所有元素 <strong>互不相同</strong></li></ul><p><strong>解题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; list =<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsets</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        backtracking(nums,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> start)</span>&#123;</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line">        <span class="keyword">if</span>(start&gt;=nums.length)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;nums.length;i++)&#123;</span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            backtracking(nums,i+<span class="number">1</span>);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="90-子集-II"><a href="#90-子集-II" class="headerlink" title="90. 子集 II"></a>90. 子集 II</h2><p>给你一个整数数组 <code>nums</code> ，其中可能包含重复元素，请你返回该数组所有可能的子集（幂集）。</p><p>解集 <strong>不能</strong> 包含重复的子集。返回的解集中，子集可以按 <strong>任意顺序</strong> 排列。</p><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,2]</span><br><span class="line">输出：[[],[1],[1,2],[1,2,2],[2],[2,2]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0]</span><br><span class="line">输出：[[],[0]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10</code></li><li><code>-10 &lt;= nums[i] &lt;= 10</code></li></ul><p><strong>解题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; list =<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsetsWithDup</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> [] used = <span class="keyword">new</span> <span class="title class_">boolean</span>[nums.length];</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        backtracking(nums,<span class="number">0</span>,used);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> start,<span class="type">boolean</span>[] used)</span>&#123;</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line">        <span class="keyword">if</span>(start&gt;=nums.length)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;nums[i]==nums[i-<span class="number">1</span>]&amp;&amp;!used[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            used[i]=<span class="literal">true</span>;</span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            </span><br><span class="line">            backtracking(nums,i+<span class="number">1</span>,used);</span><br><span class="line">            used[i]=<span class="literal">false</span>;</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="491-递增子序列"><a href="#491-递增子序列" class="headerlink" title="491. 递增子序列"></a>491. 递增子序列</h2><p>给你一个整数数组 <code>nums</code> ，找出并返回所有该数组中不同的递增子序列，递增子序列中 <strong>至少有两个元素</strong> 。你可以按 <strong>任意顺序</strong> 返回答案。</p><p>数组中可能含有重复元素，如出现两个整数相等，也可以视作递增序列的一种特殊情况。</p><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [4,6,7,7]</span><br><span class="line">输出：[[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [4,4,3,2,1]</span><br><span class="line">输出：[[4,4]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 15</code></li><li><code>-100 &lt;= nums[i] &lt;= 100</code></li></ul><p><strong>解题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; list =<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">findSubsequences</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        backtracking(nums,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> start)</span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(path.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] used=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">201</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!path.isEmpty()&amp;&amp;nums[i]&lt;path.get(path.size()-<span class="number">1</span>)||used[nums[i] + <span class="number">100</span>] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            used[nums[i]+<span class="number">100</span>]=<span class="number">1</span>;</span><br><span class="line">            path.add(nums[i]);       </span><br><span class="line">            backtracking(nums,i+<span class="number">1</span>);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="46-全排列"><a href="#46-全排列" class="headerlink" title="46. 全排列"></a>46. 全排列</h2><p>给定一个不含重复数字的数组 <code>nums</code> ，返回其 <em>所有可能的全排列</em> 。你可以 <strong>按任意顺序</strong> 返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3]</span><br><span class="line">输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,1]</span><br><span class="line">输出：[[0,1],[1,0]]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1]</span><br><span class="line">输出：[[1]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 6</code></li><li><code>-10 &lt;= nums[i] &lt;= 10</code></li><li><code>nums</code> 中的所有整数 <strong>互不相同</strong></li></ul><p><strong>解题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permute</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span>[] used = <span class="keyword">new</span> <span class="title class_">boolean</span>[nums.length];</span><br><span class="line">        backtracking(nums,used);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">boolean</span>[] used)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.size()==nums.length)&#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(used[i]) <span class="keyword">continue</span>;</span><br><span class="line">            used[i]=<span class="literal">true</span>;</span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            backtracking(nums,used);</span><br><span class="line">            used[i]=<span class="literal">false</span>;</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="47-全排列-II"><a href="#47-全排列-II" class="headerlink" title="47. 全排列 II"></a>47. 全排列 II</h2><p>给定一个可包含重复数字的序列 <code>nums</code> ，<em><strong>按任意顺序</strong></em> 返回所有不重复的全排列。</p><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,1,2]</span><br><span class="line">输出：</span><br><span class="line">[[1,1,2],</span><br><span class="line"> [1,2,1],</span><br><span class="line"> [2,1,1]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3]</span><br><span class="line">输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 8</code></li><li><code>-10 &lt;= nums[i] &lt;= 10</code></li></ul><p><strong>解题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; path =<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permuteUnique</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span>[] used=<span class="keyword">new</span> <span class="title class_">boolean</span>[nums.length];</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        backtracking(nums,used);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">boolean</span>[] used)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.size()==nums.length)&#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;nums[i]==nums[i-<span class="number">1</span>]&amp;&amp;!used[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(used[i]==<span class="literal">true</span>) <span class="keyword">continue</span>;</span><br><span class="line">            used[i]=<span class="literal">true</span>;</span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            backtracking(nums,used);</span><br><span class="line">            used[i]=<span class="literal">false</span>;</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="51-N-皇后"><a href="#51-N-皇后" class="headerlink" title="51. N 皇后"></a>51. N 皇后</h2><p>按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。</p><p><strong>n 皇后问题</strong> 研究的是如何将 <code>n</code> 个皇后放置在 <code>n×n</code> 的棋盘上，并且使皇后彼此之间不能相互攻击。</p><p>给你一个整数 <code>n</code> ，返回所有不同的 <strong>n 皇后问题</strong> 的解决方案。</p><p>每一种解法包含一个不同的 <strong>n 皇后问题</strong> 的棋子放置方案，该方案中 <code>&#39;Q&#39;</code> 和 <code>&#39;.&#39;</code> 分别代表了皇后和空位。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/13/queens.jpg"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 4</span><br><span class="line">输出：[[&quot;.Q..&quot;,&quot;...Q&quot;,&quot;Q...&quot;,&quot;..Q.&quot;],[&quot;..Q.&quot;,&quot;Q...&quot;,&quot;...Q&quot;,&quot;.Q..&quot;]]</span><br><span class="line">解释：如上图所示，4 皇后问题存在两个不同的解法。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 1</span><br><span class="line">输出：[[&quot;Q&quot;]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 9</code></li></ul><p><strong>解题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;List&lt;String&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">solveNQueens</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[][] chess = <span class="keyword">new</span> <span class="title class_">char</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span>[] c : chess) &#123;</span><br><span class="line">            Arrays.fill(c, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        backtracking(n,chess,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span> n,<span class="type">char</span>[][] chess,<span class="type">int</span> row)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(row==n)&#123;</span><br><span class="line">            list.add(Array2List(chess));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isValid(row,i,n,chess))&#123;</span><br><span class="line">                chess[row][i]=<span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">                backtracking(n,chess,row+<span class="number">1</span>);</span><br><span class="line">                chess[row][i]=<span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(<span class="type">int</span> row,<span class="type">int</span> col,<span class="type">int</span> n,<span class="type">char</span>[][] chess)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(chess[row][i]==<span class="string">&#x27;Q&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(chess[i][col]==<span class="string">&#x27;Q&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 检查45度对角线</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=row-<span class="number">1</span>, j=col-<span class="number">1</span>; i&gt;=<span class="number">0</span> &amp;&amp; j&gt;=<span class="number">0</span>; i--, j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (chess[i][j] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查135度对角线</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=row-<span class="number">1</span>, j=col+<span class="number">1</span>; i&gt;=<span class="number">0</span> &amp;&amp; j&lt;=n-<span class="number">1</span>; i--, j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (chess[i][j] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> List <span class="title function_">Array2List</span><span class="params">(<span class="type">char</span>[][] chessboard)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span>[] c : chessboard) &#123;</span><br><span class="line">            list.add(String.copyValueOf(c));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="37-解数独"><a href="#37-解数独" class="headerlink" title="37. 解数独"></a>37. 解数独</h2><p>编写一个程序，通过填充空格来解决数独问题。</p><p>数独的解法需 <strong>遵循如下规则</strong>：</p><ol><li>数字 <code>1-9</code> 在每一行只能出现一次。</li><li>数字 <code>1-9</code> 在每一列只能出现一次。</li><li>数字 <code>1-9</code> 在每一个以粗实线分隔的 <code>3x3</code> 宫内只能出现一次。（请参考示例图）</li></ol><p>数独部分空格内已填入了数字，空白格用 <code>&#39;.&#39;</code> 表示。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/04/12/250px-sudoku-by-l2g-20050714svg.png"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：board = [[&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],[&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],[&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],[&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],[&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]</span><br><span class="line">输出：[[&quot;5&quot;,&quot;3&quot;,&quot;4&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;,&quot;9&quot;,&quot;1&quot;,&quot;2&quot;],[&quot;6&quot;,&quot;7&quot;,&quot;2&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;3&quot;,&quot;4&quot;,&quot;8&quot;],[&quot;1&quot;,&quot;9&quot;,&quot;8&quot;,&quot;3&quot;,&quot;4&quot;,&quot;2&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;],[&quot;8&quot;,&quot;5&quot;,&quot;9&quot;,&quot;7&quot;,&quot;6&quot;,&quot;1&quot;,&quot;4&quot;,&quot;2&quot;,&quot;3&quot;],[&quot;4&quot;,&quot;2&quot;,&quot;6&quot;,&quot;8&quot;,&quot;5&quot;,&quot;3&quot;,&quot;7&quot;,&quot;9&quot;,&quot;1&quot;],[&quot;7&quot;,&quot;1&quot;,&quot;3&quot;,&quot;9&quot;,&quot;2&quot;,&quot;4&quot;,&quot;8&quot;,&quot;5&quot;,&quot;6&quot;],[&quot;9&quot;,&quot;6&quot;,&quot;1&quot;,&quot;5&quot;,&quot;3&quot;,&quot;7&quot;,&quot;2&quot;,&quot;8&quot;,&quot;4&quot;],[&quot;2&quot;,&quot;8&quot;,&quot;7&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;6&quot;,&quot;3&quot;,&quot;5&quot;],[&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;2&quot;,&quot;8&quot;,&quot;6&quot;,&quot;1&quot;,&quot;7&quot;,&quot;9&quot;]]</span><br><span class="line">解释：输入的数独如上图所示，唯一有效的解决方案如下所示：</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>board.length == 9</code></li><li><code>board[i].length == 9</code></li><li><code>board[i][j]</code> 是一位数字或者 <code>&#39;.&#39;</code></li><li>题目数据 <strong>保证</strong> 输入数独仅有一个解</li></ul><p><strong>解题</strong></p><p>代码有点长，我主要是将3×3内及本行本列存在的元素收集去进行过滤，空间复杂度较大，但是容易理解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">solveSudoku</span><span class="params">(<span class="type">char</span>[][] board)</span> &#123;</span><br><span class="line">        backtracking(board);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">char</span>[][] board)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;board.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span><span class="number">0</span>;j&lt;board[<span class="number">0</span>].length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j]!=<span class="string">&#x27;.&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span>[] num = collectNumber(board,i,j);</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">char</span> k=<span class="string">&#x27;1&#x27;</span>;k&lt;=<span class="string">&#x27;9&#x27;</span>;k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(num[k-<span class="string">&#x27;0&#x27;</span>]!=<span class="number">1</span>)&#123;</span><br><span class="line">                        board[i][j]=k;</span><br><span class="line">                        <span class="keyword">if</span>(backtracking(board)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                        board[i][j]=<span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] collectNumber(<span class="type">char</span>[][] board,<span class="type">int</span> row,<span class="type">int</span> col)&#123;</span><br><span class="line">        <span class="type">int</span>[] num =<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=row;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">            <span class="type">char</span> n= board[i][col];</span><br><span class="line">            <span class="keyword">if</span>(n&gt;<span class="string">&#x27;0&#x27;</span>&amp;&amp;n&lt;=<span class="string">&#x27;9&#x27;</span>) num[n-<span class="string">&#x27;0&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=col;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">            <span class="type">char</span> n= board[row][i];</span><br><span class="line">            <span class="keyword">if</span>(n&gt;<span class="string">&#x27;0&#x27;</span>&amp;&amp;n&lt;=<span class="string">&#x27;9&#x27;</span>) num[n-<span class="string">&#x27;0&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> x=row;</span><br><span class="line">        <span class="type">int</span> y=col;</span><br><span class="line">        <span class="keyword">while</span>(--row&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">char</span> n= board[row][y];</span><br><span class="line">            <span class="keyword">if</span>(n&gt;<span class="string">&#x27;0&#x27;</span>&amp;&amp;n&lt;=<span class="string">&#x27;9&#x27;</span>) num[n-<span class="string">&#x27;0&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(--col&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">char</span> n= board[x][col];</span><br><span class="line">            <span class="keyword">if</span>(n&gt;<span class="string">&#x27;0&#x27;</span>&amp;&amp;n&lt;=<span class="string">&#x27;9&#x27;</span>) num[n-<span class="string">&#x27;0&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 9宫格里是否重复</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">startRow</span> <span class="operator">=</span> (x / <span class="number">3</span>) * <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">startCol</span> <span class="operator">=</span> (y / <span class="number">3</span>) * <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startRow; i &lt; startRow + <span class="number">3</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> startCol; j &lt; startCol + <span class="number">3</span>; j++)&#123;</span><br><span class="line">                <span class="type">char</span> n= board[i][j];</span><br><span class="line">                <span class="keyword">if</span>(n&gt;<span class="string">&#x27;0&#x27;</span>&amp;&amp;n&lt;=<span class="string">&#x27;9&#x27;</span>) num[n-<span class="string">&#x27;0&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;栈与队列&quot;&gt;&lt;a href=&quot;#栈与队列&quot; class=&quot;headerlink&quot; title=&quot;栈与队列&quot;&gt;&lt;/a&gt;栈与队列&lt;/h1&gt;&lt;h2 id=&quot;232-用栈实现队列&quot;&gt;&lt;a href=&quot;#232-用栈实现队列&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://blog.bywind.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="LeetCode" scheme="https://blog.bywind.xyz/tags/LeetCode/"/>
    
    <category term="算法" scheme="https://blog.bywind.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题记录（一）</title>
    <link href="https://blog.bywind.xyz/posts/ba8c707b.html"/>
    <id>https://blog.bywind.xyz/posts/ba8c707b.html</id>
    <published>2023-02-22T09:29:14.000Z</published>
    <updated>2023-07-20T14:16:31.423Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol><li>KMP最长公共前后缀：主要用于字符串匹配</li></ol><ul><li>例题：<a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/">28. 找出字符串中第一个匹配项的下标</a>、<a href="https://leetcode.cn/problems/repeated-substring-pattern/">459. 重复的子字符串</a></li><li>讲解：<ul><li><a href="https://www.bilibili.com/video/BV1PD4y1o7nd/">帮你把KMP算法学个通透！B站（理论篇）</a></li><li><a href="https://www.bilibili.com/video/BV1M5411j7Xx">帮你把KMP算法学个通透！（求next数组代码篇）</a></li></ul></li></ul></blockquote><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="35-搜索插入位置"><a href="#35-搜索插入位置" class="headerlink" title="35.搜索插入位置"></a>35.搜索插入位置</h2><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>请必须使用时间复杂度为 <code>O(log n)</code> 的算法。</p><p><strong>示例 1:</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [1,3,5,6], target = 5</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [1,3,5,6], target = 2</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [1,3,5,6], target = 7</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^4</code></li><li><code>-10^4 &lt;= nums[i] &lt;= 10^4</code></li><li><code>nums</code> 为 <strong>无重复元素</strong> 的 <strong>升序</strong> 排列数组</li><li><code>-10^4 &lt;= target &lt;= 10^4</code></li></ul><p><strong>题解</strong></p><p>类似于<code>二分查找</code>，分三种情况：1.target在数组两侧。2.target是数组中某一元素。3.target在数组中插入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left)/<span class="number">2</span>;<span class="comment">//防止溢出</span></span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &gt; target)&#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(log n)</li><li>空间复杂度：O(1)</li></ul><h2 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34.在排序数组中查找元素的第一个和最后一个位置"></a>34.在排序数组中查找元素的第一个和最后一个位置</h2><p>给你一个按照非递减顺序排列的整数数组 <code>nums</code>，和一个目标值 <code>target</code>。请你找出给定目标值在数组中的开始位置和结束位置。</p><p>如果数组中不存在目标值 <code>target</code>，返回 <code>[-1, -1]</code>。</p><p>你必须设计并实现时间复杂度为 <code>O(log n)</code> 的算法解决此问题。</p><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [5,7,7,8,8,10], target = 8</span><br><span class="line">输出：[3,4]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [5,7,7,8,8,10], target = 6</span><br><span class="line">输出：[-1,-1]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [], target = 0</span><br><span class="line">输出：[-1,-1]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= nums.length &lt;= 10^5</code></li><li><code>-10^9 &lt;= nums[i] &lt;= 10^9</code></li><li><code>nums</code> 是一个非递减数组</li><li><code>-10^9 &lt;= target &lt;= 10^9</code></li></ul><p><strong>题解</strong></p><p>二分查找，当nums[mid] &#x3D;&#x3D; target继续寻找他的左或右边界。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] searchRange(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">        ans[<span class="number">0</span>] = binarySearch(nums, target, <span class="literal">true</span>);</span><br><span class="line">        ans[<span class="number">1</span>] = binarySearch(nums, target, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target, <span class="type">boolean</span> leftOrRight)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length -<span class="number">1</span>, mid;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(target &lt; nums[mid])</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target &gt; nums[mid])</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                ans = mid;</span><br><span class="line">                <span class="comment">//处理target == nums[mid]</span></span><br><span class="line">                <span class="keyword">if</span>(leftOrRight)</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="69-x-的平方根"><a href="#69-x-的平方根" class="headerlink" title="69.x 的平方根"></a>69.x 的平方根</h2><p>给你一个非负整数 <code>x</code> ，计算并返回 <code>x</code> 的 <strong>算术平方根</strong> 。</p><p>由于返回类型是整数，结果只保留 <strong>整数部分</strong> ，小数部分将被 <strong>舍去 。</strong></p><p><strong>注意：</strong>不允许使用任何内置指数函数和算符，例如 <code>pow(x, 0.5)</code> 或者 <code>x ** 0.5</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 4</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 8</span><br><span class="line">输出：2</span><br><span class="line">解释：8 的算术平方根是 2.82842..., 由于返回类型是整数，小数部分将被舍去。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= x &lt;= 2^31 - 1</code></li></ul><p><strong>题解</strong></p><p>ans 满足 $ k^2&lt;&#x3D;x$ 的最大k值即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = x, mid, ans = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>((<span class="type">long</span>) mid * mid &lt;= x)&#123;</span><br><span class="line">                ans = mid;</span><br><span class="line">                left = mid +<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right = mid -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(log⁡n)，即为二分查找需要的次数。</li><li>空间复杂度：O(1)</li></ul><h2 id="367-有效的完全平方数"><a href="#367-有效的完全平方数" class="headerlink" title="367.有效的完全平方数"></a>367.有效的完全平方数</h2><p>给你一个正整数 <code>num</code> 。如果 <code>num</code> 是一个完全平方数，则返回 <code>true</code> ，否则返回 <code>false</code> 。</p><p><strong>完全平方数</strong> 是一个可以写成某个整数的平方的整数。换句话说，它可以写成某个整数和自身的乘积。</p><p>不能使用任何内置的库函数，如  <code>sqrt</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：num = 16</span><br><span class="line">输出：true</span><br><span class="line">解释：返回 true ，因为 4 * 4 = 16 且 4 是一个整数。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：num = 14</span><br><span class="line">输出：false</span><br><span class="line">解释：返回 false ，因为 3.742 * 3.742 = 14 但 3.742 不是一个整数。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= num &lt;= 2^31 - 1</code></li></ul><p><strong>题解</strong></p><h3 id="方法一：二分法"><a href="#方法一：二分法" class="headerlink" title="方法一：二分法"></a>方法一：二分法</h3><p>二分法找到相乘为num的数则返回true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPerfectSquare</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = num, mid;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">long</span> <span class="variable">x</span> <span class="operator">=</span> (<span class="type">long</span>) mid * mid;</span><br><span class="line">            <span class="keyword">if</span>(x &gt; num)&#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x &lt; num)&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(log⁡n)</li><li>空间复杂度：O(1)</li></ul><h3 id="方法二：数学规律"><a href="#方法二：数学规律" class="headerlink" title="方法二：数学规律"></a>方法二：数学规律</h3><p>1 4&#x3D;1+3 9&#x3D;1+3+5 16&#x3D;1+3+5+7以此类推，模仿它可以使用一个while循环，不断减去一个从1开始不断增大的奇数，若最终减成了0，说明是完全平方数，否则，不是。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPerfectSquare</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            num -= num1;</span><br><span class="line">            num1 += <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a>27. 移除元素</h2><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a></strong> 移除所有数值等于 <code>val</code> 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a> 修改输入数组</strong>。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p><strong>说明:</strong></p><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p>请注意，输入数组是以<strong>「引用」</strong>方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝</span><br><span class="line">int len = removeElement(nums, val);</span><br><span class="line"></span><br><span class="line">// 在函数里修改输入数组对于调用者是可见的。</span><br><span class="line">// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,2,3], val = 3</span><br><span class="line">输出：2, nums = [2,2]</span><br><span class="line">解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,1,2,2,3,0,4,2], val = 2</span><br><span class="line">输出：5, nums = [0,1,4,0,3]</span><br><span class="line">解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= nums.length &lt;= 100</code></li><li><code>0 &lt;= nums[i] &lt;= 50</code></li><li><code>0 &lt;= val &lt;= 100</code></li></ul><p><strong>题解</strong></p><p>双指针： <strong>通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。</strong></p><ul><li>快指针：寻找新数组的元素 ，新数组就是不含有目标元素的数组</li><li>慢指针：指向更新 新数组下标的位置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">rightIndex</span> <span class="operator">=</span> <span class="number">0</span>; rightIndex &lt; nums.length; rightIndex++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[rightIndex] != val)&#123;</span><br><span class="line">                nums[leftIndex++] = nums[rightIndex];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> leftIndex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul><h2 id="26-删除有序数组中的重复项"><a href="#26-删除有序数组中的重复项" class="headerlink" title="26. 删除有序数组中的重复项"></a>26. 删除有序数组中的重复项</h2><p>给你一个 <strong>升序排列</strong> 的数组 <code>nums</code> ，请你 <strong><a href="http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a></strong> 删除重复出现的元素，使每个元素 <strong>只出现一次</strong> ，返回删除后数组的新长度。元素的 <strong>相对顺序</strong> 应该保持 <strong>一致</strong> 。</p><p>由于在某些语言中不能改变数组的长度，所以必须将结果放在数组nums的第一部分。更规范地说，如果在删除重复项之后有 <code>k</code> 个元素，那么 <code>nums</code> 的前 <code>k</code> 个元素应该保存最终结果。</p><p>将最终结果插入 <code>nums</code> 的前 <code>k</code> 个位置后返回 <code>k</code> 。</p><p>不要使用额外的空间，你必须在 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a> 修改输入数组</strong> 并在使用 O(1) 额外空间的条件下完成。</p><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,1,2]</span><br><span class="line">输出：2, nums = [1,2,_]</span><br><span class="line">解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,0,1,1,1,2,2,3,3,4]</span><br><span class="line">输出：5, nums = [0,1,2,3,4]</span><br><span class="line">解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 3 * 10^4</code></li><li><code>-10^4 &lt;= nums[i] &lt;= 10^4</code></li><li><code>nums</code> 已按 <strong>升序</strong> 排列</li></ul><p><strong>题解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">q</span> <span class="operator">=</span> <span class="number">1</span>; q &lt; nums.length; q++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[p] != nums[q])&#123;</span><br><span class="line">                nums[p + <span class="number">1</span>] = nums[q];</span><br><span class="line">                p++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283. 移动零"></a>283. 移动零</h2><p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。</p><p><strong>请注意</strong> ，必须在不复制数组的情况下原地对数组进行操作。</p><p><strong>示例 1:</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [0,1,0,3,12]</span><br><span class="line">输出: [1,3,12,0,0]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [0]</span><br><span class="line">输出: [0]</span><br></pre></td></tr></table></figure><p><strong>提示</strong>:</p><ul><li><code>1 &lt;= nums.length &lt;= 10^4</code></li><li><code>-2^31 &lt;= nums[i] &lt;= 2^31 - 1</code></li></ul><p><strong>题解</strong></p><p>p，q双指针进行遍历，遇到不等于0的元素进行左右交换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//p,q为指针</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">q</span> <span class="operator">=</span> <span class="number">0</span>; q &lt; nums.length; q++)&#123;</span><br><span class="line">            <span class="comment">//不等于0，元素左右进行交换</span></span><br><span class="line">            <span class="keyword">if</span>(nums[q] != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[p];</span><br><span class="line">                nums[p++] = nums[q];</span><br><span class="line">                nums[q] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="844-比较含退格的字符串"><a href="#844-比较含退格的字符串" class="headerlink" title="844. 比较含退格的字符串"></a>844. 比较含退格的字符串</h2><p>给定 <code>s</code> 和 <code>t</code> 两个字符串，当它们分别被输入到空白的文本编辑器后，如果两者相等，返回 <code>true</code> 。<code>#</code> 代表退格字符。</p><p><strong>注意：</strong>如果对空文本输入退格字符，文本继续为空。</p><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;ab#c&quot;, t = &quot;ad#c&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：s 和 t 都会变成 &quot;ac&quot;。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;ab##&quot;, t = &quot;c#d#&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：s 和 t 都会变成 &quot;&quot;。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;a#c&quot;, t = &quot;b&quot;</span><br><span class="line">输出：false</span><br><span class="line">解释：s 会变成 &quot;c&quot;，但 t 仍然是 &quot;b&quot;。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length, t.length &lt;= 200</code></li><li><code>s</code> 和 <code>t</code> 只含有小写字母以及字符 <code>&#39;#&#39;</code></li></ul><p><strong>进阶：</strong></p><ul><li>你可以用 <code>O(n)</code> 的时间复杂度和 <code>O(1)</code> 的空间复杂度解决该问题吗？</li></ul><p><strong>题解</strong></p><h3 id="方法一：比较字符串"><a href="#方法一：比较字符串" class="headerlink" title="方法一：比较字符串"></a>方法一：比较字符串</h3><p>只需要将每个字符串去掉退格后的字符串获取到，进行比较即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">backspaceCompare</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> build(s).equals(build(t));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取去掉退格后的字符串</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">build</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">s</span> <span class="operator">=</span> str.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(s != <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">                ans.append(s);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(ans.length() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    ans.deleteCharAt(ans.length() - <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法二：双指针"><a href="#方法二：双指针" class="headerlink" title="方法二：双指针"></a>方法二：双指针</h3><p>该方法来自<a href="https://leetcode.cn/problems/backspace-string-compare/solution/bi-jiao-han-tui-ge-de-zi-fu-chuan-by-leetcode-solu/">leetcode</a></p><p>一个字符是否会被删掉，只取决于该字符后面的退格符，而与该字符前面的退格符无关。因此当我们逆序地遍历字符串，就可以立即确定当前字符是否会被删掉。</p><p>具体地，我们定义 skip表示当前待删除的字符的数量。每次我们遍历到一个字符：</p><ul><li><p>若该字符为退格符，则我们需要多删除一个普通字符，我们让 skip加 1；</p></li><li><p>若该字符为普通字符：</p><ul><li><p>若 skip为 0，则说明当前字符不需要删去；</p></li><li><p>若 skip不为 0，则说明当前字符需要删去，我们让 skip减 1。</p></li></ul></li></ul><p>这样，我们定义两个指针，分别指向两字符串的末尾。每次我们让两指针逆序地遍历两字符串，直到两字符串能够各自确定一个字符，然后将这两个字符进行比较。重复这一过程直到找到的两个字符不相等，或遍历完字符串为止。</p><img src="https://assets.leetcode-cn.com/solution-static/844/1.gif" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">backspaceCompare</span><span class="params">(String S, String T)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> S.length() - <span class="number">1</span>, j = T.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">skipS</span> <span class="operator">=</span> <span class="number">0</span>, skipT = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (S.charAt(i) == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                    skipS++;</span><br><span class="line">                    i--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (skipS &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    skipS--;</span><br><span class="line">                    i--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (T.charAt(j) == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                    skipT++;</span><br><span class="line">                    j--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (skipT &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    skipT--;</span><br><span class="line">                    j--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (S.charAt(i) != T.charAt(j)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            i--;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977. 有序数组的平方"></a>977. 有序数组的平方</h2><p>给你一个按 <strong>非递减顺序</strong> 排序的整数数组 <code>nums</code>，返回 <strong>每个数字的平方</strong> 组成的新数组，要求也按 <strong>非递减顺序</strong> 排序。</p><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-4,-1,0,3,10]</span><br><span class="line">输出：[0,1,9,16,100]</span><br><span class="line">解释：平方后，数组变为 [16,1,0,9,100]</span><br><span class="line">排序后，数组变为 [0,1,9,16,100]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-7,-3,2,3,11]</span><br><span class="line">输出：[4,9,9,49,121]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^4</code></li><li><code>-10^4 &lt;= nums[i] &lt;= 10^4</code></li><li><code>nums</code> 已按 <strong>非递减顺序</strong> 排序</li></ul><p><strong>进阶：</strong></p><ul><li>请你设计时间复杂度为 <code>O(n)</code> 的算法解决本问题</li></ul><p><strong>题解</strong></p><p>两种解法：1. 先进行平方后排序得出结果。 2. 双指针。</p><p>下面为双指针写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>, k = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="comment">//这里必须要加等于，否则新数组首位就会未赋值</span></span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[left] * nums[left] &gt; nums[right] * nums[right])&#123;</span><br><span class="line">                ans[k--] = nums[left] * nums[left];</span><br><span class="line">                left++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ans[k--] = nums[right] * nums[right];</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(n)</p><h2 id="209-长度最小的子数组"><a href="#209-长度最小的子数组" class="headerlink" title="209. 长度最小的子数组"></a>209. 长度最小的子数组</h2><p>给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code> <strong>。</strong></p><p>找出该数组中满足其和 <code>≥ target</code> 的长度最小的 <strong>连续子数组</strong> <code>[numsl, numsl+1, ..., numsr-1, numsr]</code> ，并返回其长度<strong>。</strong>如果不存在符合条件的子数组，返回 <code>0</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：target = 7, nums = [2,3,1,2,4,3]</span><br><span class="line">输出：2</span><br><span class="line">解释：子数组 [4,3] 是该条件下的长度最小的子数组。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：target = 4, nums = [1,4,4]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：target = 11, nums = [1,1,1,1,1,1,1,1]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= target &lt;= 10^9</code></li><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>1 &lt;= nums[i] &lt;= 10^5</code></li></ul><p><strong>进阶：</strong></p><ul><li>如果你已经实现 <code>O(n)</code> 时间复杂度的解法, 请尝试设计一个 <code>O(n log(n))</code> 时间复杂度的解法。</li></ul><p><strong>题解</strong></p><p>滑动窗口(减少不必要的计算)，题目需要找到符合条件的最小长度，所以在满足<code>sum &gt;= target</code>条件下减少所需长度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, ans = Integer.MAX_VALUE, sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; nums.length; j++)&#123;</span><br><span class="line">            sum += nums[j];</span><br><span class="line">            <span class="comment">//尽可能减小长度，向后移动初始位置，并在sum中减去初始位置</span></span><br><span class="line">            <span class="keyword">while</span>(sum &gt;= target)&#123;</span><br><span class="line">                ans = Math.min(ans, j - i + <span class="number">1</span>);</span><br><span class="line">                sum -= nums[i++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans == Integer.MAX_VALUE ? <span class="number">0</span> : ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul><h2 id="59-螺旋矩阵-II"><a href="#59-螺旋矩阵-II" class="headerlink" title="59. 螺旋矩阵 II"></a>59. 螺旋矩阵 II</h2><p>给你一个正整数 <code>n</code> ，生成一个包含 <code>1</code> 到 <code>n^2</code> 所有元素，且元素按顺时针顺序螺旋排列的 <code>n x n</code> 正方形矩阵 <code>matrix</code> 。</p><p><strong>示例 1：</strong></p><img src="https://assets.leetcode.com/uploads/2020/11/13/spiraln.jpg" style="zoom: 80%;" /><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：[[1,2,3],[8,9,4],[7,6,5]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 1</span><br><span class="line">输出：[[1]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 20</code></li></ul><p><strong>题解</strong></p><p>左闭右开，以圈数为循环次数，规律如下图</p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20220922102236.png" alt="img" style="zoom: 33%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] generateMatrix(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span>[][] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>, y = <span class="number">0</span>;   <span class="comment">//每一圈开始位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">loop</span> <span class="operator">=</span> n / <span class="number">2</span>;   <span class="comment">//循环次数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> n / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;   <span class="comment">//控制遍历的长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;    <span class="comment">//填入的数字</span></span><br><span class="line">        <span class="type">int</span> i, j;</span><br><span class="line">        <span class="keyword">while</span>(loop-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            i = x;</span><br><span class="line">            j = y;</span><br><span class="line">            <span class="comment">//生成上方数字</span></span><br><span class="line">            <span class="keyword">for</span>(j = y; j &lt; n - count; j++)&#123;</span><br><span class="line">                ans[x][j] = num++; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//生成右侧数字</span></span><br><span class="line">            <span class="keyword">for</span>(i = x; i &lt; n - count; i++)&#123;</span><br><span class="line">                ans[i][j] = num++; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//生成下方数字</span></span><br><span class="line">            <span class="keyword">for</span>(; j &gt; y; j--)&#123;</span><br><span class="line">                ans[i][j] = num++; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//生成左侧数字</span></span><br><span class="line">            <span class="keyword">for</span>(; i &gt; x; i--)&#123;</span><br><span class="line">                ans[i][j] = num++; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//调整内圈开始位置</span></span><br><span class="line">            x++;</span><br><span class="line">            y++;</span><br><span class="line">            <span class="comment">//缩小边界</span></span><br><span class="line">            count++;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            ans[mid][mid] = num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203. 移除链表元素"></a>203. 移除链表元素</h2><p>给你一个链表的头节点 <code>head</code> 和一个整数 <code>val</code> ，请你删除链表中所有满足 <code>Node.val == val</code> 的节点，并返回 <strong>新的头节点</strong> 。</p><p><strong>示例 1：</strong></p><img src="https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg" style="zoom: 80%;" /><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,6,3,4,5,6], val = 6</span><br><span class="line">输出：[1,2,3,4,5]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [], val = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [7,7,7,7], val = 7</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>列表中的节点数目在范围 <code>[0, 10^4]</code> 内</li><li><code>1 &lt;= Node.val &lt;= 50</code></li><li><code>0 &lt;= val &lt;= 50</code></li></ul><p><strong>题解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(head != <span class="literal">null</span> &amp;&amp; head.val == val)&#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">node</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(node != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(node.next != <span class="literal">null</span> &amp;&amp; node.next.val == val)&#123;</span><br><span class="line">                node.next = node.next.next;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="707-设计链表"><a href="#707-设计链表" class="headerlink" title="707. 设计链表"></a>707. 设计链表</h2><p>你可以选择使用单链表或者双链表，设计并实现自己的链表。</p><p>单链表中的节点应该具备两个属性：<code>val</code> 和 <code>next</code> 。<code>val</code> 是当前节点的值，<code>next</code> 是指向下一个节点的指针&#x2F;引用。</p><p>如果是双向链表，则还需要属性 <code>prev</code> 以指示链表中的上一个节点。假设链表中的所有节点下标从 <strong>0</strong> 开始。</p><p>实现 <code>MyLinkedList</code> 类：</p><ul><li><code>MyLinkedList()</code> 初始化 <code>MyLinkedList</code> 对象。</li><li><code>int get(int index)</code> 获取链表中下标为 <code>index</code> 的节点的值。如果下标无效，则返回 <code>-1</code> 。</li><li><code>void addAtHead(int val)</code> 将一个值为 <code>val</code> 的节点插入到链表中第一个元素之前。在插入完成后，新节点会成为链表的第一个节点。</li><li><code>void addAtTail(int val)</code> 将一个值为 <code>val</code> 的节点追加到链表中作为链表的最后一个元素。</li><li><code>void addAtIndex(int index, int val)</code> 将一个值为 <code>val</code> 的节点插入到链表中下标为 <code>index</code> 的节点之前。如果 <code>index</code> 等于链表的长度，那么该节点会被追加到链表的末尾。如果 <code>index</code> 比长度更大，该节点将 <strong>不会插入</strong> 到链表中。</li><li><code>void deleteAtIndex(int index)</code> 如果下标有效，则删除链表中下标为 <code>index</code> 的节点。</li></ul><p><strong>示例：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">[&quot;MyLinkedList&quot;, &quot;addAtHead&quot;, &quot;addAtTail&quot;, &quot;addAtIndex&quot;, &quot;get&quot;, &quot;deleteAtIndex&quot;, &quot;get&quot;]</span><br><span class="line">[[], [1], [3], [1, 2], [1], [1], [1]]</span><br><span class="line">输出</span><br><span class="line">[null, null, null, null, 2, null, 3]</span><br><span class="line"></span><br><span class="line">解释</span><br><span class="line">MyLinkedList myLinkedList = new MyLinkedList();</span><br><span class="line">myLinkedList.addAtHead(1);</span><br><span class="line">myLinkedList.addAtTail(3);</span><br><span class="line">myLinkedList.addAtIndex(1, 2);    // 链表变为 1-&gt;2-&gt;3</span><br><span class="line">myLinkedList.get(1);              // 返回 2</span><br><span class="line">myLinkedList.deleteAtIndex(1);    // 现在，链表变为 1-&gt;3</span><br><span class="line">myLinkedList.get(1);              // 返回 3</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= index, val &lt;= 1000</code></li><li>请不要使用内置的 LinkedList 库。</li><li>调用 <code>get</code>、<code>addAtHead</code>、<code>addAtTail</code>、<code>addAtIndex</code> 和 <code>deleteAtIndex</code> 的次数不超过 <code>2000</code> 。</li></ul><p><strong>题解</strong></p><p>需要注意的是插入删除需要找到前一个位置再进行后续操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode()&#123;&#125;</span><br><span class="line">    ListNode(<span class="type">int</span> val) &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    ListNode head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">currentNode</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= index; i++) &#123;</span><br><span class="line">            currentNode = currentNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> currentNode.val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        addAtIndex(<span class="number">0</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        addAtIndex(size, val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(index &gt; size) <span class="keyword">return</span>;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="comment">//此处不等于index原因是找到前一个结点位置</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++)&#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        node.next = pre.next;</span><br><span class="line">        pre.next = node;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//找到需要删除结点的前一个位置</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size) <span class="keyword">return</span>;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++)&#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        pre.next = pre.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyLinkedList object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyLinkedList obj = new MyLinkedList();</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.get(index);</span></span><br><span class="line"><span class="comment"> * obj.addAtHead(val);</span></span><br><span class="line"><span class="comment"> * obj.addAtTail(val);</span></span><br><span class="line"><span class="comment"> * obj.addAtIndex(index,val);</span></span><br><span class="line"><span class="comment"> * obj.deleteAtIndex(index);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表"></a>206. 反转链表</h2><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5]</span><br><span class="line">输出：[5,4,3,2,1]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2]</span><br><span class="line">输出：[2,1]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围是 <code>[0, 5000]</code></li><li><code>-5000 &lt;= Node.val &lt;= 5000</code></li></ul><p><strong>进阶：</strong>链表可以选用迭代或递归方式完成反转。你能否用两种方法解决这道题？</p><p><strong>题解</strong></p><p>双指针，一个负责遍历，一个负责存储</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            temp = cur.next;</span><br><span class="line">            cur.next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24. 两两交换链表中的节点"></a>24. 两两交换链表中的节点</h2><p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4]</span><br><span class="line">输出：[2,1,4,3]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1]</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目在范围 <code>[0, 100]</code> 内</li><li><code>0 &lt;= Node.val &lt;= 100</code></li></ul><p><strong>题解</strong></p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        pre.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> pre;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">firstnode</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">secondnode</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur.next != <span class="literal">null</span> &amp;&amp; cur.next.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            temp = cur.next.next.next;</span><br><span class="line">            firstnode = cur.next;</span><br><span class="line">            secondnode = cur.next.next;</span><br><span class="line">            cur.next = secondnode; </span><br><span class="line">            secondnode.next = firstnode; </span><br><span class="line">            firstnode.next = temp;      </span><br><span class="line">            cur = firstnode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre.next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法二：递归"><a href="#方法二：递归" class="headerlink" title="方法二：递归"></a>方法二：递归</h3><p><strong>参考自评论区</strong></p><p>使用递归来解决该题，主要就是递归的三部曲：</p><ol><li><strong>找终止条件</strong>：本题终止条件很明显，当递归到链表为空或者链表只剩一个元素的时候，没得交换了，自然就终止了。</li><li><strong>找返回值</strong>：返回给上一层递归的值应该是已经交换完成后的子链表。</li><li><strong>单次的过程</strong>：因为递归是重复做一样的事情，所以从宏观上考虑，只用考虑某一步是怎么完成的。我们假设待交换的俩节点分别为head和next，next的应该接受上一级返回的子链表(参考第2步)。就相当于是一个含三个节点的链表交换前两个节点，就很简单了，想不明白的画画图就ok。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span> || head.next == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> head.next;</span><br><span class="line">        head.next = swapPairs(next.next);</span><br><span class="line">        next.next = head;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19. 删除链表的倒数第 N 个结点"></a>19. 删除链表的倒数第 N 个结点</h2><p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5], n = 2</span><br><span class="line">输出：[1,2,3,5]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1], n = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2], n = 1</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中结点的数目为 <code>sz</code></li><li><code>1 &lt;= sz &lt;= 30</code></li><li><code>0 &lt;= Node.val &lt;= 100</code></li><li><code>1 &lt;= n &lt;= sz</code></li></ul><p><strong>进阶：</strong>你能尝试使用一趟扫描实现吗？</p><p><strong>题解</strong></p><p>双指针，快指针与慢指针保持一定间隔（慢指针指向的为待删除结点的前一个位置），当快指针走到链表末端，则说明慢指针已经到达待删除结点的前一个位置，此时只许进行一次简单的链表删除即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        pre.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> pre;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> pre;</span><br><span class="line">        <span class="keyword">while</span>(n-- &gt; <span class="number">0</span> &amp;&amp; fast != <span class="literal">null</span>)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">         <span class="keyword">while</span> (fast != <span class="literal">null</span>) &#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow.next = slow.next.next;</span><br><span class="line">        <span class="keyword">return</span> pre.next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面试题-02-07-链表相交"><a href="#面试题-02-07-链表相交" class="headerlink" title="面试题 02.07. 链表相交"></a>面试题 02.07. 链表相交</h2><p>给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 <code>null</code> 。</p><p>图示两个链表在节点 <code>c1</code> 开始相交<strong>：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png"></p><p>题目数据 <strong>保证</strong> 整个链式结构中不存在环。</p><p><strong>注意</strong>，函数返回结果后，链表必须 <strong>保持其原始结构</strong> 。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_1.png"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3</span><br><span class="line">输出：Intersected at &#x27;8&#x27;</span><br><span class="line">解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。</span><br><span class="line">从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。</span><br><span class="line">在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_2.png"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1</span><br><span class="line">输出：Intersected at &#x27;2&#x27;</span><br><span class="line">解释：相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。</span><br><span class="line">从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。</span><br><span class="line">在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><p><a href="https://assets.leetcode.com/uploads/2018/12/13/160_example_3.png"><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_3.png"></a></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2</span><br><span class="line">输出：null</span><br><span class="line">解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。</span><br><span class="line">由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。</span><br><span class="line">这两个链表不相交，因此返回 null 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>listA</code> 中节点数目为 <code>m</code></li><li><code>listB</code> 中节点数目为 <code>n</code></li><li><code>0 &lt;= m, n &lt;= 3 * 10^4</code></li><li><code>1 &lt;= Node.val &lt;= 10^5</code></li><li><code>0 &lt;= skipA &lt;= m</code></li><li><code>0 &lt;= skipB &lt;= n</code></li><li>如果 <code>listA</code> 和 <code>listB</code> 没有交点，<code>intersectVal</code> 为 <code>0</code></li><li>如果 <code>listA</code> 和 <code>listB</code> 有交点，<code>intersectVal == listA[skipA + 1] == listB[skipB + 1]</code></li></ul><p><strong>进阶：</strong>你能否设计一个时间复杂度 <code>O(n)</code> 、仅用 <code>O(1)</code> 内存的解决方案？</p><p><strong>题解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sizeA</span> <span class="operator">=</span> <span class="number">0</span>, sizeB = <span class="number">0</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">curA</span> <span class="operator">=</span> headA , curB = headB;</span><br><span class="line">        <span class="keyword">while</span>(curA != <span class="literal">null</span>)&#123;</span><br><span class="line">            sizeA++;</span><br><span class="line">            curA = curA.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(curB != <span class="literal">null</span>)&#123;</span><br><span class="line">            sizeB++;</span><br><span class="line">            curB = curB.next;</span><br><span class="line">        &#125;</span><br><span class="line">        curA = headA;</span><br><span class="line">        curB = headB;</span><br><span class="line">        <span class="keyword">if</span> (sizeB &gt; sizeA) &#123;</span><br><span class="line">            <span class="comment">//1. swap (lenA, lenB);</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">tmpLen</span> <span class="operator">=</span> sizeA;</span><br><span class="line">            sizeA = sizeB;</span><br><span class="line">            sizeB = tmpLen;</span><br><span class="line">            <span class="comment">//2. swap (curA, curB);</span></span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">tmpNode</span> <span class="operator">=</span> curA;</span><br><span class="line">            curA = curB;</span><br><span class="line">            curB = tmpNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> sizeA - sizeB;</span><br><span class="line">        <span class="keyword">while</span>(count-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            curA = curA.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(curA != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(curA == curB) <span class="keyword">return</span> curA;</span><br><span class="line">            curA = curA.next;</span><br><span class="line">            curB = curB.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="142-环形链表-II"><a href="#142-环形链表-II" class="headerlink" title="142. 环形链表 II"></a>142. 环形链表 II</h2><p>给定一个链表的头节点  <code>head</code> ，返回链表开始入环的第一个节点。 <em>如果链表无环，则返回 <code>null</code>。</em></p><p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（<strong>索引从 0 开始</strong>）。如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。</p><p><strong>不允许修改</strong> 链表。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [3,2,0,-4], pos = 1</span><br><span class="line">输出：返回索引为 1 的链表节点</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2], pos = 0</span><br><span class="line">输出：返回索引为 0 的链表节点</span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1], pos = -1</span><br><span class="line">输出：返回 null</span><br><span class="line">解释：链表中没有环。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围在范围 <code>[0, 10^4]</code> 内</li><li><code>-10^5 &lt;= Node.val &lt;= 10^5</code></li><li><code>pos</code> 的值为 <code>-1</code> 或者链表中的一个有效索引</li></ul><p><strong>进阶：</strong>你是否可以使用 <code>O(1)</code> 空间解决此题？</p><p><strong>题解</strong></p><p>数学知识比较多，需要进行推导得出规律。</p><blockquote><p>给一个参考：<a href="https://www.programmercarl.com/0142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.html#%E5%A6%82%E6%9E%9C%E6%9C%89%E7%8E%AF-%E5%A6%82%E4%BD%95%E6%89%BE%E5%88%B0%E8%BF%99%E4%B8%AA%E7%8E%AF%E7%9A%84%E5%85%A5%E5%8F%A3">https://www.programmercarl.com/0142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.html#%E5%A6%82%E6%9E%9C%E6%9C%89%E7%8E%AF-%E5%A6%82%E4%BD%95%E6%89%BE%E5%88%B0%E8%BF%99%E4%B8%AA%E7%8E%AF%E7%9A%84%E5%85%A5%E5%8F%A3</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            <span class="keyword">if</span>(slow == fast)&#123;</span><br><span class="line">                <span class="type">ListNode</span> <span class="variable">index1</span> <span class="operator">=</span> fast;</span><br><span class="line">                <span class="type">ListNode</span> <span class="variable">index2</span> <span class="operator">=</span> head;</span><br><span class="line">                <span class="keyword">while</span>(index1 != index2)&#123;</span><br><span class="line">                    index1 = index1.next;</span><br><span class="line">                    index2 = index2.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//返回index2（环的起点）</span></span><br><span class="line">                <span class="keyword">return</span> index2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><h2 id="242-有效的字母异位词"><a href="#242-有效的字母异位词" class="headerlink" title="242. 有效的字母异位词"></a>242. 有效的字母异位词</h2><p>给定两个字符串 <code>*s*</code> 和 <code>*t*</code> ，编写一个函数来判断 <code>*t*</code> 是否是 <code>*s*</code> 的字母异位词。</p><p><strong>注意：</strong>若 <code>*s*</code> 和 <code>*t*</code> 中每个字符出现的次数都相同，则称 <code>*s*</code> 和 <code>*t*</code> 互为字母异位词。</p><p><strong>示例 1:</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;anagram&quot;, t = &quot;nagaram&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;rat&quot;, t = &quot;car&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>1 &lt;= s.length, t.length &lt;= 5 * 10^4</code></li><li><code>s</code> 和 <code>t</code> 仅包含小写字母</li></ul><p><strong>进阶:</strong> 如果输入字符串包含 unicode 字符怎么办？你能否调整你的解法来应对这种情况？</p><p><strong>题解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] record = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            record[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; t.length(); i++)&#123;</span><br><span class="line">            record[t.charAt(i) - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : record)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349. 两个数组的交集"></a>349. 两个数组的交集</h2><p>给定两个数组 <code>nums1</code> 和 <code>nums2</code> ，返回 <em>它们的交集</em> 。输出结果中的每个元素一定是 <strong>唯一</strong> 的。我们可以 <strong>不考虑输出结果的顺序</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [1,2,2,1], nums2 = [2,2]</span><br><span class="line">输出：[2]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]</span><br><span class="line">输出：[9,4]</span><br><span class="line">解释：[4,9] 也是可通过的</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li><li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li></ul><p><strong>题解</strong></p><p>利用Set的每个元素的唯一性来解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] intersection(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">        Set&lt;Integer&gt; set1 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        Set&lt;Integer&gt; set2 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num:nums1)&#123;</span><br><span class="line">            set1.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num:nums2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(set1.contains(num)) set2.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> set2.stream().mapToInt(x -&gt; x).toArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="202-快乐数"><a href="#202-快乐数" class="headerlink" title="202. 快乐数"></a>202. 快乐数</h2><p>编写一个算法来判断一个数 <code>n</code> 是不是快乐数。</p><p><strong>「快乐数」</strong> 定义为：</p><ul><li>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。</li><li>然后重复这个过程直到这个数变为 1，也可能是 <strong>无限循环</strong> 但始终变不到 1。</li><li>如果这个过程 <strong>结果为</strong> 1，那么这个数就是快乐数。</li></ul><p>如果 <code>n</code> 是 <em>快乐数</em> 就返回 <code>true</code> ；不是，则返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 19</span><br><span class="line">输出：true</span><br><span class="line">解释：</span><br><span class="line">12 + 92 = 82</span><br><span class="line">82 + 22 = 68</span><br><span class="line">62 + 82 = 100</span><br><span class="line">12 + 02 + 02 = 1</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 2</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 2^31 - 1</code></li></ul><p><strong>题解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHappy</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        Set&lt;Integer&gt; record = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">1</span> &amp;&amp; !record.contains(n)) &#123;</span><br><span class="line">            record.add(n);</span><br><span class="line">            n = getSum(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            sum += (n % <span class="number">10</span>) * (n % <span class="number">10</span>);</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h2><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em>  的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,4], target = 6</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,3], target = 6</span><br><span class="line">输出：[0,1]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 10^4</code></li><li><code>-10^9 &lt;= nums[i] &lt;= 10^9</code></li><li><code>-10^9 &lt;= target &lt;= 10^9</code></li><li><strong>只会存在一个有效答案</strong></li></ul><p><strong>进阶：</strong>你可以想出一个时间复杂度小于 <code>O(n^2)</code> 的算法吗？</p><p><strong>题解</strong></p><p>Map存放访问过的元素和下标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> target - nums[i]; </span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(temp))&#123;</span><br><span class="line">                res[<span class="number">1</span>] = i;</span><br><span class="line">                res[<span class="number">0</span>] = map.get(temp);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i], i);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="454-四数相加-II"><a href="#454-四数相加-II" class="headerlink" title="454. 四数相加 II"></a>454. 四数相加 II</h2><p>给你四个整数数组 <code>nums1</code>、<code>nums2</code>、<code>nums3</code> 和 <code>nums4</code> ，数组长度都是 <code>n</code> ，请你计算有多少个元组 <code>(i, j, k, l)</code> 能满足：</p><ul><li><code>0 &lt;= i, j, k, l &lt; n</code></li><li><code>nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0</code></li></ul><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]</span><br><span class="line">输出：2</span><br><span class="line">解释：</span><br><span class="line">两个元组如下：</span><br><span class="line">1. (0, 0, 0, 1) -&gt; nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0</span><br><span class="line">2. (1, 1, 0, 0) -&gt; nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == nums1.length</code></li><li><code>n == nums2.length</code></li><li><code>n == nums3.length</code></li><li><code>n == nums4.length</code></li><li><code>1 &lt;= n &lt;= 200</code></li><li><code>-2^28 &lt;= nums1[i], nums2[i], nums3[i], nums4[i] &lt;= 2^28</code></li></ul><p><strong>题解</strong></p><p>两两数组相加，进而化简成类似于<code>1.两数之和</code>题目</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fourSumCount</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2, <span class="type">int</span>[] nums3, <span class="type">int</span>[] nums4)</span> &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums1.length;</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : nums1)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j : nums2)&#123;</span><br><span class="line">                temp = i + j;</span><br><span class="line">                <span class="keyword">if</span>(map.containsKey(temp))&#123;</span><br><span class="line">                    map.put(temp, map.get(temp) + <span class="number">1</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    map.put(temp, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : nums3)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j : nums4)&#123;</span><br><span class="line">                temp = i + j;</span><br><span class="line">                <span class="keyword">if</span>(map.containsKey(<span class="number">0</span> - temp))&#123;</span><br><span class="line">                    ans+=map.get(<span class="number">0</span> - temp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="383-赎金信"><a href="#383-赎金信" class="headerlink" title="383. 赎金信"></a>383. 赎金信</h2><p>给你两个字符串：<code>ransomNote</code> 和 <code>magazine</code> ，判断 <code>ransomNote</code> 能不能由 <code>magazine</code> 里面的字符构成。</p><p>如果可以，返回 <code>true</code> ；否则返回 <code>false</code> 。</p><p><code>magazine</code> 中的每个字符只能在 <code>ransomNote</code> 中使用一次。</p><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：ransomNote = &quot;a&quot;, magazine = &quot;b&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：ransomNote = &quot;aa&quot;, magazine = &quot;ab&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：ransomNote = &quot;aa&quot;, magazine = &quot;aab&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= ransomNote.length, magazine.length &lt;= 10^5</code></li><li><code>ransomNote</code> 和 <code>magazine</code> 由小写英文字母组成</li></ul><p><strong>题解</strong></p><p>与<code>242.有效的字母异位词</code>类似</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] record = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ransomNote.length(); i++)&#123;</span><br><span class="line">            record[ransomNote.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; magazine.length(); i++)&#123;</span><br><span class="line">            record[magazine.charAt(i) - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : record)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a>15. 三数之和</h2><p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请</p><p>你返回所有和为 <code>0</code> 且不重复的三元组。</p><p><strong>注意：</strong>答案中不可以包含重复的三元组。</p><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-1,0,1,2,-1,-4]</span><br><span class="line">输出：[[-1,-1,2],[-1,0,1]]</span><br><span class="line">解释：</span><br><span class="line">nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。</span><br><span class="line">nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。</span><br><span class="line">nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。</span><br><span class="line">不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。</span><br><span class="line">注意，输出的顺序和三元组的顺序并不重要。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,1,1]</span><br><span class="line">输出：[]</span><br><span class="line">解释：唯一可能的三元组和不为 0 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,0,0]</span><br><span class="line">输出：[[0,0,0]]</span><br><span class="line">解释：唯一可能的三元组和为 0 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>3 &lt;= nums.length &lt;= 3000</code></li><li><code>-10^5 &lt;= nums[i] &lt;= 10^5</code></li></ul><p><strong>解题</strong></p><p>双指针解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; <span class="number">0</span>) <span class="keyword">return</span> ans;</span><br><span class="line">            <span class="comment">//对a进行去重 </span></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(right &gt; left)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[i] + nums[left] + nums[right];</span><br><span class="line">                <span class="keyword">if</span>(sum &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125; </span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(sum &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    ans.add(Arrays.asList(nums[i], nums[left], nums[right]));</span><br><span class="line">                    <span class="comment">//对b,c进行去重</span></span><br><span class="line">                    <span class="keyword">while</span>(right &gt; left &amp;&amp; nums[right] == nums[right-<span class="number">1</span>]) right--;</span><br><span class="line">                    <span class="keyword">while</span>(right &gt; left &amp;&amp; nums[left] == nums[left+<span class="number">1</span>]) left++;                    </span><br><span class="line">                    right--;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18. 四数之和"></a>18. 四数之和</h2><p>给你一个由 <code>n</code> 个整数组成的数组 <code>nums</code> ，和一个目标值 <code>target</code> 。请你找出并返回满足下述全部条件且<strong>不重复</strong>的四元组 <code>[nums[a], nums[b], nums[c], nums[d]]</code> （若两个四元组元素一一对应，则认为两个四元组重复）：</p><ul><li><code>0 &lt;= a, b, c, d &lt; n</code></li><li><code>a</code>、<code>b</code>、<code>c</code> 和 <code>d</code> <strong>互不相同</strong></li><li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li></ul><p>你可以按 <strong>任意顺序</strong> 返回答案 。</p><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,0,-1,0,-2,2], target = 0</span><br><span class="line">输出：[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,2,2,2,2], target = 8</span><br><span class="line">输出：[[2,2,2,2]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 200</code></li><li><code>-10^9 &lt;= nums[i] &lt;= 10^9</code></li><li><code>-10^9 &lt;= target &lt;= 10^9</code></li></ul><p><strong>解题</strong></p><p>双指针法，与<code>15.三数之和</code>类似，在原有基础上再嵌套一层for循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">fourSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; nums.length; k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[k] &gt;= <span class="number">0</span> &amp;&amp; nums[k] &gt; target) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(k &gt; <span class="number">0</span> &amp;&amp; nums[k] == nums[k - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k + <span class="number">1</span>; i &lt; nums.length - <span class="number">1</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[k] + nums[i] &gt; target &amp;&amp; nums[k] + nums[i] &gt;= <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span>(i &gt; k + <span class="number">1</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i+<span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(right &gt; left)&#123;</span><br><span class="line">                    <span class="keyword">if</span>((<span class="type">long</span>)(nums[k] + nums[i] + nums[left] + nums[right]) &gt; target)&#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span>((<span class="type">long</span>)(nums[k] + nums[i] + nums[left] + nums[right]) &lt; target)&#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        list.add(Arrays.asList(nums[k],nums[i],nums[left],nums[right]));</span><br><span class="line">                        <span class="keyword">while</span>(right &gt; left &amp;&amp; nums[right] == nums[right-<span class="number">1</span>]) right--;</span><br><span class="line">                        <span class="keyword">while</span>(right &gt; left &amp;&amp; nums[left] == nums[left+<span class="number">1</span>]) left++;</span><br><span class="line">                        right--;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="344-反转字符串"><a href="#344-反转字符串" class="headerlink" title="344. 反转字符串"></a>344. 反转字符串</h2><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 <code>s</code> 的形式给出。</p><p>不要给另外的数组分配额外的空间，你必须**<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a>修改输入数组**、使用 O(1) 的额外空间解决这一问题。</p><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = [&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]</span><br><span class="line">输出：[&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = [&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]</span><br><span class="line">输出：[&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^5</code></li><li><code>s[i]</code> 都是 <a href="https://baike.baidu.com/item/ASCII">ASCII</a> 码表中的可打印字符</li></ul><p><strong>解题</strong></p><p>主要学习下位运算法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseString</span><span class="params">(<span class="type">char</span>[] s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> s.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length / <span class="number">2</span>; i++)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> s[i];</span><br><span class="line">            s[i] = s[right];</span><br><span class="line">            s[right--] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//位运算法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseString</span><span class="params">(<span class="type">char</span>[] s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> s.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            s[l] ^= s[r];  <span class="comment">//构造 a ^ b 的结果，并放在 a 中</span></span><br><span class="line">            s[r] ^= s[l];  <span class="comment">//将 a ^ b 这一结果再 ^ b ，存入b中，此时 b = a, a = a ^ b</span></span><br><span class="line">            s[l] ^= s[r];  <span class="comment">//a ^ b 的结果再 ^ a ，存入 a 中，此时 b = a, a = b 完成交换</span></span><br><span class="line">            l++;</span><br><span class="line">            r--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="541-反转字符串-II"><a href="#541-反转字符串-II" class="headerlink" title="541. 反转字符串 II"></a>541. 反转字符串 II</h2><p>给定一个字符串 <code>s</code> 和一个整数 <code>k</code>，从字符串开头算起，每计数至 <code>2k</code> 个字符，就反转这 <code>2k</code> 字符中的前 <code>k</code> 个字符。</p><ul><li>如果剩余字符少于 <code>k</code> 个，则将剩余字符全部反转。</li><li>如果剩余字符小于 <code>2k</code> 但大于或等于 <code>k</code> 个，则反转前 <code>k</code> 个字符，其余字符保持原样。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;abcdefg&quot;, k = 2</span><br><span class="line">输出：&quot;bacdfeg&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;abcd&quot;, k = 2</span><br><span class="line">输出：&quot;bacd&quot;</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^4</code></li><li><code>s</code> 仅由小写英文组成</li><li><code>1 &lt;= k &lt;= 10^4</code></li></ul><p><strong>解题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseStr</span><span class="params">(String s, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; length) &#123;</span><br><span class="line">            <span class="comment">// 找到k处和2k处</span></span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">            <span class="comment">// 与length进行判断，如果大于length了，那就将其置为length</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">firstK</span> <span class="operator">=</span> (start + k &gt; length) ? length : start + k;</span><br><span class="line">            <span class="type">int</span> <span class="variable">secondK</span> <span class="operator">=</span> (start + (<span class="number">2</span> * k) &gt; length) ? length : start + (<span class="number">2</span> * k);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//无论start所处位置，至少会反转一次</span></span><br><span class="line">            temp.append(s.substring(start, firstK));</span><br><span class="line">            res.append(temp.reverse());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果firstK到secondK之间有元素，这些元素直接放入res里即可。</span></span><br><span class="line">            <span class="keyword">if</span> (firstK &lt; secondK) &#123; <span class="comment">//此时剩余长度一定大于k。</span></span><br><span class="line">                res.append(s.substring(firstK, secondK));</span><br><span class="line">            &#125;</span><br><span class="line">            start += (<span class="number">2</span> * k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-05-替换空格"><a href="#剑指-Offer-05-替换空格" class="headerlink" title="剑指 Offer 05. 替换空格"></a>剑指 Offer 05. 替换空格</h2><p>请实现一个函数，把字符串 <code>s</code> 中的每个空格替换成”%20”。</p><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;We are happy.&quot;</span><br><span class="line">输出：&quot;We%20are%20happy.&quot;</span><br></pre></td></tr></table></figure><p><strong>限制：</strong></p><p><code>0 &lt;= s 的长度 &lt;= 10000</code></p><p><strong>解题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">replaceSpace</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot; &quot;</span>.equals(String.valueOf(s.charAt(i))))&#123;</span><br><span class="line">                sb.append(<span class="string">&quot;%20&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sb.append(s.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="151-反转字符串中的单词"><a href="#151-反转字符串中的单词" class="headerlink" title="151. 反转字符串中的单词"></a>151. 反转字符串中的单词</h2><p>给你一个字符串 <code>s</code> ，请你反转字符串中 <strong>单词</strong> 的顺序。</p><p><strong>单词</strong> 是由非空格字符组成的字符串。<code>s</code> 中使用至少一个空格将字符串中的 <strong>单词</strong> 分隔开。</p><p>返回 <strong>单词</strong> 顺序颠倒且 <strong>单词</strong> 之间用单个空格连接的结果字符串。</p><p><strong>注意：</strong>输入字符串 <code>s</code>中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。</p><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;the sky is blue&quot;</span><br><span class="line">输出：&quot;blue is sky the&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;  hello world  &quot;</span><br><span class="line">输出：&quot;world hello&quot;</span><br><span class="line">解释：反转后的字符串中不能存在前导空格和尾随空格。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;a good   example&quot;</span><br><span class="line">输出：&quot;example good a&quot;</span><br><span class="line">解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^4</code></li><li><code>s</code> 包含英文大小写字母、数字和空格 <code>&#39; &#39;</code></li><li><code>s</code> 中 <strong>至少存在一个</strong> 单词</li></ul><p><strong>进阶：</strong>如果字符串在你使用的编程语言中是一种可变数据类型，请尝试使用 <code>O(1)</code> 额外空间复杂度的 <strong>原地</strong> 解法。</p><p><strong>解题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseWords</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        String[] str = s.trim().split(<span class="string">&quot; +&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> str.length -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; (str.length/<span class="number">2</span>); i++)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> str[i];</span><br><span class="line">            str[i] = str[n];</span><br><span class="line">            str[n --] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> String.join(<span class="string">&quot; &quot;</span>,str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="剑指-Offer-58-II-左旋转字符串"><a href="#剑指-Offer-58-II-左旋转字符串" class="headerlink" title="剑指 Offer 58 - II. 左旋转字符串"></a>剑指 Offer 58 - II. 左旋转字符串</h2><p>字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串”abcdefg”和数字2，该函数将返回左旋转两位得到的结果”cdefgab”。</p><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;abcdefg&quot;, k = 2</span><br><span class="line">输出: &quot;cdefgab&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;lrloseumgh&quot;, k = 6</span><br><span class="line">输出: &quot;umghlrlose&quot;</span><br></pre></td></tr></table></figure><p><strong>限制：</strong></p><ul><li><code>1 &lt;= k &lt; s.length &lt;= 10000</code></li></ul><p><strong>解题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseLeftWords</span><span class="params">(String s, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; n)&#123;</span><br><span class="line">                s2.append(s.charAt(i));</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                s1.append(s.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        s1.append(s2.toString());</span><br><span class="line">        <span class="keyword">return</span> s1.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="28-找出字符串中第一个匹配项的下标"><a href="#28-找出字符串中第一个匹配项的下标" class="headerlink" title="28. 找出字符串中第一个匹配项的下标"></a>28. 找出字符串中第一个匹配项的下标</h2><p>给你两个字符串 <code>haystack</code> 和 <code>needle</code> ，请你在 <code>haystack</code> 字符串中找出 <code>needle</code> 字符串的第一个匹配项的下标（下标从 0 开始）。如果 <code>needle</code> 不是 <code>haystack</code> 的一部分，则返回  <code>-1</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：haystack = &quot;sadbutsad&quot;, needle = &quot;sad&quot;</span><br><span class="line">输出：0</span><br><span class="line">解释：&quot;sad&quot; 在下标 0 和 6 处匹配。</span><br><span class="line">第一个匹配项的下标是 0 ，所以返回 0 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：haystack = &quot;leetcode&quot;, needle = &quot;leeto&quot;</span><br><span class="line">输出：-1</span><br><span class="line">解释：&quot;leeto&quot; 没有在 &quot;leetcode&quot; 中出现，所以返回 -1 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= haystack.length, needle.length &lt;= 10^4</code></li><li><code>haystack</code> 和 <code>needle</code> 仅由小写英文字符组成</li></ul><p><strong>解题</strong></p><p>KMP最长公共前后缀</p><p>放上讲解视频链接</p><ul><li><a href="https://www.bilibili.com/video/BV1PD4y1o7nd/">帮你把KMP算法学个通透！B站（理论篇）</a></li><li><a href="https://www.bilibili.com/video/BV1M5411j7Xx">帮你把KMP算法学个通透！（求next数组代码篇）</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String haystack, String needle)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (needle.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] next = <span class="keyword">new</span> <span class="title class_">int</span>[needle.length()];</span><br><span class="line">        getNext(next, needle);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; haystack.length(); i++) &#123;</span><br><span class="line">            <span class="comment">//回退条件</span></span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; needle.charAt(j) != haystack.charAt(i)) </span><br><span class="line">                j = next[j - <span class="number">1</span>];</span><br><span class="line">            <span class="comment">//相等则继续向前寻找</span></span><br><span class="line">            <span class="keyword">if</span> (needle.charAt(j) == haystack.charAt(i)) </span><br><span class="line">                j++;</span><br><span class="line">            <span class="comment">//返回初始下标</span></span><br><span class="line">            <span class="keyword">if</span> (j == needle.length()) </span><br><span class="line">                <span class="keyword">return</span> i - needle.length() + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getNext</span><span class="params">(<span class="type">int</span>[] next, String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        next[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; s.charAt(j) != s.charAt(i)) </span><br><span class="line">                j = next[j - <span class="number">1</span>];</span><br><span class="line">            <span class="comment">//匹配成功</span></span><br><span class="line">            <span class="keyword">if</span> (s.charAt(j) == s.charAt(i)) </span><br><span class="line">                j++;</span><br><span class="line">            next[i] = j; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="459-重复的子字符串"><a href="#459-重复的子字符串" class="headerlink" title="459. 重复的子字符串"></a>459. 重复的子字符串</h2><p>给定一个非空的字符串 <code>s</code> ，检查是否可以通过由它的一个子串重复多次构成。</p><p><strong>示例 1:</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;abab&quot;</span><br><span class="line">输出: true</span><br><span class="line">解释: 可由子串 &quot;ab&quot; 重复两次构成。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;aba&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;abcabcabcabc&quot;</span><br><span class="line">输出: true</span><br><span class="line">解释: 可由子串 &quot;abc&quot; 重复四次构成。 (或子串 &quot;abcabc&quot; 重复两次构成。)</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^4</code></li><li><code>s</code> 由小写英文字母组成</li></ul><p><strong>解题</strong></p><p><img src="https://code-thinking.cdn.bcebos.com/pics/459.%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2_1.png" alt="459.重复的子字符串_1"></p><p>12(字符串的长度) - 8(最长公共前后缀的长度) &#x3D; 4， 4正好可以被 12(字符串的长度) 整除，所以说明有重复的子字符串（asdf）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">repeatedSubstringPattern</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span>[] next = <span class="keyword">new</span> <span class="title class_">int</span>[s.length()];</span><br><span class="line">        getNext(next, s);</span><br><span class="line">        <span class="keyword">if</span> (next[len - <span class="number">1</span>] &gt; <span class="number">0</span> &amp;&amp; len % (len - next[len - <span class="number">1</span>]) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getNext</span><span class="params">(<span class="type">int</span>[] next, String s)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        next[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; s.charAt(i) != s.charAt(j)) j = next[j - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i) == s.charAt(j)) j++;</span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;KMP最长公共前后缀：主要用于字符串匹配&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;例题：&lt;a href=&quot;https://leetcode.cn/problems/find-the-index-of-the-first-occurren</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://blog.bywind.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="LeetCode" scheme="https://blog.bywind.xyz/tags/LeetCode/"/>
    
    <category term="算法" scheme="https://blog.bywind.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Heo即刻短文：分享自我与精彩生活</title>
    <link href="https://blog.bywind.xyz/posts/10b1d3b5.html"/>
    <id>https://blog.bywind.xyz/posts/10b1d3b5.html</id>
    <published>2022-12-21T10:57:46.000Z</published>
    <updated>2024-07-03T10:10:36.807Z</updated>
    
    <content type="html"><![CDATA[<p>即刻短文部署，原教程<a href="https://blog.zhheo.com/p/557c9e72.html">Hexo的Butterfly魔改：即刻短文静态部署版</a>，本文在原有基础上进行了拓展。</p><blockquote><p>注：如有新功能本文会继续进行更新。2024&#x2F;07&#x2F;03</p></blockquote><table><thead><tr><th>列表</th><th>是否支持</th></tr></thead><tbody><tr><td>图片</td><td>✅</td></tr><tr><td>链接</td><td>✅</td></tr><tr><td>音乐</td><td>✅</td></tr><tr><td>瀑布流</td><td>✅</td></tr><tr><td>首页滚动</td><td>✅</td></tr><tr><td>位置信息</td><td>✅</td></tr></tbody></table><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p><a href="https://blog.bywind.xyz/essay/">即刻短文-随风起：分享知识与美好时光</a></p><h2 id="创建数据"><a href="#创建数据" class="headerlink" title="创建数据"></a>创建数据</h2><p>在<code>source/_data</code>目录下创建<code>essay.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">即刻短文</span></span><br><span class="line">  <span class="attr">essay_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">content:</span> <span class="string">文章推荐卡片教程推出</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">https://cdn.bywind.xyz/img/cover/image-20221221154442479.png</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://blog.bywind.xyz/posts/ab6e072d.html</span></span><br><span class="line">      <span class="attr">location:</span> <span class="string">山西</span></span><br><span class="line">      <span class="attr">date:</span> <span class="number">2022-12-21</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">content:</span> <span class="string">关于本站</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://blog.bywind.xyz/about/</span></span><br><span class="line">      <span class="attr">location:</span> <span class="string">天津</span></span><br><span class="line">      <span class="attr">date:</span> <span class="number">2022-12-20</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">content:</span> <span class="string">即刻短文头图换成视频，更显动态感</span></span><br><span class="line">      <span class="attr">date:</span> <span class="number">2022-12-19 23:07:23</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">content:</span> <span class="string">李荣浩的歌还是那么好听，两人配合太棒了！</span></span><br><span class="line">      <span class="attr">music:</span></span><br><span class="line">        <span class="attr">server:</span> <span class="string">tencent</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">001wG84E4bOj3V</span></span><br><span class="line">      <span class="attr">date:</span> <span class="number">2022-12-19 08:07:23</span></span><br></pre></td></tr></table></figure><h3 id="配置参数介绍"><a href="#配置参数介绍" class="headerlink" title="配置参数介绍"></a>配置参数介绍</h3><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>content</td><td>即刻短文内容</td></tr><tr><td>image</td><td>图片</td></tr><tr><td>link</td><td>链接</td></tr><tr><td>music.server</td><td>音乐服务商（<code>tencent</code>QQ，<code>netease</code>网易云，,<code>kugou</code>酷狗, <code>xiami</code>虾米）</td></tr><tr><td>music.id</td><td>音乐id</td></tr><tr><td>location</td><td>位置信息</td></tr><tr><td>date</td><td>日期</td></tr></tbody></table><h2 id="创建md页面"><a href="#创建md页面" class="headerlink" title="创建md页面"></a>创建md页面</h2><p>创建md页面，在控制台输入<code>hexo new page essay</code>，生成文件在<code>source/essay/index.md</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 即刻短文</span><br><span class="line">date: 2022-12-20 22:06:17</span><br><span class="line">comments: true</span><br><span class="line">aside: false</span><br><span class="line">top_img: false</span><br><span class="line">type: essay</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="创建页面文件"><a href="#创建页面文件" class="headerlink" title="创建页面文件"></a>创建页面文件</h2><p>在<code>themes/butterfly/layout/includes/page</code>目录下创建<code>essay.pug</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">.author-content.author-content-item.essayPage.single.essayVideo</span><br><span class="line">    .card-content</span><br><span class="line">        .author-content-item-tips 即刻短文</span><br><span class="line">        span.author-content-item-title 分享生活的小确幸</span><br><span class="line">        .content-bottom</span><br><span class="line">            .tips 使用 即刻短文静态部署版 构建</span><br><span class="line">        .banner-button-group</span><br><span class="line">            a.banner-button(onclick=&#x27;pjax.loadUrl(&quot;/about/&quot;)&#x27;, data-pjax-state)</span><br><span class="line">                i.fas.fa-circle-chevron-right</span><br><span class="line">                span.banner-button-text 部署项目</span><br><span class="line">#bber</span><br><span class="line">    section.timeline.page-1</span><br><span class="line">        ul#waterfall.list.show</span><br><span class="line">            each i in site.data.essay</span><br><span class="line">                each item, index in i.essay_list</span><br><span class="line">                    if index &lt; 30</span><br><span class="line">                        li.item</span><br><span class="line">                            .bber-content</span><br><span class="line">                                p.datacont= item.content</span><br><span class="line">                                    if item.image</span><br><span class="line">                                        .bber-content-img</span><br><span class="line">                                            a.fancybox(target=&#x27;_blank&#x27;, rel=&#x27;noopener&#x27;, href=item.image, data-fancybox=&#x27;gallery&#x27;, data-caption)</span><br><span class="line">                                                img.bber-content-image-self(src=item.image)</span><br><span class="line">                            if item.music</span><br><span class="line">                                .bber-music</span><br><span class="line">                                    meting-js(server=item.music.server, type=&#x27;song&#x27;, id=item.music.id, mutex=&#x27;true&#x27;, preload=&#x27;none&#x27;, theme=&#x27;var(--bywind-main)&#x27;, data-lrctype=&#x27;0&#x27;)</span><br><span class="line">                            hr</span><br><span class="line">                            .bber-bottom</span><br><span class="line">                                .bber-info</span><br><span class="line">                                    .bber-info-time</span><br><span class="line">                                        i.fa-solid.fa-calendar-days</span><br><span class="line">                                        - var datedata = new Date(item.date).toISOString()</span><br><span class="line"></span><br><span class="line">                                        time.datatime(datetime= item.date)= datedata</span><br><span class="line">                                    if item.link</span><br><span class="line">                                        a.bber-content-link(href=item.link, target=&quot;_blank&quot;, rel=&quot;external nofollow&quot;, title=&quot;跳转到短文指引的链接&quot;)</span><br><span class="line">                                            i.fas.fa-link</span><br><span class="line">                                            | 链接</span><br><span class="line">                                    - let location = item.location ? item.location : 山西</span><br><span class="line">                                    .bber-info-address</span><br><span class="line">                                        i.hnfont.icon-location-fill</span><br><span class="line">                                        span=location</span><br><span class="line">                                a.bber-reply(onclick=`rm.rightMenuCommentText(&#x27;$&#123;item.content&#125;&#x27;)`)</span><br><span class="line">                                    i.fa-solid.fa-message</span><br><span class="line"></span><br><span class="line">#bber-tips(style=&#x27;color: var(--bywind-secondtext);&#x27;)</span><br><span class="line">    | - 只展示最近30条短文 -</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="修改Page文件"><a href="#修改Page文件" class="headerlink" title="修改Page文件"></a>修改Page文件</h2><p>修改<code>themes/butterfly/layout/page.pug</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    case page.type</span><br><span class="line">      when &#x27;tags&#x27;</span><br><span class="line">        include includes/page/tags.pug</span><br><span class="line">      when &#x27;link&#x27;</span><br><span class="line">        include includes/page/flink.pug</span><br><span class="line">+      when &#x27;essay&#x27;</span><br><span class="line">+        include includes/page/essay.pug</span><br></pre></td></tr></table></figure><h2 id="首页即刻（可选）"><a href="#首页即刻（可选）" class="headerlink" title="首页即刻（可选）"></a>首页即刻（可选）</h2><ol><li><p>新建<code>themes/butterfly/layout/includes/bbTimeList.pug</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#bbTimeList.bbTimeList.container</span><br><span class="line">    i.bber-logo.iconfont.icon-bblogo(onclick=`pjax.loadUrl(&quot;/essay/&quot;)`,title=&quot;即刻短文&quot;,style=&quot;font-size: 2rem;&quot;)</span><br><span class="line">    #bbtalk.swiper-container.swiper-no-swiping(tabindex=&quot;-1&quot;)</span><br><span class="line">        #bber-talk.swiper-wrapper(onclick=`pjax.loadUrl(&quot;/essay/&quot;)`)</span><br><span class="line">            each i in site.data.essay</span><br><span class="line">                each item, index in i.essay_list</span><br><span class="line">                    if index &lt; 10</span><br><span class="line">                        - var contentText = item.content</span><br><span class="line">                        if item.image</span><br><span class="line">                            - contentText= item.content + &#x27; [图片]&#x27;</span><br><span class="line">                        else if item.music</span><br><span class="line">                            - contentText= item.content + &#x27; [音乐]&#x27;</span><br><span class="line">                        .li-style.swiper-slide= contentText</span><br><span class="line"></span><br><span class="line">    i.bber-gotobb.fas.fa-arrow-circle-right(onclick=`pjax.loadUrl(&quot;/essay/&quot;)`,title=&quot;查看全文&quot;)</span><br><span class="line">script(src=&#x27;https://cdn.jsdelivr.net/npm/swiper/swiper-bundle.min.js&#x27;,data-pjax=&#x27;&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>引入到主页</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">block content</span><br><span class="line">  include ./includes/mixins/post-ui.pug</span><br><span class="line">  #recent-posts.recent-posts</span><br><span class="line">    include includes/categoryList.pug</span><br><span class="line">+    include includes/bbTimeList.pug</span><br><span class="line">    +postUI</span><br><span class="line">    include includes/pagination.pug</span><br></pre></td></tr></table></figure></li><li><p>引入样式文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">- &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/swiper/swiper-bundle.min.css&quot;&gt;</span><br><span class="line">- &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/js-heo@1.0.11/bb/showbb_in_index.css&quot;&gt;</span><br><span class="line">- &lt;script src=&quot;https://cdn.staticaly.com/gh/haonan15/CDN@main/source/waterfall.min.js&quot;&gt;&lt;/script&gt; # 瀑布流</span><br></pre></td></tr></table></figure></li><li><p>添加js</p><p>在自定义js中添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if (document.querySelector(&#x27;#bber-talk&#x27;)) &#123;</span><br><span class="line">      var swiper = new Swiper(&#x27;.swiper-container&#x27;, &#123;</span><br><span class="line">        direction: &#x27;vertical&#x27;, </span><br><span class="line">        loop: true,</span><br><span class="line">        autoplay: &#123;</span><br><span class="line">        delay: 3000,</span><br><span class="line">        pauseOnMouseEnter: true</span><br><span class="line">      &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="css补充"><a href="#css补充" class="headerlink" title="css补充"></a>css补充</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#bber</span>&gt;<span class="selector-tag">section</span>&gt;<span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span>&gt;<span class="selector-tag">div</span> <span class="selector-class">.bber-info-time</span> ,</span><br><span class="line"><span class="selector-id">#bber</span> &gt; <span class="selector-tag">section</span> &gt; <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span> &gt; <span class="selector-tag">div</span> <span class="selector-class">.bber-info-address</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--bywind-fontcolor);</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.7rem</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(--bywind-gray-op);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: default;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#bber</span>&gt;<span class="selector-tag">section</span>&gt;<span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span>&gt;<span class="selector-tag">div</span> <span class="selector-class">.bber-info-time</span> <span class="selector-tag">i</span> ,</span><br><span class="line"><span class="selector-id">#bber</span> &gt; <span class="selector-tag">section</span> &gt; <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span> &gt; <span class="selector-tag">div</span> <span class="selector-class">.bber-info-address</span> <span class="selector-tag">i</span>&#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#bber</span> &gt; <span class="selector-tag">section</span> &gt; <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span> &gt; <span class="selector-tag">div</span> <span class="selector-class">.bber-info-address</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0.5rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;即刻短文部署，原教程&lt;a href=&quot;https://blog.zhheo.com/p/557c9e72.html&quot;&gt;Hexo的Butterfly魔改：即刻短文静态部署版&lt;/a&gt;，本文在原有基础上进行了拓展。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：如有新功能本文会继续</summary>
      
    
    
    
    <category term="经验分享" scheme="https://blog.bywind.xyz/categories/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="Hexo" scheme="https://blog.bywind.xyz/tags/Hexo/"/>
    
    <category term="Butterfly" scheme="https://blog.bywind.xyz/tags/Butterfly/"/>
    
  </entry>
  
  <entry>
    <title>博客随机文章跳转</title>
    <link href="https://blog.bywind.xyz/posts/c18c7ac1.html"/>
    <id>https://blog.bywind.xyz/posts/c18c7ac1.html</id>
    <published>2022-12-21T09:02:49.000Z</published>
    <updated>2023-07-22T15:56:23.724Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文参考自<a href="https://blog.zhheo.com/">heo</a>及<a href="https://blog.jayhrn.com/">Jayhrn</a></p></blockquote><h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><p>创建<code>themes/butterfly/scripts/helpers/random.js</code>文件</p><h3 id="开启pjax方案"><a href="#开启pjax方案" class="headerlink" title="开启pjax方案"></a>开启pjax方案</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">hexo.<span class="property">extend</span>.<span class="property">generator</span>.<span class="title function_">register</span>(<span class="string">&#x27;random&#x27;</span>, <span class="keyword">function</span> (<span class="params">locals</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> config = hexo.<span class="property">config</span>.<span class="property">random</span> || &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> posts = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> post <span class="keyword">of</span> locals.<span class="property">posts</span>.<span class="property">data</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (post.<span class="property">random</span> !== <span class="literal">false</span>) posts.<span class="title function_">push</span>(post.<span class="property">path</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">path</span>: config.<span class="property">path</span> || <span class="string">&#x27;bywind/random.js&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: <span class="string">`var posts=<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(posts)&#125;</span>;function toRandomPost()&#123;pjax.loadUrl(&#x27;/&#x27;+posts[Math.floor(Math.random() * posts.length)]);&#125;;`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="未开启pjax方案"><a href="#未开启pjax方案" class="headerlink" title="未开启pjax方案"></a>未开启pjax方案</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">hexo.<span class="property">extend</span>.<span class="property">generator</span>.<span class="title function_">register</span>(<span class="string">&#x27;random&#x27;</span>, <span class="keyword">function</span> (<span class="params">locals</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> config = hexo.<span class="property">config</span>.<span class="property">random</span> || &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> posts = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> post <span class="keyword">of</span> locals.<span class="property">posts</span>.<span class="property">data</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (post.<span class="property">random</span> !== <span class="literal">false</span>) posts.<span class="title function_">push</span>(post.<span class="property">path</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">path</span>: config.<span class="property">path</span> || <span class="string">&#x27;bywind/random.js&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: <span class="string">`var posts=<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(posts)&#125;</span>;function toRandomPost()&#123;window.open(&#x27;/&#x27;+posts[Math.floor(Math.random() * posts.length)],&quot;_self&quot;);&#125;;`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><p>在主题配置文件的inject的bottom里添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;/bywind/random.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文参考自&lt;a href=&quot;https://blog.zhheo.com/&quot;&gt;heo&lt;/a&gt;及&lt;a href=&quot;https://blog.jayhrn.com/&quot;&gt;Jayhrn&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;创建文件&quot;</summary>
      
    
    
    
    <category term="转载内容" scheme="https://blog.bywind.xyz/categories/%E8%BD%AC%E8%BD%BD%E5%86%85%E5%AE%B9/"/>
    
    
    <category term="Hexo" scheme="https://blog.bywind.xyz/tags/Hexo/"/>
    
    <category term="Butterfly" scheme="https://blog.bywind.xyz/tags/Butterfly/"/>
    
  </entry>
  
  <entry>
    <title>为博客顶部添加滚动banner及文章推荐卡片</title>
    <link href="https://blog.bywind.xyz/posts/ab6e072d.html"/>
    <id>https://blog.bywind.xyz/posts/ab6e072d.html</id>
    <published>2022-12-21T03:35:37.000Z</published>
    <updated>2023-09-29T11:34:35.567Z</updated>
    
    <content type="html"><![CDATA[<p>给大家分享下博客主页顶部推荐文章如何实现，主要参考自<a href="https://blog.zhheo.com/">heo</a></p><blockquote><p>注：已于<code>2023.08</code>做出更新</p></blockquote><p>具体效果如下<br><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/202308231342545.png"></p><h2 id="创建hometop-pug"><a href="#创建hometop-pug" class="headerlink" title="创建hometop.pug"></a>创建hometop.pug</h2><p>在<code>themes/butterfly/layout/includes</code>下创建<code>hometop.pug</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">if is_home()</span><br><span class="line">    #home_top</span><br><span class="line">        .recent-top-post-group#recent-top-post-group</span><br><span class="line">            .recent-post-top#recent-post-top</span><br><span class="line">                #bannerGroup</span><br><span class="line">                    #banners</span><br><span class="line">                        .banners-title</span><br><span class="line">                            .banners-title-big 无限活力</span><br><span class="line">                            .banners-title-big 与热爱生活</span><br><span class="line">                            .banners-title-small BYWIND.XYZ</span><br><span class="line">                        .tags-group-all</span><br><span class="line">                            .tags-group-wrapper</span><br><span class="line">                                each i in site.data.creativity</span><br><span class="line">                                    - const evenNum = i.creativity_list.filter((x, index) =&gt; index % 2 === 0);</span><br><span class="line">                                    - const oddNum = i.creativity_list.filter((x, index) =&gt; index % 2 === 1);</span><br><span class="line">                                    each item, index in i.creativity_list</span><br><span class="line">                                        if ((index + 1 &lt;= evenNum.length) &amp;&amp; (index + 1 &lt;= oddNum.length))</span><br><span class="line">                                            .tags-group-icon-pair</span><br><span class="line">                                                .tags-group-icon(style=`background: $&#123;evenNum[index].color&#125;`)</span><br><span class="line">                                                    img(src=evenNum[index].icon, onerror=&#x27;this.onerror=null,this.src=&quot;/img/friend_404.gif&quot;&#x27;, title=evenNum[index].name, alt=evenNum[index].name)</span><br><span class="line">                                                .tags-group-icon(style=`background: $&#123;oddNum[index].color&#125;`)</span><br><span class="line">                                                    img(src=oddNum[index].icon, onerror=&#x27;this.onerror=null,this.src=&quot;/img/friend_404.gif&quot;&#x27;, title=oddNum[index].name, alt=oddNum[index].name)</span><br><span class="line">                                each i in site.data.creativity</span><br><span class="line">                                    - const evenNum = i.creativity_list.filter((x, index) =&gt; index % 2 === 0);</span><br><span class="line">                                    - const oddNum = i.creativity_list.filter((x, index) =&gt; index % 2 === 1);</span><br><span class="line">                                    each item, index in i.creativity_list</span><br><span class="line">                                        if ((index + 1 &lt;= evenNum.length) &amp;&amp; (index + 1 &lt;= oddNum.length))</span><br><span class="line">                                            .tags-group-icon-pair</span><br><span class="line">                                                .tags-group-icon(style=`background: $&#123;evenNum[index].color&#125;`)</span><br><span class="line">                                                    img(src=evenNum[index].icon, onerror=&#x27;this.onerror=null,this.src=&quot;/img/friend_404.gif&quot;&#x27;, title=evenNum[index].name, alt=evenNum[index].name)</span><br><span class="line">                                                .tags-group-icon(style=`background: $&#123;oddNum[index].color&#125;`)</span><br><span class="line">                                                    img(src=oddNum[index].icon, onerror=&#x27;this.onerror=null,this.src=&quot;/img/friend_404.gif&quot;&#x27;, title=oddNum[index].name, alt=oddNum[index].name)</span><br><span class="line">                        a#banner-hover(onclick=&#x27;toRandomPost()&#x27;)</span><br><span class="line">                            span.bannerText 随便逛逛</span><br><span class="line">                            i.fas.fa-arrow-right.banner-righticon</span><br><span class="line">                    .categoryGroup</span><br><span class="line">                        .categoryItem(style=&#x27;box-shadow:var(--bywind-shadow-blue)&#x27;)</span><br><span class="line">                            a.categoryButton.CB1.bikan(href=&#x27;/categories/学习笔记/&#x27;)</span><br><span class="line">                                span.categoryButtonText 必看精选</span><br><span class="line">                                i.fas.fa-dove</span><br><span class="line">                        .categoryItem(style=&#x27;box-shadow:var(--bywind-shadow-red)&#x27;)</span><br><span class="line">                            a.categoryButton.remen(href=&#x27;/categories/Hexo魔改/&#x27;)</span><br><span class="line">                                span.categoryButtonText 热门文章</span><br><span class="line">                                i.fas.fa-burn</span><br><span class="line">                        .categoryItem(style=&#x27;box-shadow:var(--bywind-shadow-green)&#x27;)</span><br><span class="line">                            a.categoryButton.shiyong(href=&#x27;/categories/后端/&#x27;)</span><br><span class="line">                                span.categoryButtonText 实用教程</span><br><span class="line">                                i.fas.fa-book</span><br><span class="line">                .topGroup</span><br><span class="line">                    if site.data.slider</span><br><span class="line">                        each i in site.data.slider</span><br><span class="line">                            .recent-post-item</span><br><span class="line">                                .post_cover.left_radius</span><br><span class="line">                                    a(href=url_for(i.link), title=i.title)</span><br><span class="line">                                        span.recent-post-top-text(onclick=`pjax.loadUrl(&quot;`+i.link+`&quot;)`) 荐</span><br><span class="line">                                        img.post_bg.entered.loaded(src=url_for(i.cover) onerror=&quot;this.onerror=null,this.src=&#x27;/img/404.png&#x27;&quot;)</span><br><span class="line">                                .recent-post-info(onclick=`pjax.loadUrl(&quot;`+i.link+`&quot;)`)</span><br><span class="line">                                    a.article-title(href=url_for(i.link), title=i.title)= i.title</span><br><span class="line">                    .todayCard#todayCard(onclick=&#x27;pjax.loadUrl(/about/)&#x27;, style=&#x27;z-index: 1;&#x27;)</span><br><span class="line">                        .todayCard-info</span><br><span class="line">                            .todayCard-tips 最佳记忆</span><br><span class="line">                            .todayCard-title</span><br><span class="line">                                | 山河远阔，人间烟火</span><br><span class="line">                                br</span><br><span class="line">                                | 无一是你，无一不是你</span><br><span class="line">                        .todayCard-cover(style=&#x27;background:url(/img/todayCardCover.jpeg) no-repeat center/cover&#x27;, onerror=&#x27;this.onerror=null,this.src=&quot;/img/404.png&quot;&#x27;)</span><br><span class="line">                        .banner-button-group</span><br><span class="line">                            a.banner-button(onclick=&#x27;window.event.cancelBubble=!0,bywind.hideTodayCard()&#x27;)</span><br><span class="line">                                i.hnfont.icon-add-circle-fill</span><br><span class="line">                                span.banner-button-text 更多推荐</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="引入页面"><a href="#引入页面" class="headerlink" title="引入页面"></a>引入页面</h2><p>创建完成后在<code>layout/includes/layout.pug</code>中添加<strong>include .&#x2F;hometop.pug</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    if page.type !== &#x27;404&#x27;</span><br><span class="line">      #body-wrap(class=pageType)</span><br><span class="line">        include ./header/index.pug</span><br><span class="line">+        include ./hometop.pug</span><br></pre></td></tr></table></figure><h2 id="创建creativity-yml"><a href="#创建creativity-yml" class="headerlink" title="创建creativity.yml"></a>创建creativity.yml</h2><p>在<code>source/_data</code>下创建<code>creativity.yml</code>文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">开启创造力</span></span><br><span class="line">  <span class="attr">creativity_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Vue</span></span><br><span class="line">      <span class="attr">color:</span> <span class="string">&quot;#b8f0ae&quot;</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">https://cdn.bywind.xyz/img/banners/vue.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Java</span></span><br><span class="line">      <span class="attr">color:</span> <span class="string">&quot;#fff&quot;</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">https://cdn.bywind.xyz/img/banners/Java.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Docker</span></span><br><span class="line">      <span class="attr">color:</span> <span class="string">&quot;#57b6e6&quot;</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">https://cdn.bywind.xyz/img/banners/docker.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Webpack</span></span><br><span class="line">      <span class="attr">color:</span> <span class="string">&quot;#2e3a41&quot;</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">https://cdn.bywind.xyz/img/banners/webpack.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Photoshop</span></span><br><span class="line">      <span class="attr">color:</span> <span class="string">&quot;#4082c3&quot;</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">https://cdn.bywind.xyz/img/banners/PS.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Swift</span></span><br><span class="line">      <span class="attr">color:</span> <span class="string">&quot;#eb6840&quot;</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">https://cdn.bywind.xyz/img/banners/swift.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Python</span></span><br><span class="line">      <span class="attr">color:</span> <span class="string">&quot;#fff&quot;</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">https://cdn.bywind.xyz/img/banners/python.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Node</span></span><br><span class="line">      <span class="attr">color:</span> <span class="string">&quot;#333&quot;</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">https://cdn.bywind.xyz/img/banners/node-logo.svg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Git</span></span><br><span class="line">      <span class="attr">color:</span> <span class="string">&quot;#df5b40&quot;</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">https://cdn.bywind.xyz/img/banners/git.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Css</span></span><br><span class="line">      <span class="attr">color:</span> <span class="string">&quot;#2c51db&quot;</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">https://cdn.bywind.xyz/img/banners/css.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Js</span></span><br><span class="line">      <span class="attr">color:</span> <span class="string">&quot;#f7cb4f&quot;</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">https://cdn.bywind.xyz/img/banners/js.webp</span></span><br></pre></td></tr></table></figure><h2 id="创建slider-yml"><a href="#创建slider-yml" class="headerlink" title="创建slider.yml"></a>创建slider.yml</h2><p>在<code>source/_data</code>下创建<code>slider.yml</code>文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">cover:</span> <span class="string">https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg</span></span><br><span class="line">  <span class="attr">link:</span> <span class="string">/posts/e255a10a.html</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">大学课程</span> <span class="bullet">-</span> <span class="string">计算机网络</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cover:</span> <span class="string">https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg</span></span><br><span class="line">  <span class="attr">link:</span> <span class="string">/posts/8d4b7ae1.html</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">大学课程</span> <span class="bullet">-</span> <span class="string">计算机组成原理</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cover:</span> <span class="string">https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg</span></span><br><span class="line">  <span class="attr">link:</span> <span class="string">posts/d04bd5bc.html</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">大学课程</span> <span class="bullet">-</span> <span class="string">操作系统</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cover:</span> <span class="string">https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp</span></span><br><span class="line">  <span class="attr">link:</span> <span class="string">/posts/f73eaef5.html</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Fiddler抓包</span> <span class="bullet">-</span> <span class="string">功能非常强大的web调试利器</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cover:</span> <span class="string">https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png</span></span><br><span class="line">  <span class="attr">link:</span> <span class="string">/posts/5f262806.html</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">博客美化日记</span> <span class="bullet">-</span> <span class="string">囊括本博客Butterfly主题的基本美化升级</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cover:</span> <span class="string">https://cdn.bywind.xyz/img/cover/image-20221208194011653.png</span></span><br><span class="line">  <span class="attr">link:</span> <span class="string">/posts/e9cd2bbc.html</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">基于Butterfly的外挂标签引入</span> <span class="bullet">-</span> <span class="string">独特的风格让你的博客别具一格</span></span><br></pre></td></tr></table></figure><h2 id="添加css样式"><a href="#添加css样式" class="headerlink" title="添加css样式"></a>添加css样式</h2><p>在自己的<code>css</code>文件中添加</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#home_top</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">1400px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">margin-top</span>: .<span class="number">5rem</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">1.5rem</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="selector-id">#home_top</span> &#123;</span><br><span class="line">        <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.recent-top-post-group</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">overflow-x</span>: auto;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.recent-post-top</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: nowrap;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">overflow-x</span>: scroll</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.recent-post-top</span>::-webkit-scrollbar &#123;</span><br><span class="line">    <span class="attribute">display</span>: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.recent-post-top</span> <span class="selector-class">.recent-post-item</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">    <span class="attribute">margin-left</span>: .<span class="number">5rem</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--bywind-card-bg);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">164px</span>;</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">164px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="built_in">var</span>(--style-border-always);</span><br><span class="line">    <span class="attribute">transition</span>: .<span class="number">3s</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="built_in">var</span>(--bywind-shadow-border)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.recent-post-top</span> <span class="selector-class">.recent-post-item</span> &#123;</span><br><span class="line">        <span class="attribute">border-radius</span>:<span class="number">8px</span>;</span><br><span class="line">        <span class="attribute">box-shadow</span>: none;</span><br><span class="line">        <span class="attribute">clip-path</span>: <span class="built_in">inset</span>(<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> round <span class="number">8px</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.recent-post-top</span> <span class="selector-class">.recent-post-item</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">        <span class="attribute">margin-right</span>: <span class="number">1rem</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1300px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.recent-post-top</span> <span class="selector-class">.recent-post-item</span> &#123;</span><br><span class="line">        <span class="attribute">margin-right</span>:<span class="number">0</span>;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: .<span class="number">5rem</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.recent-post-top</span> <span class="selector-class">.recent-post-item</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(.<span class="number">97</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.recent-post-top</span> &#123;</span><br><span class="line">        <span class="attribute">overflow-x</span>: visible</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.recent-top-post-group</span> &#123;</span><br><span class="line">        <span class="attribute">overflow</span>: visible;</span><br><span class="line">        <span class="attribute">overflow-x</span>: visible</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.recent-post-top-text</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--bywind-theme);</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--bywind-white);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">6rem</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span> <span class="number">0</span> <span class="number">12px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transition</span>: .<span class="number">3s</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.recent-post-item</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.recent-post-top-text</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1300px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.recent-post-top</span> <span class="selector-class">.recent-post-item</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">border</span>:<span class="built_in">var</span>(--style-border-hover);</span><br><span class="line">        <span class="attribute">box-shadow</span>: <span class="built_in">var</span>(--bywind-shadow-main);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.03</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.recent-post-top</span> <span class="selector-class">.recent-post-item</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(.<span class="number">97</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.recent-top-post-group</span> &#123;</span><br><span class="line">        <span class="attribute">border-radius</span>:<span class="number">0</span>;</span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">var</span>(--bywind-background)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.recent-post-top-text</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: none<span class="meta">!important</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.recent-post-top</span> <span class="selector-class">.recent-post-item</span> <span class="selector-class">.post_cover</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">8px</span> <span class="number">8px</span> <span class="number">0</span> <span class="number">0</span><span class="meta">!important</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.recent-post-top</span> <span class="selector-class">.recent-post-item</span> <span class="selector-class">.post_cover</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">display</span>: flex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.recent-post-top</span> <span class="selector-class">.recent-post-item</span> <span class="selector-class">.post_cover</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">object-fit</span>: cover;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--bywind-secondbg);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span> <span class="number">12px</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.recent-post-top</span> <span class="selector-class">.recent-post-item</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.post_cover</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.recent-post-top</span> <span class="selector-class">.recent-post-item</span> <span class="selector-class">.recent-post-info</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">3rem</span> .<span class="number">5rem</span> .<span class="number">3rem</span> .<span class="number">5rem</span><span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">transition</span>: .<span class="number">3s</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.recent-post-top</span> <span class="selector-class">.recent-post-item</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.recent-post-info</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--bywind-fontcolor)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1300px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.recent-post-top</span> <span class="selector-class">.recent-post-item</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.recent-post-info</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>:<span class="built_in">var</span>(--bywind-theme);</span><br><span class="line">        <span class="attribute">transition</span>: .<span class="number">3s</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.recent-post-top</span> <span class="selector-class">.recent-post-item</span> <span class="selector-class">.recent-post-info</span> <span class="selector-class">.article-title</span> &#123;</span><br><span class="line">    -webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    -webkit-box-orient: vertical;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">    <span class="attribute">align-content</span>: center;</span><br><span class="line">    <span class="attribute">padding-top</span>: .<span class="number">5rem</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">8rem</span><span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span><span class="meta">!important</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.categoryItem</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.8s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.65</span>, <span class="number">0.15</span>, <span class="number">0.37</span>, <span class="number">1.19</span>);</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">48%</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.categoryButton</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--bywind-card-bg);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">4em</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.9rem</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--bywind-white);</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.8s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.39</span>, <span class="number">0.575</span>, <span class="number">0.565</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">font-family</span>: PingFang SC, Hiragino Sans GB, Microsoft YaHei;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.categoryButton</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.0</span>) <span class="built_in">rotate</span>(<span class="number">15deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1300px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">a</span><span class="selector-class">.categoryButton</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.97</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">a</span><span class="selector-class">.categoryButton</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.categoryItem</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">47%</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: none <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.categoryButton</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">21px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--bywind-white);</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.categoryButtonText</span> &#123;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">21px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.categoryButton</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">5rem</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.2</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">2px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">a</span><span class="selector-class">.categoryButton</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.recent-post-top</span> <span class="selector-class">.categoryGroup</span> &#123;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">130px</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0.5rem</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">164px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.topGroup</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#bannerGroup</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#banners</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.topGroup</span> <span class="selector-class">.todayCard</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1300px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.topGroup</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">    <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">328px</span> + <span class="number">0.5rem</span>);</span><br><span class="line">    <span class="attribute">align-content</span>: space-between;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">600px</span> + <span class="number">1.5rem</span>);</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">div</span><span class="selector-id">#bannerGroup</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">600px</span> - <span class="number">2rem</span>);</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">0.5rem</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">328px</span> + <span class="number">0.5rem</span>);</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">div</span><span class="selector-id">#banners</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">76%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--bywind-card-bg);</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0.5rem</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="built_in">var</span>(--style-border);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="built_in">var</span>(--bywind-shadow-border);</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">inset</span>(<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> round <span class="number">12px</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">div</span><span class="selector-id">#banners</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="built_in">var</span>(--bywind-shadow-main);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-id">#banners</span><span class="selector-class">.flink</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0.5rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-id">#banners</span> <span class="selector-class">.banner-button-group</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">2rem</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">2rem</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-id">#banners</span> <span class="selector-class">.banner-button</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--bywind-fontcolor);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--bywind-card-bg);</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="built_in">var</span>(--bywind-shadow-black);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-id">#banners</span> <span class="selector-class">.banner-button</span><span class="selector-class">.secondary</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--bywind-secondbg);</span><br><span class="line">    <span class="attribute">border</span>: <span class="built_in">var</span>(--style-border-always);</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--bywind-lighttext);</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="built_in">var</span>(--bywind-shadow-border);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-id">#banners</span> <span class="selector-class">.banner-button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--bywind-theme);</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--bywind-white);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-id">#banners</span> <span class="selector-class">.banner-button</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.banners-title</span> &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">2rem</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">1.5rem</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.banners-title-big</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">36px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">8px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.banners-title-small</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--bywind-secondtext);</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0.5rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-id">#banner-hover</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--bywind-theme);</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--bywind-white);</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">0.5rem</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="built_in">cubic-bezier</span>(<span class="number">0.71</span>, <span class="number">0.15</span>, <span class="number">0.16</span>, <span class="number">1.15</span>) <span class="number">0.6s</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.bannerText</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">4rem</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">4rem</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.banner-righticon</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">4rem</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.6</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-id">#banners</span><span class="selector-pseudo">:hover</span> <span class="selector-id">#banner-hover</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">2rem</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#4259efc9</span>;</span><br><span class="line">    backdrop-<span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">15px</span>);</span><br><span class="line">    -webkit-backdrop-<span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">15px</span>);</span><br><span class="line">    -webkit-<span class="attribute">backface-visibility</span>: hidden;</span><br><span class="line">    -webkit-<span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">200%</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="selector-id">#banners</span> <span class="selector-id">#banner-hover</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">80px</span>;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0.4</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.topGroup</span> <span class="selector-class">.todayCard</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">600px</span> + <span class="number">1rem</span>);</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">var</span>(--bywind-card-bg);</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">0.5rem</span>;</span><br><span class="line">        <span class="attribute">overflow</span>: hidden;</span><br><span class="line">        <span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">cursor</span>: pointer;</span><br><span class="line">        <span class="attribute">pointer-events</span>: all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.topGroup</span> <span class="selector-class">.todayCard</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.topGroup</span> <span class="selector-class">.todayCard</span><span class="selector-class">.hide</span> &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">pointer-events</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.topGroup</span> <span class="selector-class">.todayCard</span> <span class="selector-class">.todayCard-info</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">bottom</span>: <span class="number">2rem</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">2rem</span>;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">        <span class="attribute">color</span>: <span class="built_in">var</span>(--bywind-white);</span><br><span class="line">        <span class="attribute">max-width</span>: <span class="number">60%</span>;</span><br><span class="line">        <span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.topGroup</span> <span class="selector-class">.todayCard</span><span class="selector-class">.hide</span> <span class="selector-class">.todayCard-info</span> &#123;</span><br><span class="line">        <span class="attribute">bottom</span>: <span class="number">1rem</span>;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.topGroup</span> <span class="selector-class">.todayCard</span> <span class="selector-class">.todayCard-info</span> <span class="selector-class">.todayCard-tips</span> &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">0.6rem</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.topGroup</span> <span class="selector-class">.todayCard</span> <span class="selector-class">.todayCard-info</span> <span class="selector-class">.todayCard-title</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">28px</span>;</span><br><span class="line">        <span class="attribute">font-weight</span>: bold;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">36px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.topGroup</span> <span class="selector-class">.banner-button-group</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">right</span>: <span class="number">2rem</span>;</span><br><span class="line">        <span class="attribute">bottom</span>: <span class="number">2rem</span>;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.topGroup</span> <span class="selector-class">.todayCard</span><span class="selector-class">.hide</span> <span class="selector-class">.banner-button-group</span> &#123;</span><br><span class="line">        <span class="attribute">bottom</span>: <span class="number">1rem</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.topGroup</span> <span class="selector-class">.banner-button</span> &#123;</span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">var</span>(--bywind-white-op);</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">color</span>: <span class="built_in">var</span>(--bywind-white);</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">align-items</span>: center;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">        <span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">        <span class="attribute">cursor</span>: pointer;</span><br><span class="line">        backdrop-<span class="attribute">filter</span>: <span class="built_in">saturate</span>(<span class="number">180%</span>) <span class="built_in">blur</span>(<span class="number">20px</span>);</span><br><span class="line">        -webkit-backdrop-<span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">20px</span>);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">118px</span>;</span><br><span class="line">        <span class="attribute">justify-content</span>: center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.topGroup</span> <span class="selector-class">.banner-button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">var</span>(--bywind-theme);</span><br><span class="line">        <span class="attribute">color</span>: <span class="built_in">var</span>(--bywind-white);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.topGroup</span> <span class="selector-class">.banner-button</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">        <span class="attribute">margin-right</span>: <span class="number">8px</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">22px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.topGroup</span> <span class="selector-class">.todayCard</span> <span class="selector-class">.todayCard-cover</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">min-width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">background-size</span>: cover;</span><br><span class="line">        <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.topGroup</span> <span class="selector-class">.todayCard</span><span class="selector-class">.hide</span> <span class="selector-class">.todayCard-cover</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tags-group-icon</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">30px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tags-group-all</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">30deg</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tags-group-all</span><span class="selector-class">.nowrapMove</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">2rem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tags-group-wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">5rem</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: nowrap;</span><br><span class="line">    <span class="attribute">animation</span>: rowup <span class="number">60s</span> linear infinite</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nowrapMove</span> <span class="selector-class">.tags-group-wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">7rem</span>;</span><br><span class="line">    <span class="attribute">animation</span>: rowup <span class="number">120s</span> linear infinite</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tags-group-icon-pair</span> <span class="selector-class">.tags-group-icon</span><span class="selector-pseudo">:nth-child</span>(even) &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">60px</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tags-group-icon-pair</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">1rem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tags-group-icon</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">66px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="built_in">var</span>(--bywind-shadow-blackdeep)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nowrapMove</span> <span class="selector-class">.tags-group-icon</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tags-group-icon</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">60%</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nowrapMove</span> <span class="selector-class">.tags-group-icon</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">object-fit</span>: cover</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.categoryItem</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: .<span class="number">8</span>;</span><br><span class="line">    <span class="attribute">transition</span>: .<span class="number">8s</span>;</span><br><span class="line">    <span class="attribute">transition-delay</span>: .<span class="number">15s</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.03</span>) <span class="built_in">rotate</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2.5rem</span>;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1300px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.categoryItem</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.03</span>) <span class="built_in">rotate</span>(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cate-button-text</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="built_in">var</span>(--bywind-shadow-black)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.recent-post-top</span> <span class="selector-class">.categoryGroup</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">200px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.categoryGroup</span> <span class="selector-class">.categoryItem</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span><br><span class="line">    <span class="attribute">display</span>: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1300px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.recent-post-top</span> <span class="selector-class">.categoryGroup</span> &#123;</span><br><span class="line">        <span class="attribute">flex-direction</span>:row;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">24%</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.categoryItem</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> / <span class="number">3</span> - .<span class="number">33rem</span>);</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">margin-right</span>: .<span class="number">5rem</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.categoryItem</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">        <span class="attribute">margin-right</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.categoryItem</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">50%</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.categoryGroup</span> <span class="selector-class">.categoryItem</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span><br><span class="line">        <span class="attribute">display</span>: flex</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.categoryButton</span><span class="selector-class">.bikan</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right,<span class="number">#358bff</span>,<span class="number">#15c6ff</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">200%</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.categoryButton</span><span class="selector-class">.remen</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right,<span class="number">#f65</span>,<span class="number">#ffbf37</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">200%</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.categoryButton</span><span class="selector-class">.shiyong</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right,<span class="number">#18e7ae</span>,<span class="number">#1eebeb</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">200%</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=dark]</span> <span class="selector-tag">a</span><span class="selector-class">.categoryButton</span><span class="selector-class">.bikan</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right,<span class="number">#0653b8</span>,<span class="number">#2fcbff</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">200%</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=dark]</span> <span class="selector-tag">a</span><span class="selector-class">.categoryButton</span><span class="selector-class">.remen</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right,<span class="number">#e22a16</span>,<span class="number">#da980c</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">200%</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=dark]</span> <span class="selector-tag">a</span><span class="selector-class">.categoryButton</span><span class="selector-class">.shiyong</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right,<span class="number">#099e74</span>,<span class="number">#0ea4a4</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">200%</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.categoryButton</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> rowup &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#recent-post-top</span> <span class="selector-class">.recent-post-item</span> <span class="selector-class">.post_cover</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加js"><a href="#添加js" class="headerlink" title="添加js"></a>添加js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bywind = &#123;</span><br><span class="line">    <span class="attr">hideTodayCard</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;todayCard&quot;</span>) &amp;&amp; <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;todayCard&quot;</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;hide&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="string">&quot;.topGroup&quot;</span>).<span class="title function_">hover</span>((<span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">), (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;todayCard&quot;</span>).<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;hide&quot;</span>),</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;todayCard&quot;</span>).<span class="property">style</span>.<span class="property">zIndex</span> = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">))</span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="颜色补充"><a href="#颜色补充" class="headerlink" title="颜色补充"></a>颜色补充</h3><blockquote><p>如果出现颜色显示问题，可以引入下方css</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">    <span class="attr">--bywind-white</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attr">--bywind-white-op</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.2</span>);</span><br><span class="line">    <span class="attr">--bywind-black</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attr">--bywind-black-op</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line">    <span class="attr">--bywind-none</span>: <span class="number">#00000000</span>;</span><br><span class="line">    <span class="attr">--bywind-gray</span>: <span class="number">#999999</span>;</span><br><span class="line">    <span class="attr">--bywind-gray-op</span>: <span class="number">#9999992b</span>;</span><br><span class="line">    <span class="attr">--bywind-vip</span>: <span class="number">#e5a80d</span>;</span><br><span class="line">    <span class="attr">--bywind-main</span>: <span class="built_in">var</span>(--bywind-theme);</span><br><span class="line">    <span class="attr">--bywind-main-op</span>: <span class="built_in">var</span>(--bywind-theme-op);</span><br><span class="line">    <span class="attr">--bywind-main-op-deep</span>: <span class="built_in">var</span>(--bywind-theme-op-deep);</span><br><span class="line">    <span class="attr">--bywind-main-none</span>: <span class="built_in">var</span>(--bywind-theme-none);</span><br><span class="line">    <span class="attr">--bywind-shadow-theme</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">12px</span> -<span class="number">3px</span> <span class="built_in">var</span>(--bywind-theme-op);</span><br><span class="line">    <span class="attr">--bywind-shadow-blackdeep</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">16px</span> -<span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">15</span>);</span><br><span class="line">    <span class="attr">--bywind-shadow-main</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">12px</span> -<span class="number">3px</span> <span class="built_in">var</span>(--bywind-main-op);</span><br><span class="line">    <span class="attr">--bywind-shadow-blue</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">12px</span> -<span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">40</span>, <span class="number">109</span>, <span class="number">234</span>, .<span class="number">20</span>);</span><br><span class="line">    <span class="attr">--bywind-shadow-white</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">12px</span> -<span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">20</span>);</span><br><span class="line">    <span class="attr">--bywind-shadow-black</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">12px</span> <span class="number">4px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">05</span>);</span><br><span class="line">    <span class="attr">--bywind-shadow-yellow</span>: <span class="number">0px</span> <span class="number">38px</span> <span class="number">77px</span> -<span class="number">26px</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">201</span>, <span class="number">62</span>, .<span class="number">12</span>);</span><br><span class="line">    <span class="attr">--bywind-shadow-red</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">12px</span> -<span class="number">3px</span> <span class="number">#ee7d7936</span>;</span><br><span class="line">    <span class="attr">--bywind-shadow-green</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">12px</span> -<span class="number">3px</span> <span class="number">#87ee7936</span>;</span><br><span class="line">    <span class="attr">--bywind-logo-color</span>: <span class="built_in">linear-gradient</span>(<span class="number">215deg</span>, <span class="number">#4584ff</span> <span class="number">0%</span>, <span class="number">#cf0db9</span> <span class="number">100%</span>);</span><br><span class="line">    <span class="attr">--bywind-snackbar-time</span>: <span class="number">2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=light]</span> &#123;</span><br><span class="line">    <span class="attr">--bywind-theme</span>: <span class="number">#425AEF</span>;</span><br><span class="line">    <span class="attr">--bywind-theme-op</span>: <span class="number">#4259ef23</span>;</span><br><span class="line">    <span class="attr">--bywind-theme-op-deep</span>: <span class="number">#4259efdd</span>;</span><br><span class="line">    <span class="attr">--bywind-theme-none</span>: <span class="number">#4259ef01</span>;</span><br><span class="line">    <span class="attr">--bywind-blue</span>: <span class="number">#425AEF</span>;</span><br><span class="line">    <span class="attr">--bywind-red</span>: <span class="number">#f04a63</span>;</span><br><span class="line">    <span class="attr">--bywind-pink</span>: <span class="number">#FF7C7C</span>;</span><br><span class="line">    <span class="attr">--bywind-green</span>: <span class="number">#57bd6a</span>;</span><br><span class="line">    <span class="attr">--bywind-yellow</span>: <span class="number">#c28b00</span>;</span><br><span class="line">    <span class="attr">--bywind-yellow-op</span>: <span class="number">#d99c001a</span>;</span><br><span class="line">    <span class="attr">--bywind-orange</span>: <span class="number">#e38100</span>;</span><br><span class="line">    <span class="attr">--bywind-purple</span>: <span class="number">#7a60d2</span>;</span><br><span class="line">    <span class="attr">--bywind-fontcolor</span>: <span class="number">#363636</span>;</span><br><span class="line">    <span class="attr">--bywind-background</span>: <span class="number">#f7f9fe</span>;</span><br><span class="line">    <span class="attr">--bywind-reverse</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attr">--bywind-maskbg</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.6</span>);</span><br><span class="line">    <span class="attr">--bywind-maskbgdeep</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.85</span>);</span><br><span class="line">    <span class="attr">--bywind-hovertext</span>: <span class="built_in">var</span>(--bywind-main);</span><br><span class="line">    <span class="attr">--bywind-ahoverbg</span>: <span class="number">#F7F7FA</span>;</span><br><span class="line">    <span class="attr">--bywind-lighttext</span>: <span class="built_in">var</span>(--bywind-main);</span><br><span class="line">    <span class="attr">--bywind-secondtext</span>: <span class="built_in">rgba</span>(<span class="number">60</span>, <span class="number">60</span>, <span class="number">67</span>, <span class="number">0.8</span>);</span><br><span class="line">    <span class="attr">--bywind-scrollbar</span>: <span class="built_in">rgba</span>(<span class="number">60</span>, <span class="number">60</span>, <span class="number">67</span>, <span class="number">0.4</span>);</span><br><span class="line">    <span class="attr">--bywind-card-btn-bg</span>: <span class="number">#edf0f7</span>;</span><br><span class="line">    <span class="attr">--bywind-post-blockquote-bg</span>: <span class="number">#fafcff</span>;</span><br><span class="line">    <span class="attr">--bywind-post-tabs-bg</span>: <span class="number">#f2f5f8</span>;</span><br><span class="line">    <span class="attr">--bywind-secondbg</span>: <span class="number">#f1f3f8</span>;</span><br><span class="line">    <span class="attr">--bywind-shadow-nav</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">12px</span> -<span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">102</span>, <span class="number">68</span>, <span class="number">68</span>, <span class="number">0.05</span>);</span><br><span class="line">    <span class="attr">--bywind-card-bg</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attr">--bywind-card-bg-op</span>: <span class="built_in">var</span>(--bywind-black-op);</span><br><span class="line">    <span class="attr">--bywind-card-bg-none</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="attr">--bywind-shadow-lightblack</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">12px</span> -<span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">102</span>, <span class="number">68</span>, <span class="number">68</span>, <span class="number">0.00</span>);</span><br><span class="line">    <span class="attr">--bywind-shadow-light2black</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">12px</span> -<span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">102</span>, <span class="number">68</span>, <span class="number">68</span>, <span class="number">0.00</span>);</span><br><span class="line">    <span class="attr">--bywind-card-border</span>: <span class="number">#e3e8f7</span>;</span><br><span class="line">    <span class="attr">--bywind-shadow-border</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">16px</span> -<span class="number">4px</span> <span class="number">#2c2d300c</span>;</span><br><span class="line">    <span class="attr">--style-border</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--bywind-card-border);</span><br><span class="line">    <span class="attr">--style-border-always</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--bywind-card-border);</span><br><span class="line">    <span class="attr">--style-border-hover</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--bywind-main);</span><br><span class="line">    <span class="attr">--style-border-hover-always</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--bywind-main);</span><br><span class="line">    <span class="attr">--style-border-dashed</span>: <span class="number">1px</span> dashed <span class="built_in">var</span>(--bywind-theme-op);</span><br><span class="line">    <span class="attr">--style-border-forever</span>: <span class="number">2px</span> solid <span class="built_in">var</span>(--bywind-main);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=dark]</span> &#123;</span><br><span class="line">    <span class="attr">--bywind-theme</span>: <span class="number">#f2b94b</span>;</span><br><span class="line">    <span class="attr">--bywind-theme-op</span>: <span class="number">#f2b94b23</span>;</span><br><span class="line">    <span class="attr">--bywind-theme-op-deep</span>: <span class="number">#f2b94bdd</span>;</span><br><span class="line">    <span class="attr">--bywind-theme-none</span>: <span class="number">#f2b94b00</span>;</span><br><span class="line">    <span class="attr">--bywind-blue</span>: <span class="number">#0084FF</span>;</span><br><span class="line">    <span class="attr">--bywind-red</span>: <span class="number">#FF3842</span>;</span><br><span class="line">    <span class="attr">--bywind-pink</span>: <span class="number">#d44040</span>;</span><br><span class="line">    <span class="attr">--bywind-green</span>: <span class="number">#3e9f50</span>;</span><br><span class="line">    <span class="attr">--bywind-purple</span>: <span class="number">#7a60d2</span>;</span><br><span class="line">    <span class="attr">--bywind-yellow</span>: <span class="number">#ffc93e</span>;</span><br><span class="line">    <span class="attr">--bywind-yellow-op</span>: <span class="number">#ffc93e30</span>;</span><br><span class="line">    <span class="attr">--bywind-orange</span>: <span class="number">#ff953e</span>;</span><br><span class="line">    <span class="attr">--bywind-fontcolor</span>: <span class="number">#F7F7FA</span>;</span><br><span class="line">    <span class="attr">--bywind-background</span>: <span class="number">#18171d</span>;</span><br><span class="line">    <span class="attr">--bywind-reverse</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attr">--bywind-maskbg</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.6</span>);</span><br><span class="line">    <span class="attr">--bywind-maskbgdeep</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.85</span>);</span><br><span class="line">    <span class="attr">--bywind-hovertext</span>: <span class="number">#0A84FF</span>;</span><br><span class="line">    <span class="attr">--bywind-ahoverbg</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attr">--bywind-lighttext</span>: <span class="built_in">var</span>(--bywind-theme);</span><br><span class="line">    <span class="attr">--bywind-secondtext</span>: <span class="number">#a1a2b8</span>;</span><br><span class="line">    <span class="attr">--bywind-scrollbar</span>: <span class="built_in">rgba</span>(<span class="number">200</span>, <span class="number">200</span>, <span class="number">223</span>, <span class="number">0.4</span>);</span><br><span class="line">    <span class="attr">--bywind-card-btn-bg</span>: <span class="number">#30343f</span>;</span><br><span class="line">    <span class="attr">--bywind-post-blockquote-bg</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attr">--bywind-post-tabs-bg</span>: <span class="number">#121212</span>;</span><br><span class="line">    <span class="attr">--bywind-secondbg</span>: <span class="number">#30343f</span>;</span><br><span class="line">    <span class="attr">--bywind-shadow-nav</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">20px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">28</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">0.4</span>);</span><br><span class="line">    <span class="attr">--bywind-card-bg</span>: <span class="number">#1d1e22</span>;</span><br><span class="line">    <span class="attr">--bywind-card-bg-op</span>: <span class="built_in">var</span>(--bywind-white-op);</span><br><span class="line">    <span class="attr">--bywind-card-bg-none</span>: <span class="number">#1d1b2600</span>;</span><br><span class="line">    <span class="attr">--bywind-shadow-lightblack</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">12px</span> -<span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">102</span>, <span class="number">68</span>, <span class="number">68</span>, <span class="number">0.0</span>);</span><br><span class="line">    <span class="attr">--bywind-shadow-light2black</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">12px</span> -<span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">102</span>, <span class="number">68</span>, <span class="number">68</span>, <span class="number">0.0</span>);</span><br><span class="line">    <span class="attr">--bywind-card-border</span>: <span class="number">#3d3d3f</span>;</span><br><span class="line">    <span class="attr">--bywind-shadow-border</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">16px</span> -<span class="number">4px</span> <span class="number">#00000050</span>;</span><br><span class="line">    <span class="attr">--style-border</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--bywind-card-border);</span><br><span class="line">    <span class="attr">--style-border-always</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--bywind-card-border);</span><br><span class="line">    <span class="attr">--style-border-hover</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--bywind-theme);</span><br><span class="line">    <span class="attr">--style-border-hover-always</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--bywind-theme);</span><br><span class="line">    <span class="attr">--style-border-dashed</span>: <span class="number">1px</span> dashed <span class="built_in">var</span>(--bywind-theme-op);</span><br><span class="line">    <span class="attr">--style-border-forever</span>: <span class="number">2px</span> solid <span class="built_in">var</span>(--bywind-lighttext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>hexo三连即可，对于部分样式问题可以f12自取，如有问题可以评论区交流。<br><img src="/img/strive.gif"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;给大家分享下博客主页顶部推荐文章如何实现，主要参考自&lt;a href=&quot;https://blog.zhheo.com/&quot;&gt;heo&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：已于&lt;code&gt;2023.08&lt;/code&gt;做出更新&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p</summary>
      
    
    
    
    <category term="经验分享" scheme="https://blog.bywind.xyz/categories/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="Hexo" scheme="https://blog.bywind.xyz/tags/Hexo/"/>
    
    <category term="Butterfly" scheme="https://blog.bywind.xyz/tags/Butterfly/"/>
    
  </entry>
  
  <entry>
    <title>Tag-Plugins-Plus</title>
    <link href="https://blog.bywind.xyz/posts/e9cd2bbc.html"/>
    <id>https://blog.bywind.xyz/posts/e9cd2bbc.html</id>
    <published>2022-12-08T09:39:18.000Z</published>
    <updated>2023-07-24T01:59:19.925Z</updated>
    
    <content type="html"><![CDATA[<p>本文参考自</p><div calss='bywind-tag-link'><a class="tag-Link" target="_blank" href="http://akilar.top/posts/615e2dec/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/akilar.top/posts/615e2dec/.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">外挂标签</div>            <div class="tag-link-sitename">Akilarの糖果屋</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><h2 id="行内文本样式-text"><a href="#行内文本样式-text" class="headerlink" title="行内文本样式 text"></a>行内文本样式 text</h2><div class="tabs" id="text"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#text-1">标签语法</button></li><li class="tab"><button type="button" data-href="#text-2">示例源码</button></li><li class="tab active"><button type="button" data-href="#text-3">渲染展示</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="text-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="text-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="text-3"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="分栏-tab"><a href="#分栏-tab" class="headerlink" title="分栏 tab"></a>分栏 tab</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab active"><button type="button" data-href="#分栏-4">渲染展示</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="分栏-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>1.Unique name :</p><ul><li><p>选项卡块标签的唯一名称，不带逗号。</p></li><li><p>将在#id中用作每个标签及其索引号的前缀。</p></li><li><p>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</p></li><li><p>仅当前帖子&#x2F;页面的URL必须是唯一的！</p></li></ul><p>2.[index]:</p><ul><li><p>活动选项卡的索引号。</p></li><li><p>如果未指定，将选择第一个标签（1）。</p></li><li><p>如果index为-1，则不会选择任何选项卡。</p></li><li><p>可选参数。</p></li></ul><p>3.[Tab caption]:</p><ul><li><p>当前选项卡的标题。</p></li><li><p>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</p></li><li><p>如果未指定标题，但指定了图标，则标题将为空。</p></li><li><p>可选参数。</p></li></ul><p>4.[@icon]:</p><ul><li><p>FontAwesome图标名称（全名，看起来像“ fas fa-font”）</p></li><li><p>可以指定带空格或不带空格；</p></li><li><p>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</p></li><li><p>可选参数。</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="分栏-4"><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="引用-note"><a href="#引用-note" class="headerlink" title="引用 note"></a>引用 note</h2><div class="tabs" id="引用note"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#引用note-1">标签语法</button></li><li class="tab"><button type="button" data-href="#引用note-2">配置参数</button></li><li class="tab"><button type="button" data-href="#引用note-3">示例源码</button></li><li class="tab active"><button type="button" data-href="#引用note-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="引用note-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="引用note-2"><table><thead><tr><th align="center">参数</th><th align="center">用法</th></tr></thead><tbody><tr><td align="center">class</td><td align="center">【可选】标识，不同的标识有不同的配色 （ default &#x2F;primary&#x2F;success &#x2F;info&#x2F;warning &#x2F;danger ）</td></tr><tr><td align="center">no-icon</td><td align="center">【可选】不显示 icon</td></tr><tr><td align="center">style</td><td align="center">【可选】可以覆盖配置中的 style （simple&#x2F;modern&#x2F;flat&#x2F;disabled）</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="引用note-3"><details class="folding-tag" blue><summary> 方法一 </summary>              <div class='content'>              <ol><li><p><code>simple</code>样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>modern</code>样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>flat</code>样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>disabled</code>样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>no-icon</code>样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li></ol>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="引用note-4"><details class="folding-tag" blue><summary> 方法一 </summary>              <div class='content'>              <ol><li><code>simple</code>样式</li></ol><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div><ol start="2"><li><code>modern</code>样式</li></ol><div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div><ol start="3"><li><code>flat</code>样式</li></ol><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><ol start="4"><li><code>disabled</code>样式</li></ol><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div><ol start="5"><li><code>no-icon</code>样式</li></ol><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="复选列表-checkbox"><a href="#复选列表-checkbox" class="headerlink" title="复选列表 checkbox"></a>复选列表 checkbox</h2><div class="tabs" id="checkbox"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#checkbox-1">标签语法</button></li><li class="tab"><button type="button" data-href="#checkbox-2">配置参数</button></li><li class="tab"><button type="button" data-href="#checkbox-3">示例源码</button></li><li class="tab active"><button type="button" data-href="#checkbox-4">渲染展示</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="checkbox-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="checkbox-2"><ol><li>样式: plus, minus, times</li><li>选中状态: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="checkbox-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="checkbox-4"><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="单选列表-radio"><a href="#单选列表-radio" class="headerlink" title="单选列表 radio"></a>单选列表 radio</h2><div class="tabs" id="radio"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#radio-1">标签语法</button></li><li class="tab"><button type="button" data-href="#radio-2">配置参数</button></li><li class="tab"><button type="button" data-href="#radio-3">示例源码</button></li><li class="tab active"><button type="button" data-href="#radio-4">渲染展示</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="radio-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="radio-2"><ol><li>选中状态: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="radio-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="radio-4"><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="时间轴-timeline"><a href="#时间轴-timeline" class="headerlink" title="时间轴 timeline"></a>时间轴 timeline</h2><div class="tabs" id="时间轴timeline"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#时间轴timeline-1">标签语法</button></li><li class="tab"><button type="button" data-href="#时间轴timeline-2">配置参数</button></li><li class="tab"><button type="button" data-href="#时间轴timeline-3">示例源码</button></li><li class="tab active"><button type="button" data-href="#时间轴timeline-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="时间轴timeline-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选）[,color] %&#125;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="时间轴timeline-2"><ol><li><code>title</code>: 标题&#x2F;时间线</li><li><code>color</code>: timeline颜色:default(留空) &#x2F; blue &#x2F; pink &#x2F; red &#x2F; purple &#x2F; orange &#x2F; green</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="时间轴timeline-3"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间轴样式,blue %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-07-24 [2.6.6 -&gt; 3.0](https://github.com/volantis-x/hexo-theme-volantis/releases) --&gt;</span><br><span class="line"></span><br><span class="line">1. 如果有 `hexo-lazyload-image` 插件，需要删除并重新安装最新版本，设置 `lazyload.isSPA: true`。</span><br><span class="line">2. 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 `use_cdn: true` 则需要删除。</span><br><span class="line">3. 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line">4. 2.x 版本的置顶 `top: true` 改为了 `pin: true`，并且同样适用于 `layout: page` 的页面。</span><br><span class="line">5. 如果使用了 `hexo-offline` 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-05-15 [2.6.3 -&gt; 2.6.6](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6) --&gt;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-04-20 [2.6.2 -&gt; 2.6.3](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --&gt;</span><br><span class="line"></span><br><span class="line">1. 全局搜索 `seotitle` 并替换为 `seo_title`。</span><br><span class="line">2. group 组件的索引规则有变，使用 group 组件的文章内，`group: group_name` 对应的组件名必须是 `group_name`。</span><br><span class="line">2. group 组件的列表名优先显示文章的 `short_title` 其次是 `title`。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="时间轴timeline-4"><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></div></div><div class='timeline-item-content'><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div></div><div class='timeline-item-content'><p>不需要额外处理。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></div></div><div class='timeline-item-content'><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="折叠框-folding"><a href="#折叠框-folding" class="headerlink" title="折叠框 folding"></a>折叠框 folding</h2><div class="tabs" id="折叠框folding"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#折叠框folding-1">标签语法</button></li><li class="tab"><button type="button" data-href="#折叠框folding-2">配置参数</button></li><li class="tab"><button type="button" data-href="#折叠框folding-3">示例源码</button></li><li class="tab active"><button type="button" data-href="#折叠框folding-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="折叠框folding-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/image-20221203162942063.webp)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="折叠框folding-2"><ol><li><code>颜色</code>：blue, cyan, green, yellow, red</li><li><code>状态</code>：状态填写 open 代表默认打开。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="折叠框folding-3"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/image-20221203162942063.webp)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line">- haha</span><br><span class="line">- hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="折叠框folding-4"><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/image-20221203162942063.webp"></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha</p>              </div>            </details>              </div>            </details>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="链接卡片-link"><a href="#链接卡片-link" class="headerlink" title="链接卡片 link"></a>链接卡片 link</h2><div class="tabs" id="链接卡片link"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#链接卡片link-1">标签语法</button></li><li class="tab"><button type="button" data-href="#链接卡片link-2">配置参数</button></li><li class="tab"><button type="button" data-href="#链接卡片link-3">示例源码</button></li><li class="tab active"><button type="button" data-href="#链接卡片link-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="链接卡片link-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link [title],[sitename],[link] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="链接卡片link-2"><p><code>title</code>: 应用外链标题</p><p><code>text</code>: 引用外链名称</p><p><code>link</code>: 外链地址</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="链接卡片link-3"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 获取网站的Favicon图标并显示在你的网页上,owen0o0,https://github.com/owen0o0/getFavicon %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="链接卡片link-4"><div calss='bywind-tag-link'><a class="tag-Link" target="_blank" href="https://github.com/owen0o0/getFavicon">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/github.com/owen0o0/getFavicon.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">获取网站的Favicon图标并显示在你的网页上</div>            <div class="tag-link-sitename">owen0o0</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="注释-notation"><a href="#注释-notation" class="headerlink" title="注释 notation"></a>注释 notation</h2><div class="tabs" id="注释notation"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#注释notation-1">标签语法</button></li><li class="tab"><button type="button" data-href="#注释notation-2">配置参数</button></li><li class="tab"><button type="button" data-href="#注释notation-3">示例源码</button></li><li class="tab active"><button type="button" data-href="#注释notation-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="注释notation-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota [label] , [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释notation-2"><ol><li><code>label</code>: 注释词汇</li><li><code>text</code>: 悬停显示的注解内容</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="注释notation-3"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="注释notation-4"><p><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="音频-audio"><a href="#音频-audio" class="headerlink" title="音频 audio"></a>音频 audio</h2><div class="tabs" id="audio"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#audio-1">标签语法</button></li><li class="tab"><button type="button" data-href="#audio-2">示例源码</button></li><li class="tab active"><button type="button" data-href="#audio-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="audio-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="audio-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="audio-3"><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="视频-video"><a href="#视频-video" class="headerlink" title="视频 video"></a>视频 video</h2><div class="tabs" id="video"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#video-1">标签语法</button></li><li class="tab"><button type="button" data-href="#video-2">参数配置</button></li><li class="tab"><button type="button" data-href="#video-3">示例源码</button></li><li class="tab active"><button type="button" data-href="#video-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="video-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="video-2"><ol><li>对其方向：left, center, right</li><li>列数：逗号后面直接写列数，支持 1 ～ 4 列。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="video-3"><ol><li>100%宽度<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure></li><li>50%宽度<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% endvideos %&#125;</span></span><br></pre></td></tr></table></figure></li><li>25%宽度<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% endvideos %&#125;</span></span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="video-4"><ol><li>100%宽度</li></ol><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><ol start="2"><li>50%宽度</li></ol><div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><ol start="3"><li>25%宽度</li></ol><div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文参考自&lt;/p&gt;
&lt;div calss=&#39;bywind-tag-link&#39;&gt;&lt;a class=&quot;tag-Link&quot; target=&quot;_blank&quot; href=&quot;http://akilar.top/posts/615e2dec/&quot;&gt;
    &lt;div class=&quot;tag-</summary>
      
    
    
    
    <category term="Hexo魔改" scheme="https://blog.bywind.xyz/categories/Hexo%E9%AD%94%E6%94%B9/"/>
    
    
    <category term="Hexo" scheme="https://blog.bywind.xyz/tags/Hexo/"/>
    
    <category term="Butterfly" scheme="https://blog.bywind.xyz/tags/Butterfly/"/>
    
    <category term="主题美化" scheme="https://blog.bywind.xyz/tags/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>免费图床搭建</title>
    <link href="https://blog.bywind.xyz/posts/413cda76.html"/>
    <id>https://blog.bywind.xyz/posts/413cda76.html</id>
    <published>2022-12-08T05:03:17.000Z</published>
    <updated>2023-07-22T15:56:23.755Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>使用 Github + Vercel + PicGo 搭建个人图床</p></blockquote><h2 id="创建Github仓库"><a href="#创建Github仓库" class="headerlink" title="创建Github仓库"></a>创建Github仓库</h2><div calss='bywind-tag-link'><a class="tag-Link" target="_blank" href="https://github.com">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/github.com.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">GitHub官网</div>            <div class="tag-link-sitename">GitHub: Let’s build from here </div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221208120213621.png" alt="image-20221208120213592"></p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221208120934368.png" alt="image-20221208120934320"></p><h2 id="Vercel部署"><a href="#Vercel部署" class="headerlink" title="Vercel部署"></a>Vercel部署</h2><div calss='bywind-tag-link'><a class="tag-Link" target="_blank" href="https://vercel.com">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/vercel.com.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">Vercel官网</div>            <div class="tag-link-sitename">站点托管平台 </div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><ol><li><p>进入Vercel官网注册账号，登录后进入<a href="https://vercel.com/dashboard">Vercel控制台</a>，添加新项目</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221208121837107.png" alt="image-20221208121837062"></p></li><li><p>选择Github，导入刚刚创建的Github仓库</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221208122023758.png" alt="image-20221208122023680"></p></li><li><p>进入该项目控制台后，选择右上角的 <code>View Domains</code> 添加新的域名</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221208122747202.png" alt="image-20221208122747160"></p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221208122939777.png" alt="image-20221208122939747"></p></li><li><p>在对应的域名解析控制台添加对应解析</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221208123139719.png" alt="image-20221208123139682"></p></li></ol><h2 id="PicGo配置"><a href="#PicGo配置" class="headerlink" title="PicGo配置"></a>PicGo配置</h2><blockquote><p> 没有下载PicGo，可以到<a href="https://github.com/Molunerfinn/PicGo/releases">PicGo官网</a>进行下载</p></blockquote><h3 id="获取Token"><a href="#获取Token" class="headerlink" title="获取Token"></a>获取Token</h3><p>打开Github的<code>setting</code>页面，进入<code>Developer settings -&gt; Personal access tokens</code>，点击<code>generate new token</code>；</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221208124832964.png" alt="image-20221208124832933"></p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221208125142123.png" alt="image-20221208125142085"></p><p>填写以下信息后进行创建，之后保存好生成的token（只展示一次）</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221208125430318.png" alt="image-20221208125430252"></p><h3 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h3><p>打开 图床设置 -&gt; Github 图床进行配置</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221208130019004.png" alt="image-20221208130018943"></p><p>至此，图床就搭建完成啦！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;使用 Github + Vercel + PicGo 搭建个人图床&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;创建Github仓库&quot;&gt;&lt;a href=&quot;#创建Github仓库&quot; class=&quot;headerlink&quot; title=&quot;创建Gi</summary>
      
    
    
    
    <category term="经验分享" scheme="https://blog.bywind.xyz/categories/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="图床" scheme="https://blog.bywind.xyz/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络</title>
    <link href="https://blog.bywind.xyz/posts/e255a10a.html"/>
    <id>https://blog.bywind.xyz/posts/e255a10a.html</id>
    <published>2022-10-28T13:00:05.000Z</published>
    <updated>2023-07-22T15:35:36.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><h2 id="IP数据报格式"><a href="#IP数据报格式" class="headerlink" title="IP数据报格式"></a>IP数据报格式</h2><p>注释：</p><table><thead><tr><th>名称</th><th>注释</th><th>大小</th></tr></thead><tbody><tr><td>版本 Version</td><td>ipv4或者ipv6</td><td>4位</td></tr><tr><td>首部长度 IHL</td><td>此处数值再乘以4才是真正大小，同时因为IP数据报固定长度为20字节，所以此处最小值为5，即二进制的0101</td><td>4位</td></tr><tr><td>区分服务 DSCP + ECN</td><td>希望获得哪种服务，用的比较少</td><td>8位</td></tr><tr><td>总长度 Total Length</td><td>首部+数据的长度，最大为2^16-1&#x3D;65535</td><td>16位</td></tr><tr><td>标识 Identification</td><td>用来表示是哪一个数据报的分片，不同的分片标识各不相同</td><td>8位</td></tr><tr><td>标志 Flags</td><td>用来表示是否分片和分片是否结束</td><td>3位，但实际有用的只有后两位</td></tr><tr><td>片偏移 Fragment Offset</td><td>用来标记分片之后，该分片在原来的数据报的位置，以8字节为单位</td><td>13位</td></tr><tr><td>生存时间 Time To Live</td><td>即TTL，没经过一个路由器TTL-1,0时自动放弃，根据系统不同默认的TTL不同</td><td>8位</td></tr><tr><td>协议 Protocol</td><td>用来标记协议名的字段值，如TCP,UDP,ICMP等等</td><td>8位</td></tr><tr><td>首部检验和 Header Checksum</td><td>检验首部的字段是否出错，出错就丢弃此数据报</td><td></td></tr><tr><td>源地址 Source IP Address</td><td>发送方ip地址</td><td>32位</td></tr><tr><td>目的地址 Destination IP Address</td><td>接收方ip地址</td><td>32位</td></tr><tr><td>可选字段 Options</td><td>用来排错等安全检测</td><td>未知，可在0-40位之间</td></tr><tr><td>填充</td><td>将数据报对齐成4字节的整数倍，数值全部为0</td><td>未知，根据可选字段来定</td></tr></tbody></table><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221018222212684.png" alt="image-20221018222212590"></p><h2 id="网际协议IP"><a href="#网际协议IP" class="headerlink" title="网际协议IP"></a>网际协议IP</h2><h3 id="IPv4地址"><a href="#IPv4地址" class="headerlink" title="IPv4地址"></a>IPv4地址</h3><h4 id="分类的IP地址"><a href="#分类的IP地址" class="headerlink" title="分类的IP地址"></a>分类的IP地址</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221018223359488.png" alt="image-20221018223359434"></p><h4 id="特殊IP地址"><a href="#特殊IP地址" class="headerlink" title="特殊IP地址"></a>特殊IP地址</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221025232429835.png" alt="image-20221025232429758"></p><h4 id="私有IP地址"><a href="#私有IP地址" class="headerlink" title="私有IP地址"></a>私有IP地址</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221025232500264.png" alt="私有IP地址"></p><p>解释：<br>为什么A类最大是126.xxx.xxx.xxx？<br>因为网络号最开始第一位是0，一共八位，所以二进制表示位0xxxxxxx，最大就是2^7-1&#x3D;127，但是因为127.xxx.xxx.xxx是特殊ip地址，所以将其去掉<br>为什么B类最大是191.255.xxx.xxx？<br>因为网络号最开始第一位是10，一共八位，所以二进制表示位10xxxxxx，最大就是10111111&#x3D;191，最小就是10000000&#x3D;128，无特殊ip地址<br>为什么C类最大是223.255.xxx.xxx？<br>因为网络号最开始第一位是110，一共八位，所以二进制表示位110xxxxx，最大就是11011111&#x3D;223，最小就是10000000&#x3D;192，无特殊ip地址</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221019152444557.png" alt="在这里插入图片描述"></p><h3 id="点分十进制计法"><a href="#点分十进制计法" class="headerlink" title="点分十进制计法"></a>点分十进制计法</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221025221922845.png" alt="image-20221012094324686"></p><p>32&#x2F;4&#x3D;8，所以点分十进制之后每部分有8个二进制数字表示，所以最大是255</p><h3 id="网络地址转换NAT"><a href="#网络地址转换NAT" class="headerlink" title="网络地址转换NAT"></a>网络地址转换NAT</h3><p>网络地址转换NAT (Network Address Translation)：在专用网连接到因特网的路由器上安装NAT软件，安装了NAT软件的路由器叫NAT路由器，它至少有一个有效的外部全球IP地址。</p><ul><li><p>连接内网和外网，就是找个代理的用它的ip地址与外面收发数据</p></li><li><p>所有使用本地地址的主机在和外界通信时，都要在 NAT 路由器上将其本地地址转换成全球 IP 地址，才能和互联网连接</p></li></ul><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221025231858039.png" alt="image-20221025231857927"></p><h2 id="划分子网和构造超网"><a href="#划分子网和构造超网" class="headerlink" title="划分子网和构造超网"></a>划分子网和构造超网</h2><h3 id="划分子网"><a href="#划分子网" class="headerlink" title="划分子网"></a>划分子网</h3><p>分类的IP地址的弱点</p><ol><li>lP地址空间的利用率有时很低。</li><li>两级IP地址不够灵活。</li></ol><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221025225547197.png" alt="image-20221025225547113"></p><h3 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h3><p>主机部分所对应的子网掩码均为0，其余部分对应的部分为1</p><p>子网掩码与IP地址逐位相与，就得到子网网络地址。</p><blockquote><p>【例题】</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221025230106083.png" alt="image-20221025230106028"></p><p>【解析】</p><p>子网掩码转为二进制为<code>11111111.11111111.11111100.00000000</code>，IP地址与其相与得该主机所在的子网号<code>180.80.76.0</code>，因为为广播分组，只需让主机位全为1即可，所以结果为<code>180.80.79.255</code>，为D项</p></blockquote><h3 id="无分类编址CIDR"><a href="#无分类编址CIDR" class="headerlink" title="无分类编址CIDR"></a>无分类编址CIDR</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221025224643311.png" alt="image-20221025224643170"></p><h3 id="构造超网"><a href="#构造超网" class="headerlink" title="构造超网"></a>构造超网</h3><p>将多个子网聚合成一个较大的子网，叫做构成超网，或路由聚合。</p><p><strong>最长前缀匹配</strong></p><p>使用CIDR时，查找路由表可能得到几个匹配结果，应选择具有最长网络前缀的路由。前缀越长，地址块越小路由越具体。</p><blockquote><p>【例题】</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221025230508909.png" alt="image-20221025230508857"></p><p>【解析】</p><p>子网掩码转为二进制为<code>11111111.11111111.11111111.11111000</code>，前五位是作为子网号的，后三位是作为主机号的。</p><p>最大子网个数即为$$2^5$$，最大可分配地址个数为$$2^3-2$$（去掉全0和全1的），选B</p></blockquote><h2 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h2><h3 id="IPv6地址表示形式"><a href="#IPv6地址表示形式" class="headerlink" title="IPv6地址表示形式"></a>IPv6地址表示形式</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221025233005933.png" alt="在这里插入图片描述"></p><h3 id="IPv6数据报格式"><a href="#IPv6数据报格式" class="headerlink" title="IPv6数据报格式"></a>IPv6数据报格式</h3><table><thead><tr><th>名称</th><th>作用</th><th>位数</th></tr></thead><tbody><tr><td>版本 Version</td><td>知名协议版本，此处因为是ipv6所以总是6</td><td>4位</td></tr><tr><td>优先级 Traffic Class</td><td>又来区分数据报的类型和优先级</td><td>8位</td></tr><tr><td>流标签 Flow Label</td><td>和ipv4标识某个数据报分片不同，这是对于一整个数据报流的标记</td><td>19位</td></tr><tr><td>有效载荷长度 Payload Length</td><td>指的是扩展首部+数据部分的大小，和ipv4的总长度和首部长度都不同，ipv6的首部长度是固定的40字节</td><td>16位</td></tr><tr><td>下一个首部 Next Header</td><td>基本首部的下一个首部指的是有效载荷里标记的的扩展首部，有效载荷里的扩展首部再指向有效载荷里标记的的扩展首部，直至最后指向数据</td><td>8位</td></tr><tr><td>跳数限制 Hop Limit</td><td>基本相当于ipv4当中的TTL，每到一个路由器-1.减到0时丢弃</td><td>7位</td></tr><tr><td>源地址 Source Address</td><td>发送方ipv6地址</td><td>128位</td></tr><tr><td>目标地址 Destination Address</td><td>接收方ipv6地址</td><td>128位</td></tr></tbody></table><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221025233231842.png" alt="image-20221025233231743"></p><h3 id="IPv4和IPv6的区别"><a href="#IPv4和IPv6的区别" class="headerlink" title="IPv4和IPv6的区别"></a>IPv4和IPv6的区别</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221025233040930.png" alt="在这里插入图片描述"></p><h3 id="IPv4向IPv6的过渡"><a href="#IPv4向IPv6的过渡" class="headerlink" title="IPv4向IPv6的过渡"></a>IPv4向IPv6的过渡</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221025233637483.png" alt="image-20221025233637325"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;网络层&quot;&gt;&lt;a href=&quot;#网络层&quot; class=&quot;headerlink&quot; title=&quot;网络层&quot;&gt;&lt;/a&gt;网络层&lt;/h1&gt;&lt;h2 id=&quot;IP数据报格式&quot;&gt;&lt;a href=&quot;#IP数据报格式&quot; class=&quot;headerlink&quot; title=&quot;IP数据报格式</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://blog.bywind.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="计算机基础" scheme="https://blog.bywind.xyz/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理</title>
    <link href="https://blog.bywind.xyz/posts/8d4b7ae1.html"/>
    <id>https://blog.bywind.xyz/posts/8d4b7ae1.html</id>
    <published>2022-10-22T08:41:25.000Z</published>
    <updated>2023-07-22T15:37:35.345Z</updated>
    
    <content type="html"><![CDATA[<h1 id="期末考试"><a href="#期末考试" class="headerlink" title="期末考试"></a>期末考试</h1><p>半导体存储芯片结构图（考大题画图）</p><p>更多可<kbd>ctrl</kbd> + <kbd>f</kbd> 搜索<emp>期末考</emp>查看相关题目</p><h1 id="第一章：计算机系统概述"><a href="#第一章：计算机系统概述" class="headerlink" title="第一章：计算机系统概述"></a>第一章：计算机系统概述</h1><h2 id="计算机系统简介"><a href="#计算机系统简介" class="headerlink" title="计算机系统简介"></a>计算机系统简介</h2><h3 id="计算机软硬件概念"><a href="#计算机软硬件概念" class="headerlink" title="计算机软硬件概念"></a>计算机软硬件概念</h3><p>从整体上看，计算机系统主要由<strong>软件和硬件</strong>两部分组成。计算机组成原理主要是来研究计算机硬件。</p><p><strong>硬件</strong>：计算机的实体部分，由看得见摸得着的各种电子元器件，各类光、点、机设备的事务组成，如主机、外部设备<br><strong>软件</strong>：由人们事先编制好的具有特殊功能的程序组成，通常把这类程序寄寓于各类媒体（如RAM、ROM、磁带、磁盘、光盘等）</p><h2 id="计算机基本组成"><a href="#计算机基本组成" class="headerlink" title="计算机基本组成"></a>计算机基本组成</h2><h3 id="冯诺依曼计算机特点"><a href="#冯诺依曼计算机特点" class="headerlink" title="冯诺依曼计算机特点"></a>冯诺依曼计算机特点</h3><blockquote><p>1）计算机由<strong>运算器、存储器、控制器、输入设备和输出设备</strong>组成<br>2）指令和数据以同等地位存放于存储器中，并可按地址访问<br>3）指令和数据用二进制表示<br>4）指令由操作码和地址码组成，操作码表示操作的性质，地址码表示操作时在存储器中的位置<br>5）指令在存储器内按顺序存放。通常,指令是顺序执行的,在特定条件下,可根据运算结果或根据设定的条件改变执行顺序。<br>6）机器以运算器为中心，输入输出设备与存储器间的数据传输通过运算器完成</p></blockquote><h3 id="计算机硬件框图"><a href="#计算机硬件框图" class="headerlink" title="计算机硬件框图"></a>计算机硬件框图</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221022233440097.png" alt="在这里插入图片描述"></p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221022233450461.png" alt="在这里插入图片描述"></p><h3 id="计算机的工作步骤"><a href="#计算机的工作步骤" class="headerlink" title="计算机的工作步骤"></a>计算机的工作步骤</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221023155100538.jpg" alt="img"></p><h2 id="计算机性能指标"><a href="#计算机性能指标" class="headerlink" title="计算机性能指标"></a>计算机性能指标</h2><h3 id="机器字长"><a href="#机器字长" class="headerlink" title="机器字长"></a>机器字长</h3><p>计算机的位数（机器字长），表示计算机进行一次整数运算(即定点整数运算)所能处理的二进制数据的位数。计算机字长通常选定为字节(8位)的整数倍，通常是2,4,8倍。不同的计算机，字节可能不同</p><blockquote><p>机器字长、指令字长、存储字长的区别和联系是什么？</p><ul><li><p><strong>机器字长</strong>：计算机能直接处理的二进制数据的位数，机器字长<strong>一般等于内部寄存器的大小</strong>，它决定了<strong>计算机的运算精度</strong>。</p></li><li><p>指令字长：一个指令字中包含的二进制代码的位数。</p></li><li><p>存储字长：一个存储单元存储的二进制代码的长度。等于MDR的位数， 它们都必须是字节的整数倍。</p></li><li><p>数据字长：数据总线一次能传送信息的位数，它可以不等于MDR的位数。</p><p>指令字长一般取存储字长的整数倍，若指令字长等于存储字长的2倍，则需要2次访存来取出一条指令，因此取指周期为机器周期的2倍；若指令字长等于存储字长，则取指周期等于机器周期。</p><p>早期的计算机存储字长一般和机器的指令字长与数据字长相等，因此访问一次主存便可取出一条指令或一个数据。随着计算机的发展，指令字长可变，数据字长也可变，但它们必须都是字节的整数倍。</p><p>请注意64位操作系统是指特别为64位架构的计算机而设计的操作系统，它能够利用64位处理器的优势。但64位机器既可以使用64位操作系统，又可以使用32位操作系统。而32位处理器是无法使用64位操作系统的。</p></li></ul></blockquote><h3 id="主存容量"><a href="#主存容量" class="headerlink" title="主存容量"></a>主存容量</h3><p>MAR的位数反映存储单元的个数，如MAR为16位，表示存储单元为$$2^{16}$$&#x3D; 64K;若MDR为32位，则存储容量为$$2^{16}$$x32</p><h3 id="运算速度"><a href="#运算速度" class="headerlink" title="运算速度"></a>运算速度</h3><p>早期使用普通法（即完成一次加法或乘法所需要的时间）衡量运算速度。后来用<strong>吉普森法</strong>衡量。现代用单位时间内执行指令的条数来衡量，以MIPS（百万条指令每秒）为单位。也可用CPI（执行一条指令所需要的时钟周期）或FLOPS（每秒浮点运算次数）来衡量运算速度。</p><blockquote><p><strong>CPU时钟周期</strong>：通常为节拍脉冲或T周期，即主频的倒数，它是CPU中最小的时间单位，每个动作至少需要1个时钟周期。</p><p><strong>吞吐量</strong>：指系统在单位时间内处理请求的数量 ；从用户观点看，它是评价计算机系统性能的综合参数。</p><p><strong>响应时间</strong>：指从用户向计算机发送一个请求，到系统对该请求做出响应并获得所需结构的等待时间</p></blockquote><p><strong>【例题1】</strong>（期末考）</p><p>画出计算机硬件组成框图，说明各部件的作用及计算机硬件的主要技术指标</p><blockquote><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221023153859866.jpg" alt="img"></p><p>CU控制器：控制整个计算机系统以及资源的分配和调度。<br>ALU运算器：进行算数运算和逻辑运算，用来处理数据信息<br>存储器：计算机的存储部件，用来存储程序和数据。分为主存和辅存，CPU直接访问储存<br>输入设备：将程序和数据以计算机能识别和接受的信息形式输入计算机<br>输出设备：将计算机处理得到的结果以人所能接受的形式或其他系统所要求的信息形式输出</p><p>硬件的主要技术指标：</p><p>(1) 机器字长：指 CPU ⼀次能处理数据的位数，通常与 CPU 的寄存器位数有关<br>(2) 存储容量：包括主存容量和辅存容量，存放⼆进制代码的总数＝存储单元个数×存储字长<br>(3) 运算速度：主频、Gibson 法、MIPS 每秒执⾏百万条指令、CPI 执⾏⼀条指令所需时钟周期数、FLOPS 每秒浮点运算次数</p></blockquote><p><strong>【例题2】</strong>（期末考）</p><p>解释下列概念：主机、CPU、主存、存储单元、存储元件、存储基元、存储元、存储字、存储字长、存储容量、机器字长、指令字长。</p><blockquote><ol><li>主机：是计算机硬件的组成部分，由cpu和主存储构成。</li><li>CPU：中央处理器，是计算机硬件的核心部件，由运算器和控制器组成；</li><li>主存：计算机中存放正在运⾏的程序和数据的存储器，为计算机的主要⼯作存储器，可随机存取；由存储体、各种逻辑部件及控制电路组成。</li><li>存储单元：可存放一个机器字并具有特定存储地址的存储单位。</li><li>存储元件：存储⼀位⼆进制信息的物理元件，是存储器中最⼩的存储单位，⼜叫存储基元或存储元，不能单独存取。</li><li>存储基元：就是存储元件</li><li>存储元：就是存储元件</li><li>存储字：⼀个存储单元所存⼆进制代码的逻辑单位。</li><li>存储字长：⼀个存储单元所存⼆进制代码的位数。</li><li>存储容量：存储器中可存⼆进制代码的总量;(通常主、辅存容量分开描述)</li><li>机器字长：指CPU⼀次能处理的⼆进制数据的位数，通常与CPU的寄存器位数有关。</li><li>指令字长：⼀条指令的⼆进制代码位数。</li></ol></blockquote><p><strong>【例题3】</strong>（期末考）</p><p>解释下列英⽂代号： CPU、PC、IR、CU、ALU、ACC、MQ、X、MAR、MDR、I&#x2F;O、MIPS、CPI、FLOPS。</p><blockquote><ol><li>CPU：中央处理机(器)，是计算机硬件的核⼼部件，主要由运算器和控制器组成。</li><li>PC：程序计数器，其功能是存放当前欲执⾏指令的地址，并可⾃动计数形成下⼀条指令地址。</li><li>IR：指令寄存器，其功能是存放当前正在执⾏的指令。</li><li>CU：控制单元(部件)，为控制器的核⼼部件，其功能是产⽣微操作命令序列。</li><li>ALU：算术逻辑运算单元，为运算器的核⼼部件，其功能是进⾏算术、逻辑运算。</li><li>ACC：累加器，是运算器中既能存放运算前的操作数，⼜能存放运算结果的寄存器。</li><li>MQ：乘商寄存器，乘法运算时存放乘数、除法时存放商的寄存器。</li><li>X：在此表⽰操作数寄存器，即运算器中⼯作寄存器之⼀，⽤来存放操作数;</li><li>MAR：存储器地址寄存器，在主存中⽤来存放欲访问的存储单元的地址。</li><li>MDR：存储器数据缓冲寄存器，在主存中⽤来存放从某单元读出、或要写⼊某存储单元的数据。</li><li>I&#x2F;O：输⼊&#x2F;输出设备，为输⼊设备和输出设备的总称，⽤于计算机内部和外界信息的转换与传送。</li><li>MIPS：每秒执⾏百万条指令数，为计算机运算速度指标的⼀种计量单位。</li><li>CPI：指执行一次所需要的时间，是一个平均值。</li><li>FLOPS： 浮点运算次数每秒</li></ol></blockquote><h1 id="第二章：计算机的发展及应用"><a href="#第二章：计算机的发展及应用" class="headerlink" title="第二章：计算机的发展及应用"></a>第二章：计算机的发展及应用</h1><h2 id="计算机发展历程"><a href="#计算机发展历程" class="headerlink" title="计算机发展历程"></a>计算机发展历程</h2><h3 id="计算机硬件的发展"><a href="#计算机硬件的发展" class="headerlink" title="计算机硬件的发展"></a>计算机硬件的发展</h3><ul><li>第一代计算机：(使用电子管)，</li><li>第二代计算机：(使用晶体管)，</li><li>第三代计算机：(使用较小规模的集成)，</li><li>第四代计算机：(使用较大规模的集成)，</li></ul><p>已经经历了4代，计算机的速度越来越快，并且体积变得越来越小。<br>发展趋势：更微型、多用途；更巨型、超高速</p><blockquote><p>晶体管之父：肖克利（1956年诺贝尔物理学奖得主）</p><p>1957年，”八叛徒”创立了仙童半导体<br>1959年，仙童半导体发明了“集成电路”<br>1968年，摩尔离开仙童，创立intel<br>1969年，仙童销售部负责人桑德斯离开仙童，创立AMD</p></blockquote><p>摩尔定律，集成电路上的晶体管数量每18月就会翻一翻，所以每18月计算机的处理效率就会提高一倍。</p><h3 id="计算机软件的发展"><a href="#计算机软件的发展" class="headerlink" title="计算机软件的发展"></a>计算机软件的发展</h3><p>计算机软件技术的发展，促进计算机系统的发展。</p><p>计算机语言的发展经历了面向机器的机器语言和汇编语言、面向问题的高级语言。其中高级语言的发展真正促进了软件的发展，它经历了从科学计算和工程计算的 FORTRAN、<strong>结构化程序设计的 PASCAL</strong>到<strong>面向对象的C++和适应网络环境的Java</strong>。</p><p>同时，直接影响计算机系统性能提升的各种系统软件也有了长足的发展，特别是操作系统，如 Windows、UNIX、 Linux等。</p><h2 id="计算机的应用"><a href="#计算机的应用" class="headerlink" title="计算机的应用"></a>计算机的应用</h2><ul><li>科学计算和数据处理</li><li>工业控制和实时控制</li><li>网络技术<ol><li>电子商务</li><li>网络教育</li><li>敏捷制造</li></ol></li><li>虚拟现实</li><li>办公自动化和管理信息系统</li><li>CAD&#x2F;CAM&#x2F;CIMS</li><li>多媒体技术</li><li>人工智能</li></ul><h2 id="计算机的展望"><a href="#计算机的展望" class="headerlink" title="计算机的展望"></a>计算机的展望</h2><ol><li>计算机具有类似人脑的一些超级智能功能，要求计算机的速度达1015&#x2F;秒</li><li>芯片集成度的提高受以下三方面的限制<ul><li>芯片集成度受物理极限的制约</li><li>按几何级数递增的制作成本</li><li>芯片的功耗、散热、线延迟</li></ul></li><li>替代传统的硅芯片<ul><li>光计算机</li><li>DNA生物计算机</li><li>量子计算机</li></ul></li></ol><h1 id="第三章：系统总线"><a href="#第三章：系统总线" class="headerlink" title="第三章：系统总线"></a>第三章：系统总线</h1><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221022154434523.png" alt="在这里插入图片描述"></p><h2 id="总线的基本概念"><a href="#总线的基本概念" class="headerlink" title="总线的基本概念"></a>总线的基本概念</h2><h3 id="为什么要用总线"><a href="#为什么要用总线" class="headerlink" title="为什么要用总线"></a>为什么要用总线</h3><p>计算机系统五大部件的连接方式：</p><p>1、分散连接</p><p>各部件之间使用单独的连线。</p><p>2、总线连接</p><p>各部件连接到一组公共信息传输线上。</p><h3 id="什么是总线"><a href="#什么是总线" class="headerlink" title="什么是总线"></a>什么是总线</h3><ul><li>总线是连接各个部件的信息传输线，是各个部件共享的传输介质。</li><li>在某一时刻，只允许一个部件向总线发送信息，而多个部件可以同时从总线上接收相同的信息</li><li>总线由许多传输线或通路组成。每条线可一位一位地传输二进制代码</li></ul><h2 id="总线的分类"><a href="#总线的分类" class="headerlink" title="总线的分类"></a>总线的分类</h2><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221022154949630.png" alt="在这里插入图片描述"></p><h2 id="总线的特征及性能指标"><a href="#总线的特征及性能指标" class="headerlink" title="总线的特征及性能指标"></a>总线的特征及性能指标</h2><h3 id="总线特性"><a href="#总线特性" class="headerlink" title="总线特性"></a>总线特性</h3><ol><li>机械特性：尺寸、形状、管脚数、排列顺序</li><li>电气特性：传输方向和有效的电平范围</li><li>功能特性：每根传输线的功能(地址、数据、控制)</li><li>时间特性：信号的时序关系</li></ol><h3 id="总线的性能指标"><a href="#总线的性能指标" class="headerlink" title="总线的性能指标"></a>总线的性能指标</h3><ul><li><p>总线宽度</p><p>数据总线的根数，bit，8、16、32、64位</p></li><li><p>总线带宽</p><p>每秒传输的最大字节数（MBps 兆字节每秒）</p><blockquote><ul><li>如: 总线工作频率为33MHz，总线宽度为32位，则总线带宽？</li><li>带宽计算公式：Dr&#x3D;D&#x2F;T&#x3D;D×f; T是总线时钟周期T&#x3D;1&#x2F;f, D为一个总线周期传送的数据量。</li><li>所以，Dr&#x3D;(32&#x2F;8)*33&#x3D;132MBps。</li></ul></blockquote></li><li><p>时钟同步\异步</p><p>与时钟同步工作的总线成为同步总线，异步成为异步总线</p></li><li><p>总线复用</p><p>地址总线与数据总线复用 一组物理线路，分时传输</p></li><li><p>信号线数</p><p>地址线、数据线和控制线的总和</p></li><li><p>总线控制方式</p><p>突发工作、自动配置、仲裁方式、逻辑方式、计数方式</p></li><li><p>其他指标</p><p>负载能力、电源电压、总线宽度能否扩展等。</p></li></ul><h3 id="总线标准"><a href="#总线标准" class="headerlink" title="总线标准"></a>总线标准</h3><p>总线标准的基本概念：</p><ul><li>总线标准是国际上公布或推荐的互连各个模块的标准，它是把各种不同的模块组成计算机系统时必须遵守的规范。按总线标准设计的接口可视为通用接口，在接口的两端，任何一方只需根据总线标准的要求完成自身方面的功能要求，而无须了解对方接口的要求。</li><li>系统总线标准：ISA、EISA、VESA、PCI、PCI- Express等。</li><li>设备总线标准：IDE、AGP、RS-232C、USB、SATA、SCSI、 PCMCIA等。</li><li>局部总线标准：在ISA.总线和CPU总线之间增加的一级总线或管理层，如PCI、PCI-E、VESA、AGP等，可以节省系统的总带宽。</li><li>即插即用( Plug-and-Play)的作用是自动配置（低层）计算机中的板卡和其他设备，然后告诉对应的设备都做了什么。把物理设备和软件（设备驱动程序）相配合，并操作设备，在每个设备和它的驱动程序之间建立通信信道</li><li>热插拔( hot-plugging或 Hot Swap)即带电插拔，热插拔功能就是允许用户在不关闭系统，不切断电源的情况下取出和更换损坏的硬盘、电源或板卡等部件，从而提高了系统对灾难的及时恢复能力、扩展性和灵活性等，例如一些面向高端应用的磁盘镜像系统都可以提供磁盘的热插拔功能。</li></ul><h2 id="总线结构"><a href="#总线结构" class="headerlink" title="总线结构"></a>总线结构</h2><h3 id="单总线结构"><a href="#单总线结构" class="headerlink" title="单总线结构"></a>单总线结构</h3><p>将CPU、主存和I&#x2F;O设备（通过I&#x2F;O接口）都挂到一组总线上</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221022160927815.png" alt="单总线结构"><br>为了根本解决数据传送速率，解决CPU、主存与I&#x2F;O设备之间传输速率的不匹配，实现CPU与其他设备相对同步，不得不采用多总线结构。</p><h3 id="多总线结构"><a href="#多总线结构" class="headerlink" title="多总线结构"></a>多总线结构</h3><h3 id="双总线结构"><a href="#双总线结构" class="headerlink" title="双总线结构"></a>双总线结构</h3><p>双总线结构的特点是 将速度较低的I&#x2F;O设备从单总线上分离出来，形成主存总线与I&#x2F;O总线分开的结构。</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221022160927826.png" alt="双总线结构"></p><h3 id="三总线结构"><a href="#三总线结构" class="headerlink" title="三总线结构"></a>三总线结构</h3><p>将速率不同的I&#x2F;O设备进行分类，然后将它们连接在不同的通道上，可以进一步提高计算机系统的工作效率。</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221022160927824.png" alt="三总线结构"><br>主存总线用于CPU与主存之间的传输</p><p>I&#x2F;O总线供CPU与各类I&#x2F;O设备之间传递信息</p><p>DMA总线用于高速I&#x2F;O设备（磁盘、磁带等）与主存之间直接交换信息。</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221022160927817.png" alt="三总线结构的又一形式"></p><h3 id="四总线结构"><a href="#四总线结构" class="headerlink" title="四总线结构"></a>四总线结构</h3><p>增加了一条与计算机系统紧密相连的高速总线。</p><p>在高速总线上挂接了一些高速I&#x2F;O设备</p><p>它们通过Cache控制机构中的高速总线桥或高速缓冲器与系统总线和局部总线相连</p><p>在这种结构中，CPU、高速总线的速度以及各自信号线的定一件完全可以不痛，已知各自改变其结构也不会影响高速总线的正常工作</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221022160927828.png" alt="四总线结构"></p><h2 id="总线控制"><a href="#总线控制" class="headerlink" title="总线控制"></a>总线控制</h2><h3 id="总线判优控制"><a href="#总线判优控制" class="headerlink" title="总线判优控制"></a>总线判优控制</h3><p>总线上所连接的各类设备，按照其对总线有无控制功能可分为<strong>主设备（模块）</strong>和<strong>从设备（模块）</strong>两种</p><p>主设备对总线有控制权</p><p>从设备只能相应从主设备发来的总线命令，对总线没有控制权</p><p>总线上的信息的传送是由主设备启动的，只有获得总线控制权的主设备才能开始传送数据</p><p>总线判优控制可分为集中式和分布式两种</p><h4 id="集中控制优先权仲裁方式"><a href="#集中控制优先权仲裁方式" class="headerlink" title="集中控制优先权仲裁方式"></a>集中控制优先权仲裁方式</h4><p>将控制逻辑集中在一处（如在CPU中）</p><p><strong>（1）链式查询</strong></p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221022161729747.png" alt="链式查询"><br>离总线控制部件最近的设备具有最高的优先级</p><p>特点：</p><ul><li>只需很少几根线就能按一定优先次序实现总线控制</li><li>很容易扩充设备</li><li>对电路故障很敏感</li><li>优先级别低的设备可能很难获得请求</li></ul><p><strong>（2）计时器定时查询</strong></p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221022161729703.png" alt="计时器定时查询"><br>特点：</p><ul><li>对电路故障不如链式查询方式敏感</li><li>增加了控制线（设备地址）数，控制较为复杂</li></ul><p><strong>（3）独立请求方式</strong></p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221022161729727.png" alt="独立请求方式"></p><p>特点：</p><ul><li>响应速度快</li><li>优先次序控制灵活（通过程序改变）</li><li>控制线数量多</li><li>总线控制更复杂</li></ul><p>链式查询中仅用两根线确定总线使用权书序那个设备</p><p>在计数器查询中大致用$log_2n$根线</p><p>而独立请求方式需采用2n根线</p><p>n是允许接纳的最大设备数</p><h4 id="总线周期"><a href="#总线周期" class="headerlink" title="总线周期"></a>总线周期</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221022162634082.png" alt="在这里插入图片描述"></p><h3 id="总线通信控制"><a href="#总线通信控制" class="headerlink" title="总线通信控制"></a>总线通信控制</h3><p><strong>目的：</strong>解决通信双方获知传输的开始与结束以及之间的协调配合。</p><h4 id="同步通信"><a href="#同步通信" class="headerlink" title="同步通信"></a>同步通信</h4><p><strong>基本思想：</strong>通信双方由统一时标控制数据传送。</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221022162704974.png" alt="img"></p><blockquote><p><strong>T1</strong>—主模板发地址    <strong>T2</strong>—主模板发读命令    <strong>T3</strong>—从模板提供数据</p><p><strong>T4</strong>—主模板撤销读命令，从模板撤销数据</p></blockquote><p><strong>特点：</strong></p><ul><li>规定明确、统一，模块间的配合简单一致。</li><li>必须在限定时间内完成规定的要求，必须按最慢速度的部件设计公共时钟。</li><li>一般用于总线长度较短、各部件存取时间比较一致的场合。</li></ul><h4 id="异步通信"><a href="#异步通信" class="headerlink" title="异步通信"></a>异步通信</h4><p><strong>基本思想：</strong>采用“应答方式”，没有公共时钟标准，主从模块之间增加了一条请求线、一条应答线。</p><p>应答方式分为<strong>不互锁</strong>、<strong>半互锁</strong>和<strong>全互锁：</strong></p><table><thead><tr><th align="center">方式</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">不互锁</td><td align="center">主模块发出请求信号后，自动撤销请求信号。从模块收到请求信号后，自动撤销回答信号。</td></tr><tr><td align="center">半互锁</td><td align="center">主模块必须等待接到从模块的回答信号才能撤销请求信号。</td></tr><tr><td align="center">全互锁</td><td align="center">在半互锁的基础上，从模块必须等到主模块撤销信号才能撤销回答信号。</td></tr></tbody></table><p><strong>特点：</strong>允许各模板速度不一致。</p><h4 id="半同步通信"><a href="#半同步通信" class="headerlink" title="半同步通信"></a>半同步通信</h4><p><strong>基本思想：</strong></p><ul><li>结合同步(发送方用系统时钟前沿发信号，接收方用系统时钟后沿判断、识别)</li><li>与异步(允许不同速度模块的和谐工作)的特点。</li><li>增设了一条“等待”响应信号线，采用插入时钟(等待)周期来协调。</li></ul><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221022163217797.png" alt="img"></p><blockquote><p> <strong>T1</strong>—主模板发地址    <strong>T2</strong>—主模板发出命令    **Tw……**—当WAIT处于低电平时等待</p><p><strong>T3</strong>—从模板提供数据    <strong>T4</strong>—主模板撤销读命令，从模板撤销数据</p></blockquote><p><strong>特点：</strong></p><ul><li>适用与系统工作速度不高又包含了许多工作速度差异大的设备组成的系统。</li><li>可靠性较高，同步结构方便，速度不快。</li></ul><p><strong>注：</strong>以上三种方式从模块读数据之前存在准备操作，期间不占用总线，总线处于空闲状态。</p><h4 id="分离式通信"><a href="#分离式通信" class="headerlink" title="分离式通信"></a>分离式通信</h4><p><strong>基本思想：</strong></p><ul><li>将一个传输周期(总线周期)分解为两个子周期。</li><li>第一个子周期：主模块申请占用总线，使用完后放弃总线使用权。</li><li>第二个子周期：从模块申请占用总线，将各种信息送至总线上。</li><li>子周期只有单方向的信息流，每个模块都变成了主模块。</li></ul><p><strong>特点：</strong></p><ul><li>各模块占用总线必须提出申请。</li><li>采用同步方式传送，不再等待回答信号。</li><li>总线始终有效工作，无空闲。</li></ul><p><strong>【例题】</strong>（期末考）</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221023160816079.jpg" alt="例题"></p><h1 id="第四章：存储器"><a href="#第四章：存储器" class="headerlink" title="第四章：存储器"></a>第四章：存储器</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="存储器的分类"><a href="#存储器的分类" class="headerlink" title="存储器的分类"></a>存储器的分类</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221013222542510.png" alt="image-20221013222542510"></p><blockquote><p>随机存储器RAM(Random Access Memory)，在程序的执行过程中<code>可读可写</code></p><p>静态RAM （SRAM）以触发器原理寄存信息<br>动态RAM（DRAM） 以电容充电放电原理寄存信息</p><p>只读存储器ROM(Read Only Memory)在程序的执行过程中<code>只读</code>，存放固定不变的程序、常数和汉字字库，甚至用于操作系统的固化。</p></blockquote><h3 id="存储器的层次结构"><a href="#存储器的层次结构" class="headerlink" title="存储器的层次结构"></a>存储器的层次结构</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221013223045967.jpg" alt="image-20221013223045967"></p><blockquote><p>缓存 — 主存层次主要解决CPU和主存速度不匹配的问题。</p><p>主存 — 辅存层次主要解决存储系统的容量问题。</p></blockquote><h2 id="主存储器"><a href="#主存储器" class="headerlink" title="主存储器"></a>主存储器</h2><h3 id="主存的指标"><a href="#主存的指标" class="headerlink" title="主存的指标"></a>主存的指标</h3><p>主存的主要技术指标是存储容量和存储速度。</p><p><strong>存储容量</strong></p><p>存储容量 &#x3D; 存储单元个数 × 存储字长</p><p><strong>存储速度</strong></p><ul><li><p>存取时间</p><p>存储器的访问时间、读出时间、写入时间</p></li><li><p>存取周期<br>连续两次独立的存储器操作(读或写）所需的最小间隔时间、读周期、写周期</p></li><li><p>存取周期大于存取时间</p></li></ul><p><strong>存储带宽</strong></p><p>与存取周期密切相关的指标为存储器带宽，它表示单位时间内存储器存取的信息量，单位可用字&#x2F;秒或字节&#x2F;秒或位&#x2F;秒表示。</p><h3 id="半导体存储芯片的基本结构"><a href="#半导体存储芯片的基本结构" class="headerlink" title="半导体存储芯片的基本结构"></a>半导体存储芯片的基本结构</h3><p>期末考</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221013223431568.png" alt="image-20221013223431429"></p><h3 id="存储器与CPU的连接"><a href="#存储器与CPU的连接" class="headerlink" title="存储器与CPU的连接"></a>存储器与CPU的连接</h3><p><strong>位拓展</strong>（增加存储字长）</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221013230726101.jpg" alt="image-20221013230726101"></p><blockquote><p>例：上图为将8片16K × 1位的存储芯片连接，可组成一个16K × 8位的存储器</p></blockquote><p><strong>字拓展</strong>（增加存储字的数量）</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221013231221437.jpg" alt="img"></p><blockquote><p>例：用2片1K × 8位的存储芯片可组成一个2K × 8位的存储器，即存储字增加了一倍。</p><p> 说明：在此，将$A_{10}$用做片选信号。由于存储芯片的片选输入端要求低电平有效，故当$A_{10}$为低电平时，$\overline { C S _ { 0 } }$有效，选中左边的1K × 8位芯片；当$A_{10}$为高电平时，反相后 $C S _ { 1 }$有效，选中右边的1K × 8位芯片。</p></blockquote><p><strong>字、位拓展</strong>（既增加存储字的数量，又增加存储字长）</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221013231217220.jpg" alt="img"></p><blockquote><p>例：用8片1K × 4位的芯片组成4K × 8位的存储器。</p><p>说明：由图中可见，每2片构成一组1K×8位的存储器，4组便构成4K × 8位的存储器。地址线$$A _ { 1 1 } 、 A _ { 1 0 }$$<br>经片选译码器得到4个片选信号$$ \overline { C S _ { 0 } } 、 \overline { C S _ { 1 } } 、 \overline { C S _ { 2 } }、\overline { C S _ { 3 } }$$，分别选择其中1K × 8位的存储芯片。 $\overline { W E }$为读&#x2F;写控制信号。</p></blockquote><h2 id="高速缓冲主存器"><a href="#高速缓冲主存器" class="headerlink" title="高速缓冲主存器"></a>高速缓冲主存器</h2><blockquote><p>Cache——主存系统的效率</p><p>效率（e）&#x3D; 访问cache的时间除以平均访问时间</p><p>设 Cache 命中率 为 h，访问 Cache 的时间为 $t_c$ ，访问主存的时间为 $t_m$，则$e&#x3D;\frac{t_c}{h\times t_c + (1-h) \times t_m} $</p></blockquote><h3 id="Cache——主存地址映射"><a href="#Cache——主存地址映射" class="headerlink" title="Cache——主存地址映射"></a>Cache——主存地址映射</h3><ul><li>直接映射（固定的映射关系）</li><li>全相联映射（灵活性大的映射关系）</li><li>组相联映射（上述两种映射的折中）</li></ul><p><strong>直接映射</strong></p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221014160017723.jpg" alt="img"></p><p><strong>计算方法：</strong></p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221014210654820.png" alt="image-20221014210654792"></p><blockquote><p>解释：</p><p>字块内地址（b） &#x3D; 块容量 &#x2F; 字大小或字节大小。（取指数）具体看计算机以什么编址</p><p>Cache字块地址（c） &#x3D; Cache容量 &#x2F; 块容量。（取指数）</p><p>主存字块标记（t）&#x3D; 主存容量 &#x2F;  Cache容量。（取指数）</p><pre><code>                                 或 = 主存字地址 -  Cache字块地址（c）- 字块内地址（b）</code></pre><p>主存字地址 &#x3D; 主存容量 &#x2F; 字大小。（取指数）</p></blockquote><p><strong>全相联映射</strong></p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221014161016252.jpg" alt="img" style="zoom:50%;" /><p><strong>计算方法：</strong></p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221014210547669.png" alt="image-20221014210547625"></p><blockquote><p>解释：</p><p>字块内地址（b） &#x3D; 块容量 &#x2F; 字大小或字节大小。（取指数）具体看计算机以什么编址</p><p>主存字块标记（t） &#x3D; 主存字地址 - 字块内地址（b）。（取指数）</p><p>主存字地址 &#x3D; 主存容量 &#x2F; 字大小。（取指数）</p></blockquote><p><strong>组相联映射</strong></p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221014161829890.jpg" alt="img"></p><p><strong>计算方法：</strong></p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221014210711269.png" alt="img"></p><blockquote><p>解释：</p><p>字块内地址（b） &#x3D; 块容量 &#x2F; 字大小或字节大小。（取指数）具体看计算机以什么编址</p><p>$2^{r}$表示每组内包含的块数（r &#x3D; 1表示每组包含2块，叫做二路组相联）</p><p>$2^{q}$表示Cache分组个数（分组个数&#x3D;分块个数&#x2F;组内块数）。例：Cache共有32个字块（c &#x3D; 5），r &#x3D; 1，则Q &#x3D; $2^{5}$ &#x2F;  $2^{1}$ &#x3D; $2^{4}$ ，q &#x3D; 4。</p><p>q &#x3D; Cache容量&#x2F;（块容量*路数）</p><p>s &#x3D; （主存容量 &#x2F;  Cache容量）*路数</p><p>Cache字块地址（c） &#x3D; Cache容量 &#x2F; 块容量。（取指数）</p><p>主存字块标记（t）&#x3D; 主存容量 &#x2F;  Cache容量。（取指数）</p><p>或 &#x3D; 主存字地址 -  Cache字块地址（c）- 字块内地址（b）</p></blockquote><p><strong>【例题1】（期末考）</strong></p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221014212959497.png" alt="例1"></p><p><strong>【例题2】（期末考）</strong></p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221014214242230.jpeg" alt="img"></p><p><strong>【例题3】（期末考）</strong></p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221022145647174.jpg" alt="img"></p><h3 id="替换策略"><a href="#替换策略" class="headerlink" title="替换策略"></a>替换策略</h3><ol><li><strong>先进先出( First-In-First-Out, FIFO)算法</strong><br>FIFO算法选择最早调人Cache的字块进行替换,它不需要记录各字块的使用情况，比较容易实现,开销小,但没有根据访存的局部性原理，故不能提高Cache的命中率。因为最早调人的信息可能以后还要用到，或者经常要用到，如循环程序。</li><li><strong>近期最少使用( Least Recently Used，LRU)算法</strong><br>LRU算法比较好地利用访存局部性原理，替换出近期用得最少的字块。它需要随时记录Cache中各字块的使用情况，以便确定哪个字块是近期最少使用的字块。它实际是-种推测的方法,比较复杂,一般采用简化的方法,只记录每个块最近一次使用的时间。LRU算法的平均命中率比FIFO的高。</li><li><strong>随机法</strong><br>随机法是随机地确定被替换的块，比较简单，可采用一个随机数产生器产生–个随机的被替换的块,但它也没有根据访存的局部性原理，故不能提高Cache的命中率。</li></ol><h2 id="辅助存储器"><a href="#辅助存储器" class="headerlink" title="辅助存储器"></a>辅助存储器</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p><strong>1. 磁道</strong></p><p>存储在介质表面上的信息的磁化轨迹。</p><p><strong>2. 柱面</strong></p><p>在磁盘存储器中，对有多个盘片构成的盘组中，由处于同一半径的磁道组成的一个圆柱面。</p><p><strong>注意：柱面数 &#x3D; 磁道数</strong></p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221022104051994.png" alt="磁道与柱面的关系"></p><p><strong>3. 道密度</strong></p><p>半径方向单位长度磁道数。</p><p><strong>4. 位密度</strong></p><p>磁道方向上单位长度记录的二进制位数。</p><p>道密度与位密度的示意图：</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221022104059168.png" alt="道密度与位密度的示意图"></p><h3 id="技术指标"><a href="#技术指标" class="headerlink" title="技术指标"></a>技术指标</h3><p><strong>1. 存储密度</strong></p><p>存储密度分道密度、位密度。</p><p>道密度: 沿磁盘半径方向单位长度上的磁道数，单位为道&#x2F;英寸。</p><p>位密度: 磁道单位长度上能记录的二进制代码位数， 单位为位&#x2F;英寸。</p><p>各磁道上所记录的信息量是相同的（或每扇区存放的二进制位数相等），所以各个点的位密度不相同。</p><p><strong>2. 存储容量</strong></p><p>一个磁盘存储器所能存储的字节总数，称为磁盘存储器的存储容量。</p><p>如：<code>10</code>盘面，每个盘面有<code>1024磁道</code>，每个磁道有<code>64个扇区</code>，每个扇区为<code>512字节</code>，则硬盘总容量为：  <code>10 X 1024 X 64 X 512B = 320MB</code></p><p><strong>3. 平均存取时间</strong></p><p>存取时间是指从发出读写命令后，磁头从某一起始位置移动至新的记录位置，到开始从盘片表面读出或写入信息所需要的时间，这段时间由两个数值所决定</p><p><strong>找道时间</strong>： 将磁头定位至所要求的磁道上所需的时间。</p><p><strong>等待时间</strong>： 找道完成后至磁道上需要访问的信息到达磁头下的时间。</p><p>平均存取时间等于平均找道时间与平均等待时间之和。</p><ul><li><p>平均找道时间是最大找道时间与最小找道时间的平均值。<code>Ts=（Tsmax+Tsmin）/2</code></p></li><li><p>平均等待时间和磁盘转速有关，它用磁盘旋转一周所需时间的一半来表示。</p></li></ul><p>假设磁盘转速达6000转&#x2F;分，则平均等待时间为<code>5ms</code>。</p><p><strong>4.数据传输率</strong></p><p>磁盘存储器在单位时间内向主机传输数据的字节数。</p><p>(1) Dr&#x3D;nN（字节&#x2F;秒）       N：每条磁道的容量；       n：电机转速（转&#x2F;分）</p><p>(2) Dr&#x3D;Dv（字节&#x2F;秒）      D：位密度      v：磁盘的线速度</p><blockquote><p>【例题】： 磁盘组有6片磁盘，每片有两个记录面，最上最下两个面不用。存储区域内径22cm ，外径33cm，道密度为40道&#x2F;cm，内层位密度400位&#x2F;cm，转速2400转&#x2F;分。问：</p><p>(1) 共有多少柱面?</p><p>(2) 盘组总存储容量是多少?</p><p>(3) 数据传输率多少?</p><p> (4) 如果某文件长度超过一个磁道的容量，应将它记录在同一个存储面上，还是记录在同一个柱面上?</p><p>【解答】</p><p>(1)有效存储区域&#x3D;16.5-11&#x3D;5.5(cm)         因为道密度&#x3D;40道&#x2F;cm，所以40×5.5&#x3D;220道,  即:220个圆柱面</p><p>(2)内层磁道周长为2πR&#x3D;2×3.14×11&#x3D;69.08(cm)</p><p>   每道信息量&#x3D;400位&#x2F;cm×69.08cm&#x3D;27632位&#x3D;3454B</p><p>   每面信息量&#x3D;3454B×220&#x3D;759880B</p><p>   盘组总容量&#x3D;759880B×10&#x3D;7598800B （7.24M）</p><p>(3)磁盘数据传输率Dr&#x3D;rN,    N为每条磁道容量，N&#x3D;3454B</p><p>   r为磁盘转速，r&#x3D;2400转&#x2F;60秒&#x3D;40转&#x2F;秒</p><p>   Dr&#x3D;rN&#x3D;40×3454B&#x3D;13816B&#x2F;s</p><p> (4) 如果某文件长度超过一个磁道的容量，应将它记录在同一个柱面上，因为不需要重新找道，寻址时间减少，数据读&#x2F;写速度快。</p></blockquote><h3 id="光盘存储器"><a href="#光盘存储器" class="headerlink" title="光盘存储器"></a>光盘存储器</h3><p><strong>1.概述</strong></p><p>采用光存储技术：利用激光写入和读出</p><ul><li>第一代光存储技术   采用非磁性介质   不可擦写</li><li>第二代光存储技术   采用磁性介质       可擦写</li></ul><p><strong>2.光盘存储原理</strong></p><p>只读型和只写一次型：热作用（物理或化学变化）</p><p>可擦写光盘：热磁效应</p><h1 id="第六章：计算机的运算方法"><a href="#第六章：计算机的运算方法" class="headerlink" title="第六章：计算机的运算方法"></a>第六章：计算机的运算方法</h1><blockquote><p>真值：实际的带正负号的数值(人类习惯的样子)<br>机器数：把正负号数字化的数(存到机器里的样子)</p><p>反码： 若符号位为0，则反码与原码相同<br>               若符号位为1，则<code>数值位</code>全部取反</p><p>补码：正数的补码&#x3D;原码<br>负数的补码&#x3D;反码末位+1(要考虑进位)</p></blockquote><h3 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h3><p><strong>数值直接转为二进制数，负数的最高位置1。</strong></p><p>以8位为例：</p><p>+1的原码为0000 0001，-1的原码为1000 0001.</p><p>+127的原码为0111 1111，-127的原码为1111 1111.</p><p>+0的原码为0000 0000，-0的原码为1000 0000.</p><h3 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h3><p><strong>①正数的反码和原码相同</strong></p><p><strong>②负数的反码，在原码基础上，符号位不变，其余各位取反</strong></p><p>以8位为例：</p><p>-1的反码为1111 1110</p><p>-127的反码为1000 0000</p><p>-0的反码为1111 1111</p><h3 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h3><p><strong>①正数的补码和原码相同</strong></p><p><strong>②负数的补码，在反码基础上，加一</strong></p><p>以8位为例：</p><p>-1的补码为1111 1111</p><p>-127的补码为：1000 0001</p><p>+0的补码&#x3D;-0的补码，为0000 0000</p><h3 id="移码"><a href="#移码" class="headerlink" title="移码"></a>移码</h3><p>移码&#x3D;补码+偏移量</p><p>当机器字长为8，偏移量为127时，移码&#x3D;补码最高位取反。</p><p>原码和反码的+0和-0是不同的表示，而补码表示上是一致的。</p><p>-128的补码是1000 0000</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;期末考试&quot;&gt;&lt;a href=&quot;#期末考试&quot; class=&quot;headerlink&quot; title=&quot;期末考试&quot;&gt;&lt;/a&gt;期末考试&lt;/h1&gt;&lt;p&gt;半导体存储芯片结构图（考大题画图）&lt;/p&gt;
&lt;p&gt;更多可&lt;kbd&gt;ctrl&lt;/kbd&gt; + &lt;kbd&gt;f&lt;/kbd&gt; 搜索&lt;</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://blog.bywind.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="计算机基础" scheme="https://blog.bywind.xyz/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>操作系统</title>
    <link href="https://blog.bywind.xyz/posts/d04bd5bc.html"/>
    <id>https://blog.bywind.xyz/posts/d04bd5bc.html</id>
    <published>2022-09-21T15:51:52.000Z</published>
    <updated>2023-07-22T15:56:23.758Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章：操作系统引论"><a href="#第一章：操作系统引论" class="headerlink" title="第一章：操作系统引论"></a>第一章：操作系统引论</h1><h2 id="计算机系统概述"><a href="#计算机系统概述" class="headerlink" title="计算机系统概述"></a>计算机系统概述</h2><ul><li><p>计算机系统是由硬件和软件组成的</p></li><li><p>硬件是软件建立活动的基础，软件是硬件功能的扩充</p></li><li><p>计算机硬件结构：由CPU、内存和若干IO设备组成，他们由系统总线连接在一起，实现彼此通信</p></li></ul><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20220920163018481.png" alt="image-20220920163018481" style="zoom: 67%;" /><h3 id="处理器"><a href="#处理器" class="headerlink" title="处理器"></a>处理器</h3><p><strong>1.CPU工作的基本周期</strong></p><ul><li>从内存中提取指令</li><li>对指令译码</li><li>最后执行指令</li></ul><blockquote><p>每个CPU可以执行的指令集是专用的</p></blockquote><p><strong>2.所有CPU都包含某些寄存器</strong></p><ul><li><p>通用寄存器</p></li><li><p>专用寄存器</p></li><li><p>程序计数器</p></li><li><p>栈指针</p></li><li><p>PSW（程序状态字）</p></li></ul><p><strong>3.两种处理机执行状态</strong></p><ul><li>核心态</li><li>用户态</li></ul><h3 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h3><p>寄存器、高速缓存、内存、磁盘、磁带</p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20220920165451884.png" alt="image-20220920165451844" style="zoom:50%;" /><h3 id="I-x2F-O设备"><a href="#I-x2F-O设备" class="headerlink" title="I&#x2F;O设备"></a>I&#x2F;O设备</h3><p>1.<strong>组成</strong></p><p>通常由控制器和设备本身两部分组成</p><p>控制器、设备、设备驱动程序</p><p>2.<strong>输入和输出的工作方式</strong></p><p>程序控制方式、 程序中断方式、DMA方式</p><h3 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h3><p>1.总线分类</p><p>数据总线、 地址总线、控制总线</p><hr><h2 id="什么是操作系统"><a href="#什么是操作系统" class="headerlink" title="什么是操作系统"></a>什么是操作系统</h2><h3 id="操作系统概念"><a href="#操作系统概念" class="headerlink" title="操作系统概念"></a>操作系统概念</h3><p>1.操作系统作为扩展机器</p><p>2.操作系统作为资源管理器</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20220920141640658.png" alt="在这里插入图片描述"></p><h3 id="操作系统的主要功能"><a href="#操作系统的主要功能" class="headerlink" title="操作系统的主要功能"></a>操作系统的主要功能</h3><ol><li><p>存储管理功能</p><p>内存分配，地址映射，内存保护，内存扩充</p></li><li><p>处理机管理功能</p><p>作业和进程调度，进程控制和进程通信</p></li><li><p>设备管理功能</p><p>缓冲区管理，设备分配，设备驱动和设备无关性</p></li><li><p>文件管理功能</p><p>文件存储空间的管理，稳健操作的一般管理，目录管理，文件的读写管理和存取控制</p></li><li><p>用户接口</p><p>命令界面、程序界面、图形界面</p></li></ol><h3 id="操作系统的地位"><a href="#操作系统的地位" class="headerlink" title="操作系统的地位"></a>操作系统的地位</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20220920204338095.png" alt="计算机系统的层次关系"></p><h3 id="操作系统的服务与服务方式"><a href="#操作系统的服务与服务方式" class="headerlink" title="操作系统的服务与服务方式"></a>操作系统的服务与服务方式</h3><p>1．操作系统提供的服务</p><p>2．操作系统的服务方式</p><p>（1）系统调用</p><p>系统调用是操作系统提供的、与用户程序之间的接口，也就是操作系统提供给程序员的接口。它一般位于操作系统核心的最高层。系统调用类似于过程调用</p><p>（2）系统程序</p><p>它们本身并不属于操作系统的一部分</p><p>3．命令解释程序</p><p>（1）内置方式</p><p>（2）外置方式</p><h2 id="操作系统的分类及其特征优劣"><a href="#操作系统的分类及其特征优劣" class="headerlink" title="操作系统的分类及其特征优劣"></a>操作系统的分类及其特征优劣</h2><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20220922090624458.png" alt="在这里插入图片描述"></p><h2 id="操作系统的发展历程"><a href="#操作系统的发展历程" class="headerlink" title="操作系统的发展历程"></a>操作系统的发展历程</h2><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20220922090714052.png" alt="在这里插入图片描述"></p><h2 id="操作系统的特征"><a href="#操作系统的特征" class="headerlink" title="操作系统的特征"></a>操作系统的特征</h2><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><ul><li><code>并发</code>：两个或多个事件在同一<code>时间间隔内</code>发生，这些事件在宏观上是同时发生的，在微观上是交替发生的， 操作系统的并发性指系统中同时存在着多个运行的程序</li><li><code>并行</code>：两个或多个事件在同一<code>时刻</code>发生</li></ul><h3 id="共享"><a href="#共享" class="headerlink" title="共享"></a>共享</h3><ul><li>共享是指计算机系统中的资源可以<code>供内存中多个并发执行的进程</code>共同使用</li><li>共享分为两类：互斥共享和同时共享</li></ul><p>（1）互斥共享</p><ul><li>计算机中的某个资源在一段时间内只能允许<code>一个进程</code>访问，别的进程没有使用权</li><li>举个例子：比如QQ和微信视频。同一段时间内摄像头只能分配给其中一个进程</li></ul><p>（2）同时共享</p><ul><li>计算机中的某个资源在在一段时间内可以<code>同时</code>允许<code>多个</code>进程访问</li></ul><p>（3）并发性和共享性互为存在条件</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20220922091508477.png" alt="在这里插入图片描述"></p><h3 id="不确定性（异步性）"><a href="#不确定性（异步性）" class="headerlink" title="不确定性（异步性）"></a>不确定性（异步性）</h3><ul><li>不确定性是指系统中各种事件发生顺序的不可预测性。</li><li>只有进程在获得所需的资源后方能执行，所以进程的执行通常都不是“一气呵成”，而是以“停停走走”的方式运行。</li></ul><h3 id="虚拟"><a href="#虚拟" class="headerlink" title="虚拟"></a>虚拟</h3><ul><li><p>虚拟是把一个物理实体映射为若干个对应的逻辑实体。</p></li><li><p>虚拟是操作系统管理系统资源的重要手段，可提高资源利用率。</p></li></ul><h2 id="操作系统的结构"><a href="#操作系统的结构" class="headerlink" title="操作系统的结构"></a>操作系统的结构</h2><h3 id="整体系统"><a href="#整体系统" class="headerlink" title="整体系统"></a>整体系统</h3><ul><li>网状。</li><li>OS是为数众多的一组过程的集合，各过程之间可以相互调用。</li><li>既庞大又杂乱。</li></ul><h3 id="层次式系统"><a href="#层次式系统" class="headerlink" title="层次式系统"></a>层次式系统</h3><blockquote><p>上层调用下层。核心层</p><p>例如，作业调度模块须调用进程控制模块；在为某作业创建一进程时，进程控制模块又须调用内存管理模块为新进程分配内存空间，可见，进程控制模块应在内存管理模块之上； 而作业调度模块又应在更高层。 下层应用程序模块是操作系统的内核 。</p></blockquote><h3 id="模块化OS结构（增加内容）"><a href="#模块化OS结构（增加内容）" class="headerlink" title="模块化OS结构（增加内容）"></a>模块化OS结构（增加内容）</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20220922092849142.png" alt="image-20220922092849091"></p><h3 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h3><p>以操作系统作为底层基本平台，在它上面安装并运行虚拟机软件，划分硬盘、内存等资源为几部分，这样物理机器通过共享资源的复件实现多个虚拟机器给多个用户。CMS（内容管理程序）相当于联系代理。VMM（虚拟机监督程序）分开多道程序和扩展机器的功能。</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20220922092941858.png" alt="image-20220922092941820"></p><p><strong>优点：</strong></p><ul><li>可运行多个操作系统</li><li>系统更安全</li><li>方便软件研制、开发、测试</li><li>组建虚拟网络</li></ul><p><strong>缺点：</strong></p><ul><li>硬件要求高</li><li>实现复杂</li><li>运行任务速度受影响。</li></ul><p><strong>目前常用的虚拟机软件：</strong> VMware Workstation\</p><h3 id="客户-服务器系统"><a href="#客户-服务器系统" class="headerlink" title="客户-服务器系统"></a>客户-服务器系统</h3><blockquote><p>操作系统被划分成的各个服务器运行在用户态，微内核，安全。</p></blockquote><ul><li>所有这些服务器(进程)都运行在用户态。</li><li><code>微内核</code>，用来处理客户和服务器之间的通信， 即由内核来接收客户的请求，再将该请求送至相应的服务器；同时它也接收服务器的应答， 并将此应答回送给请求客户。</li></ul><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20220922093037361.png" alt="image-20220922093037332"></p><h1 id="第二章：进程和线程"><a href="#第二章：进程和线程" class="headerlink" title="第二章：进程和线程"></a>第二章：进程和线程</h1><h2 id="进程的定义"><a href="#进程的定义" class="headerlink" title="进程的定义"></a>进程的定义</h2><h3 id="进程的概念"><a href="#进程的概念" class="headerlink" title="进程的概念"></a>进程的概念</h3><p>程序就是一个指令序列</p><p>早期的计算机（只支持单道程序），同一时间内只允许一个程序执行。后来出现了多道程序技术</p><p>系统为每个运行额度程序配置一个数据结构，称为进程控制块（PCB），用来描述进程的各种信息</p><p>PCB是程序存在的唯一标志</p><p>进程定义：进程是一个具有一定独立功能的程序在一个数据集上的一次动态执行的过程</p><h3 id="进程的特征"><a href="#进程的特征" class="headerlink" title="进程的特征"></a>进程的特征</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221024193817947.png" alt="image-20221024193817836"></p><h3 id="进程的组成"><a href="#进程的组成" class="headerlink" title="进程的组成"></a>进程的组成</h3><p>进程（进程实体）由程序段、数据段、PCB三部分组成。</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221024193335009.png" alt="image-20221024193334912"></p><h2 id="进程的状态及转换"><a href="#进程的状态及转换" class="headerlink" title="进程的状态及转换"></a>进程的状态及转换</h2><h3 id="进程的状态"><a href="#进程的状态" class="headerlink" title="进程的状态"></a>进程的状态</h3><p>进程是程序的一次执行。在这个执行过程中，有时进程正在被CPU处理，有时又需要等待CPU服务，可见，进程的状态是会有各种变化。为了方便对各个进程的管理，操作系统需要将进程合理地划分为几种状态。</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221024194744278.png" alt="image-20221024194744107"></p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221024195212879.png" alt="另外两种状态"></p><h3 id="进程状态的转换"><a href="#进程状态的转换" class="headerlink" title="进程状态的转换"></a>进程状态的转换</h3><ol><li>运行态→阻塞态是种进程自身做出的主动行为</li><li>阻塞态→就绪态是不是进程自身能控制的，是种被动行为</li><li>注意:不能由阻塞态直接转换为运行态,也不能由就绪态直接转换为阻塞态(因为进入阻塞态是进程主动请求的，必然需要进程在运行时才能发出这种请求)</li></ol><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221024200222037.png"></p><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><h3 id="进程的创建"><a href="#进程的创建" class="headerlink" title="进程的创建"></a>进程的创建</h3><ol><li>为新进程分配一个唯一的进程标识号，并申请一个空白的PCB(PCB是有限的)。若PCB申请失败，则创建失败。</li><li>为进程分配资源，为新进程的程序和数据及用户栈分配必要的内存空间（在PCB中体现）。注意，若资源不足（如内存空间），则并不是创建失败，而是处于阻塞态，等待内存资源。</li><li>初始化PCB，主要包括初始化标志信息、初始化处理机状态信息和初始化处理机控制信息，以及设置进程的优先级等。</li><li>若进程就绪队列能够接纳新进程，则将新进程插入就绪队列，等待被调度运行。</li></ol><h3 id="进程的中止"><a href="#进程的中止" class="headerlink" title="进程的中止"></a>进程的中止</h3><ol><li>找到指定进程的PCB</li><li>终止该进程的运行</li><li>回收该进程所占用的全部资源</li><li>终止其所有子孙进程，回收它们所占用的全部资源。</li><li>将被终止进程的PCB从原来队列中摘走</li></ol><h3 id="进程的阻塞"><a href="#进程的阻塞" class="headerlink" title="进程的阻塞"></a>进程的阻塞</h3><ol><li>立即停止当前进程的执行</li><li>现行进程的CPU现场保存</li><li>现行状态由“运行”改为“阻塞”</li><li>转到进程调度程序</li></ol><h3 id="进程的唤醒"><a href="#进程的唤醒" class="headerlink" title="进程的唤醒"></a>进程的唤醒</h3><ol><li>把阻塞进程从相应的阻塞队列中摘下。</li><li>将现行状态改为就绪状态，然后把该进程插入就绪队列中。</li><li>如果被唤醒的进程比当前运行进程的优先级更高，则设置重新调度标志。</li></ol><h2 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h2><ul><li>进程通信就是指进程之间的信息交换。</li><li>进程是分配系统资源的单位（包括内存地址空间)，因此各进程拥有的内存地址空间相互独立。</li><li>一个进程不能直接访问另一个进程的地址空间</li></ul><blockquote><p><strong>低级通信</strong></p><ul><li>低级通信：只能传递状态和整数值（控制信息），包括进程互斥和同步所采用的信号量和管程机制。</li><li>优点：速度快</li><li>缺点<ul><li>传送信息量小，效率低，每次通信传递的信息量固定，若传递较多信息则需要进行多次通信。</li><li>编程复杂，用户直接实现通信的细节，容易出错。</li></ul></li></ul><p><strong>高级通信</strong></p><ul><li>高级通信：能够传送任意数量的数据</li><li>三种高级通信方式：共享存储器方式、消息传递方式、管道文件方式</li></ul></blockquote><h3 id="共享存储"><a href="#共享存储" class="headerlink" title="共享存储"></a>共享存储</h3><ul><li>两个进程对共享空间的访问必须是互斥的（互斥访问通过操作系统提供的工具实现）。</li><li>操作系统只负责提供共享空间和同步互斥工具（如P、V操作)</li></ul><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221024203148453.png" alt="image-20221024203148392" style="zoom: 67%;" /><h4 id="基于数据结构的共享"><a href="#基于数据结构的共享" class="headerlink" title="基于数据结构的共享"></a>基于数据结构的共享</h4><p>基于数据结构的共享：比如共享空间里只能放一个长度为10的数组。这种共享方式速度慢、限制多，是一种低级通信方式</p><h4 id="基于存储区的共享"><a href="#基于存储区的共享" class="headerlink" title="基于存储区的共享"></a>基于存储区的共享</h4><p>基于存储区的共享：在内存中画出一块共享存储区，数据的形式、存放位置都由进程控制，而不是操作系统。相比之下，这种共享方式速度更快，是一种高级通信方式。</p><h3 id="管道通信"><a href="#管道通信" class="headerlink" title="管道通信"></a>管道通信</h3><p>“管道”是指用于连接读写进程的一个共享文件，又名pipe文件。其实就是在内存中开辟一个大小固定的缓冲区</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221024203514501.png" alt="image-20221024203514453"></p><ol><li><p>管道只能采用<strong>半双工通信</strong>，某一时间段内只能实现单向的传输。如果要实现<strong>双向同时通信</strong>，则<strong>需要设置两个管道</strong>。</p></li><li><p>各进程要<strong>互斥</strong>地访问管道。</p></li><li><p>数据以字符流的形式写入管道，当<strong>管道写满</strong>时，<strong>写进程</strong>的write()系统调用将被<strong>阻塞</strong>，等待读进程将数据取走。当读进程将数据全部取走后，<strong>管道变空</strong>，此时<strong>读进程</strong>的read()系统调用将被<strong>阻塞</strong>。</p></li><li><p>如果<strong>没写满，就不允许读</strong>。如果<strong>没读空，就不允许写</strong>。</p></li><li><p>数据一旦被读出，就从管道中被抛弃，这就意味着<strong>读进程最多只能有一个</strong>，否则可能会有读错数据的情况。</p></li></ol><h3 id="消息传递"><a href="#消息传递" class="headerlink" title="消息传递"></a>消息传递</h3><p>进程间的数据交换以<strong>格式化的消息</strong>(Message）为单位。</p><p>进程通过操作系统提供的“发送消息&#x2F;接收消息”两个<strong>原语</strong>进行数据交换。</p><table><thead><tr><th>方式</th><th>说明</th></tr></thead><tbody><tr><td>直接通信方式</td><td>发送进程直接将消息挂在接收进程的消息缓冲队列上，接收进程从消息缓冲队列中得到消息</td></tr><tr><td>间接通信方式</td><td>发送进程将消息送到称做信箱的中间设施上，接收进程从信箱中取得消息，也称为<strong>信箱通信方式。</strong>（有人往信箱放，有人从信箱取）</td></tr></tbody></table><p>间接通信方式广泛应用于计算机网络中，相应的通信系统称为电子邮件系统。</p><h3 id="客户-服务器系统中的通信"><a href="#客户-服务器系统中的通信" class="headerlink" title="客户-服务器系统中的通信"></a>客户-服务器系统中的通信</h3><h4 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h4><ul><li>好像一条通信线两端的接插口。</li><li>一对进程通过网络进行通信要用一对socket，每个进程一个。</li><li>三个要素：<ol><li>网络地址表明一个socket用于哪种网络。</li><li>连接类型表明网络通信所遵循的模式，主要分为“有连接”和“无连接”模式。</li><li>网络规程表明具体网络的规程。一般，网络地址和连接类型结合在一起就基本上确定了适用的规程。</li></ol></li></ul><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221028202329153.png" alt="image-20221028202329068" style="zoom: 67%;" /><h4 id="远程过程调用（RPC）"><a href="#远程过程调用（RPC）" class="headerlink" title="远程过程调用（RPC）"></a>远程过程调用（RPC）</h4><ul><li><p>远程过程调用（Remote Procedure Call, RPC）是远程服务的一种最常见的形式。</p></li><li><p>远程过程调用的思想：</p><p>允许程序调用另外机器上的过程。</p></li></ul><p><strong>具体步骤：</strong></p><ol><li>客户过程调用客户代理</li><li>客户代理构造一个消息，并且陷入内核</li><li>本地内核发送消息给远程内核</li><li>远程内核把消息送给服务器代理</li><li>服务器代理从信包中取出参数，并调用服务器</li><li>服务器完成相应的服务，并将结果送给服务器代理</li><li>服务器代理将结果打包形成消息，并且陷入内核</li><li>远程内核发送消息给客户机内核</li><li>客户机内核把消息传给客户代理</li><li>客户代理取出结果，返回给客户的调用程序</li></ol><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><ul><li>线程必须在某个进程内执行</li><li>一个进程可以包含一个线程或多个线程</li></ul><p>线程（thread）是一个基本的CPU执行单元，也是程序执行流的最小单位。</p><h3 id="线程结构"><a href="#线程结构" class="headerlink" title="线程结构"></a>线程结构</h3><p>代码和数据来自进程。</p><p>各类资源来自进程。</p><p>线程控制块（Thread Control Block, TCB）</p><ul><li>线程ID</li><li>程序计数器PC</li><li>寄存器集</li><li>栈空间</li></ul><h3 id="线程和进程对比"><a href="#线程和进程对比" class="headerlink" title="线程和进程对比"></a>线程和进程对比</h3><table><thead><tr><th align="center">项目</th><th align="center">进程</th><th align="center">线程</th></tr></thead><tbody><tr><td align="center">代码</td><td align="center">进程包含线程</td><td align="center">线程是进程中的一段代码</td></tr><tr><td align="center">资源</td><td align="center">进程是资源分配的基本单位</td><td align="center">线程不拥有资源，共享使用进程的资源</td></tr><tr><td align="center">调度</td><td align="center">同一进程中的线程切换不会引起进程切换</td><td align="center">线程是基本的调度单位</td></tr><tr><td align="center">切换</td><td align="center">进程用于重量级上下文切换，代价大</td><td align="center">线程用于轻量级切换，代价小</td></tr><tr><td align="center">生命周期</td><td align="center">进程撤销会导致它的所有线程被撤销</td><td align="center">线程撤销不会影响进程</td></tr></tbody></table><ul><li>进程是资源（包括内存、打开的文件等）分配的单位，线程是 CPU 调度的单位；</li><li>进程拥有一个完整的资源平台，而线程只独享必不可少的资源，如寄存器和栈；</li><li>线程同样具有运行、阻塞、就绪、终止四种基本状态，同样具有状态之间的转换关系；</li><li>线程能减少并发执行的时间和空间开销；</li></ul><h3 id="线程的管理"><a href="#线程的管理" class="headerlink" title="线程的管理"></a>线程的管理</h3><ul><li>线程创建</li><li>线程终止</li><li>线程等待</li><li>线程让权</li></ul><h2 id="进程的同步与互斥"><a href="#进程的同步与互斥" class="headerlink" title="进程的同步与互斥"></a>进程的同步与互斥</h2><h1 id="第三章：死锁"><a href="#第三章：死锁" class="headerlink" title="第三章：死锁"></a>第三章：死锁</h1><h2 id="死锁概念"><a href="#死锁概念" class="headerlink" title="死锁概念"></a>死锁概念</h2><h3 id="死锁、饥饿、死循环的区别"><a href="#死锁、饥饿、死循环的区别" class="headerlink" title="死锁、饥饿、死循环的区别"></a>死锁、饥饿、死循环的区别</h3><p>死锁：各进程互相等待对方手里的资源，导致各进程都阻塞，无法向前推进的现象。</p><p>饥饿：由于长期得不到想要的资源，某进程无法向前推进的现象。比如:在短进程优先（SPF）算法中，若有源源不断的短进程到来，则长进程将一直得不到处理机,从而发生长进程“饥饿”。（可以利用FCFS资源分配策略来避免饥饿）</p><p>死循环：某进程执行过程中一直跳不出某个循环的现象。有时是因为程序逻辑bug导致的，有时是程序员故意设计的。</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20220928214350282.png" alt="image-20220928214350079"></p><h3 id="死锁的条件"><a href="#死锁的条件" class="headerlink" title="死锁的条件"></a>死锁的条件</h3><p>当计算机系统同时具备下面4个必要条件时，会发生死锁。</p><p>1.互斥条件</p><p>2.占有且等待条件（请求并保持）</p><p>3.不可抢占条件（不可剥夺）</p><p>4.循环等待条件（环路等待）</p><h3 id="处理死锁的方法"><a href="#处理死锁的方法" class="headerlink" title="处理死锁的方法"></a>处理死锁的方法</h3><p>1.<strong>预防死锁</strong>。破坏死锁产生的四个必要条件中的一个或几个。</p><p>2.<strong>避免死锁</strong>。用某种方法防止系统进入不安全状态，从而避免死锁（银行家算法)</p><p>3.<strong>死锁的检测和解除</strong>。允许死锁的发生，不过操作系统会负责检测出死锁的发生，然后采取某种措<br>施解除死锁。</p><h2 id="死锁的预防"><a href="#死锁的预防" class="headerlink" title="死锁的预防"></a>死锁的预防</h2><h3 id="破坏互斥条件"><a href="#破坏互斥条件" class="headerlink" title="破坏互斥条件"></a>破坏互斥条件</h3><p>如果把只能互斥使用的资源改造为允许共享使用，则系统不会进入死锁状态。</p><p><strong>缺点</strong></p><p>并不是所有的资源都可以改造成可共享使用的资源。并且为了系统安全，很多地方还必须保护这种互斥性。因此，很多时候都无法破坏互斥条件。</p><h3 id="破坏占有且等待条件"><a href="#破坏占有且等待条件" class="headerlink" title="破坏占有且等待条件"></a>破坏占有且等待条件</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20220928223255766.png" alt="image-20220928223255670"></p><h3 id="破坏非抢占条件"><a href="#破坏非抢占条件" class="headerlink" title="破坏非抢占条件"></a>破坏非抢占条件</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20220928222740052.png" alt="image-20220928222739939"></p><h3 id="破坏循环等待条件"><a href="#破坏循环等待条件" class="headerlink" title="破坏循环等待条件"></a>破坏循环等待条件</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20220928223220195.png" alt="image-20220928223220047"></p><h2 id="死锁的避免"><a href="#死锁的避免" class="headerlink" title="死锁的避免"></a>死锁的避免</h2><h3 id="安全状态"><a href="#安全状态" class="headerlink" title="安全状态"></a>安全状态</h3><p>系统至少能够按照某种次序分配资源(直至最大需求)，并且使它们依次成功地运行完毕，这种进程序列{P1,P2,……,Pn}就是安全序列。</p><h3 id="资源分配图"><a href="#资源分配图" class="headerlink" title="资源分配图"></a>资源分配图</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221003101716980.png" alt="image-20221003101716908"></p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221003101726131.png" alt="示例"></p><ul><li><p>如果系统中剩余的可用资源数足够满足进程的需求，那么这个进程暂时是不会阻塞的，可以顺利地执行下去。</p></li><li><p>如果这个进程执行结束了把资源归还系统，就可能使某些正在等待资源的进程被激活，并顺利地执行下去。</p></li><li><p>相应的，这些被激活的进程执行完了之后又会归还一些资源．这样可能又会激活另外一些阳塞的讲程.</p></li></ul><h3 id="银行家算法"><a href="#银行家算法" class="headerlink" title="银行家算法"></a>银行家算法</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221003101037792.png" alt="image-20221003101037536"></p><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221003144043234.png" alt="image-20221003144043179"></p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221003144124665.png" alt="image-20221003144124594"></p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221003144143519.png" alt="image-20221003144143468"></p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221003144206030.png" alt="image-20221003144205962"></p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221003144213844.png" alt="image-20221003144213806"></p><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><p><strong>优点：</strong></p><ul><li><p>允许存在死锁必要条件的前三个，即互斥条件、占有且申请条件、不可抢占条件；</p></li><li><p>限制条件少了，资源利用率提高了。</p></li></ul><p><strong>缺点：</strong></p><ul><li><p>要求进程数保持不变，在多道程序系统中难以做到；</p></li><li><p>算法仅保证所有进程在有限的时间内得到满足，不一定能够快速响应(如实时进程)；</p></li><li><p>要寻找安全序列，增加了系统开销。</p></li></ul><h2 id="死锁的检测和恢复"><a href="#死锁的检测和恢复" class="headerlink" title="死锁的检测和恢复"></a>死锁的检测和恢复</h2><blockquote><p>死锁检测与恢复是指系统设有专门的机构，当死锁发生时，该机构能够检测到死锁发生的位置和原因，且能通过外力破坏死锁发生的必要条件，从而使并发进程从死锁状态中解脱出来.</p></blockquote><p>算法：</p><ul><li><p>对单体资源类的死锁检测——等待图</p></li><li><p>对多体资源类的死锁检测——检测算法（与安全性算法类似）</p></li></ul><h3 id="对单体资源类的死锁检测"><a href="#对单体资源类的死锁检测" class="headerlink" title="对单体资源类的死锁检测"></a>对单体资源类的死锁检测</h3><p>等待图：它是从资源分配图中去掉表示资源类的节点，且把相应边折叠在一起得到的。</p><p>检测依据：当且仅当等待图中有环路，系统存在死锁。</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221003153737994.png" alt="image-20221003153737948"></p><h3 id="对多体资源类的死锁检测"><a href="#对多体资源类的死锁检测" class="headerlink" title="对多体资源类的死锁检测"></a>对多体资源类的死锁检测</h3><ul><li><p>检测算法采用若干随时间变化的数据结构，与银行家算法中所用的结构相似。</p><ul><li><p>Available是一个长度为m的向量</p></li><li><p>Allocation是一个n×m的矩阵</p></li><li><p>Request是一个n×m的矩阵</p></li></ul></li><li><p>检测算法只是简单地调查尚待完成的各个进程所有可能的分配序列。</p></li></ul><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221008171112223.png" alt="image-20221008171112116"></p><h3 id="死锁检测的时机"><a href="#死锁检测的时机" class="headerlink" title="死锁检测的时机"></a>死锁检测的时机</h3><ul><li><p>取决两个因素：</p><ul><li><p>死锁出现的频繁程度</p></li><li><p>有多少个进程受死锁的影响</p></li></ul></li><li><p>检测时机</p><ul><li><p>有资源请求时就检测</p></li><li><p>定时检测</p></li><li><p>CPU使用率低于规定下限值时，进行检测</p><ul><li>死锁涉及较多进程时，CPU经常闲置</li></ul></li></ul></li></ul><h3 id="从死锁中恢复"><a href="#从死锁中恢复" class="headerlink" title="从死锁中恢复"></a>从死锁中恢复</h3><blockquote><p>主要有三种恢复方式：</p><ul><li><p>通过抢占资源实现恢复</p></li><li><p>通过回退执行实现恢复</p></li><li><p>通过杀掉进程实现恢复</p></li></ul></blockquote><h4 id="通过抢占资源实现恢复"><a href="#通过抢占资源实现恢复" class="headerlink" title="通过抢占资源实现恢复"></a>通过抢占资源实现恢复</h4><ul><li><p>挂起某些死锁进程，并抢占它的资源，将这些资源分配给其他的死锁进程，直至死锁环路被打破。</p></li><li><p>注意：要防止被挂起的进程长时间得不到资源</p></li></ul><h4 id="通过回退执行实现恢复"><a href="#通过回退执行实现恢复" class="headerlink" title="通过回退执行实现恢复"></a>通过回退执行实现恢复</h4><ul><li><p>让一个或多个进程回退到足以回避死锁的地步，进程回退时自愿释放资源而不是被剥夺。</p></li><li><p>注意：要求系统保持进程的历史信息，设置还原点。</p></li></ul><h4 id="通过杀掉进程实现恢复"><a href="#通过杀掉进程实现恢复" class="headerlink" title="通过杀掉进程实现恢复"></a>通过杀掉进程实现恢复</h4><ul><li><p>杀掉进程，回收资源：</p><ul><li><p>终止所有的死锁进程。</p></li><li><p>一次终止一个进程，直至消除死锁环路。</p></li></ul></li><li><p>终止进程的选择依据：</p><ul><li><p>进程优先级；</p></li><li><p>已运行时间，剩余时间；</p></li><li><p>使用资源及资源类型；</p></li><li><p>还需要多少资源？</p></li><li><p>进程是交互式的，还是批处理程序？</p></li></ul></li></ul><h2 id="处理死锁的综合方式"><a href="#处理死锁的综合方式" class="headerlink" title="处理死锁的综合方式"></a>处理死锁的综合方式</h2><ul><li><p>把以前介绍的基本方法组合起来，使得系统中各级资源都以最优的方式加以利用。</p></li><li><p>针对不同资源类采用不同策略。</p></li></ul><h3 id="操作系统处理死锁的三种方法比较"><a href="#操作系统处理死锁的三种方法比较" class="headerlink" title="操作系统处理死锁的三种方法比较"></a>操作系统处理死锁的三种方法比较</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221003162236717.png" alt="image-20221003162236660"></p><h1 id="第四章：调度"><a href="#第四章：调度" class="headerlink" title="第四章：调度"></a>第四章：调度</h1><h1 id="第五章：存储器管理"><a href="#第五章：存储器管理" class="headerlink" title="第五章：存储器管理"></a>第五章：存储器管理</h1><h2 id="分页技术"><a href="#分页技术" class="headerlink" title="分页技术"></a>分页技术</h2><h3 id="分页存储管理的基本概念"><a href="#分页存储管理的基本概念" class="headerlink" title="分页存储管理的基本概念"></a>分页存储管理的基本概念</h3><h1 id="第六章：文件系统"><a href="#第六章：文件系统" class="headerlink" title="第六章：文件系统"></a>第六章：文件系统</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="文件分类"><a href="#文件分类" class="headerlink" title="文件分类"></a>文件分类</h3><p>按文件的内部构造和处理方式分类</p><ul><li><p><strong>普通文件</strong>——由ASCII码或二进制码组成的字符文件</p><p>包括：源程序文件、数据文件、目标代码文件、系统文件、库文件等。一般存放在外存上。</p></li><li><p><strong>特别文件</strong>——特指各种外部设备</p><ul><li>特别文件分为字符特别文件和块特别文件。</li><li>字符特别文件是有关输入输出的设备，如终端、打印机等；</li><li>块特别文件是存储信息的设备，如硬盘、软盘和磁带等。</li></ul></li><li><p>目录文件—— 由下属文件的目录项构成</p><ul><li>用来管理和实现文件系统功能的系统文件，通过目录文件可以对其他文件的信息进行检索</li><li>目录文件类似于人事管理方面的花名册，本身不记录个人的档案信息，仅仅列出姓名和档案分类编号</li></ul></li></ul><h3 id="文件的逻辑结构"><a href="#文件的逻辑结构" class="headerlink" title="文件的逻辑结构"></a>文件的逻辑结构</h3><blockquote><p>从逻辑结构上看，文件可分为<code>有结构的记录式文件</code>和<code>无结构的流式文件</code>两种形式。</p></blockquote><h4 id="无结构文件"><a href="#无结构文件" class="headerlink" title="无结构文件"></a>无结构文件</h4><ul><li>指文件内部不再划分记录，是由一组相关信息组成的有序字符流。又称流式文件。</li><li>长度按字节计算。大量源程序、可执行程序、库函数都是流式文件。</li><li>在UNIX系统中所有文件都被视为流式文件，系统不对文件进行格式处理。</li></ul><h4 id="有结构文件"><a href="#有结构文件" class="headerlink" title="有结构文件"></a>有结构文件</h4><ul><li>文件是由若干相关记录组成，且对每个记录编上号码。又称记录式文件。</li><li>数据库文件就是有结构文件。<ul><li>定长记录文件</li><li>变长记录文件</li></ul></li><li>树形文件是一种有结构的文件。</li></ul><h2 id="文件的物理结构"><a href="#文件的物理结构" class="headerlink" title="文件的物理结构"></a>文件的物理结构</h2><p>物理结构主要依赖于文件存储器（磁带、磁盘、光盘等）的物理特性及用户对文件的访问方式。</p><ul><li><strong>顺序存取：</strong>基于磁带的存取模式。读操作按照文件指针指示的位置读取文件内容，文件指针自动向前推进。写操作把信息附加到文件的末尾。</li><li><strong>随机存取：</strong>基于磁盘的存取模式。允许以任意顺序读取文件，主要用于对大批数据的立即访问。</li><li><strong>索引存取：</strong>建立在随机存取之上。</li></ul><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><ul><li>逻辑文件在辅存上连续存储，其物理结构即为顺序结构。</li><li>顺序结构适合对文件的顺序访问。</li><li>对文件执行增补或删除只能在文件末端进行</li></ul><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221027205324500.png" alt="img" style="zoom:50%;" /><h3 id="链接结构"><a href="#链接结构" class="headerlink" title="链接结构"></a>链接结构</h3><p>文件在辅存中是散布在非连续的若干物理块中的，用向前指针把每个记录依次链接起来。<br>空间利用率高，文件操作（增加、删除）灵活。</p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221027205324547.png" alt="img" style="zoom:50%;" /><h3 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h3><p>文件的全部逻辑记录散存于辅存的各物理块中，为文件建立一张索引表，存放逻辑记录编号、长度、在辅存的位置。</p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221027205324544.png" alt="img" style="zoom:50%;" /><h2 id="文件系统的功能和结构"><a href="#文件系统的功能和结构" class="headerlink" title="文件系统的功能和结构"></a>文件系统的功能和结构</h2><h3 id="文件系统的功能"><a href="#文件系统的功能" class="headerlink" title="文件系统的功能"></a>文件系统的功能</h3><blockquote><p>操作系统中负责操纵和管理文件的一整套设施</p></blockquote><p>文件系统应具备以下功能</p><ol><li>文件管理</li><li>目录管理</li><li>文件存储空间管理</li><li>文件的共享和保护</li><li>提供方便的接口</li></ol><h3 id="文件系统的结构"><a href="#文件系统的结构" class="headerlink" title="文件系统的结构"></a>文件系统的结构</h3><p>文件系统的层次结构</p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221027204637614.png" alt="img" style="zoom: 50%;" /><p><strong>逻辑文件系统</strong></p><p>最上层是逻辑文件系统，它管理元数据信息。</p><ul><li>元数据包括除实际数据（文件内容）以外的所有文件系统结构。</li><li>创建文件控制块。</li><li>管理目录结构。</li><li>实现按名存取。</li><li>负责文件的保护和安全。</li><li>提供文件组织模块需要的信息。</li></ul><p><strong>文件组织模块</strong></p><p>文件组织模块把文件的逻辑块地址转换成物理块地址，传送给基本文件系统。负责管理空闲盘空间，记载文件系统中未分配的盘块。</p><p><strong>基本文件系统</strong></p><p>基本文件系统只需向相应的设备驱动程序发出通用命令，令其读&#x2F;写盘上的物理块。</p><p><strong>IO控制</strong></p><p>包括设备驱动程序和中断处理程序，实现内存和磁盘系统之间的信息传送。接收高级命令，输出低层的硬件专用指令，传送给控制器使用。</p><h2 id="目录结构和目录查询"><a href="#目录结构和目录查询" class="headerlink" title="目录结构和目录查询"></a>目录结构和目录查询</h2><h3 id="文件控制块"><a href="#文件控制块" class="headerlink" title="文件控制块"></a>文件控制块</h3><ul><li>为了便于对文件进行控制和管理，在文件系统内部，给每个文件唯一地设置一个文件控制块。</li><li>文件控制块存储：文件名、文件类型、大小、属性、保护信息、位置、使用计数、时间</li><li>核心利用这种结构对文件实施各种管理。按名存取时，先找到文件控制块，验证权限，合法时才能取得存放文件信息的盘块地址。</li></ul><h3 id="单级目录结构"><a href="#单级目录结构" class="headerlink" title="单级目录结构"></a>单级目录结构</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221027210808500.png" alt="单级目录结构"></p><p><strong>优点</strong></p><p>简单，能够实现按名存取</p><p><strong>缺点</strong></p><ul><li>查找速度慢</li><li>不允许重名</li><li>不便于共享<ul><li>这里的共享指的是相同的文件只存储一次，使用不同的文件名（不同的路径）访问这个文件。</li><li>单级目录要求所有用户用同一名字来访问同一个文件</li></ul></li></ul><h3 id="二级目录结构"><a href="#二级目录结构" class="headerlink" title="二级目录结构"></a>二级目录结构</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221027211110072.png" alt="二级目录结构"></p><p><strong>优点</strong></p><ul><li><p>不同用户可以有相同的文件名</p></li><li><p>提高了检索目录的速度</p></li><li><p>不同用户可以用不同的文件名访问系统中相同的文件，但该文件要各自存储</p></li></ul><p><strong>缺点</strong></p><p>不便于多个用户对某些盘区共同操作，不利于文件共享。</p><h3 id="树形目录结构"><a href="#树形目录结构" class="headerlink" title="树形目录结构"></a>树形目录结构</h3><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221027211444711.png" alt="image-20221027211444566"></p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221027211515945.png" alt="在这里插入图片描述"></p><p><strong>优点</strong></p><p>文件层次和隶属关系很清晰，便于实现不同级别的存取保护和文件系统的动态装卸。</p><p><strong>缺点</strong></p><ul><li>只能在用户级对文件进行临时共享。<ul><li>文件主创建一个文件并指定对其共享权限后，有权共享的用户可以利用相同的路径名对其实施限定操作。</li><li>当文件主删除文件后，其他用户就无法再使用该文件。</li></ul></li></ul><h3 id="非循环图目录结构"><a href="#非循环图目录结构" class="headerlink" title="非循环图目录结构"></a>非循环图目录结构</h3><blockquote><p>树形目录结构可以很方便地对文件进行分类，层次结构清晰，也能够更有效地进行文件的管理和保护。但是，树形结构不便于实现文件的共享。为此，提出了“无环图目录结构”。)</p></blockquote><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221027211627274.png" alt="在这里插入图片描述"></p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221027211810213.png" alt="image-20221027211809951"></p><h3 id="目录查询方法"><a href="#目录查询方法" class="headerlink" title="目录查询方法"></a>目录查询方法</h3><blockquote><ul><li><p>为了实现用户对文件的按名存取，系统要对文件目录进行查询，找出该文件的文件控制块或索引节点，进而找到该文件的物理地址，对其进行读写操作。</p></li><li><p>如何查询目录涉及目录管理算法，它对文件系统的效率、性能和可靠性有很大的影响。</p></li></ul></blockquote><p><strong>线性检索法</strong></p><p>又称顺序检索法。目录文件由目录项构成一个线性表，每个目录项包括文件名和指向数据块的指针</p><p><strong>特点</strong>：简单易行，速度慢</p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221027213000257.png" alt="image-20221027213000148" style="zoom:50%;" /><p><strong>散列法</strong></p><ul><li><p>散列法需要有散列表和目录文件，每个散列值是由文件名计算出来的，并且散列表项中有指向线性表中文件名的指针。利用线性表存放目录项，利用散列表进行检索。</p></li><li><p>维护和控制困难，容易造成目录混乱。</p></li></ul><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221027212315811.png" alt="image-20221027212315734" style="zoom: 80%;" /><h2 id="文件和目录操作"><a href="#文件和目录操作" class="headerlink" title="文件和目录操作"></a>文件和目录操作</h2><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><ol><li>创建文件create</li><li>删除文件delete</li><li>打开文件open</li><li>关闭文件close</li><li>读文件read</li><li>写文件write</li><li>附加文件append</li><li>读写定位seek</li><li>取文件属性get_attributes</li><li>置文件属性set_attributes</li><li>重新命名文件rename</li></ol><h3 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h3><ol><li>创建目录create</li><li>删除目录delete</li><li>打开目录opendir</li><li>关闭目录closedir</li><li>读目录readdir</li><li>重新命名目录rename</li><li>链接文件link</li><li>解除链接unlink</li></ol><h2 id="文件系统的实现"><a href="#文件系统的实现" class="headerlink" title="文件系统的实现"></a>文件系统的实现</h2><h3 id="文件存储分配"><a href="#文件存储分配" class="headerlink" title="文件存储分配"></a>文件存储分配</h3><blockquote><p> 详情参考：<a href="https://blog.csdn.net/weixin_43914604/article/details/106303759%EF%BC%8C%E5%86%85%E5%AE%B9%E9%9D%9E%E5%B8%B8%E6%B8%85%E6%99%B0%EF%BC%8C%E5%90%8C%E6%97%B6%E8%BF%99%E9%87%8C%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%80%83%E8%AE%A1%E7%AE%97%E9%A2%98%E3%80%82">https://blog.csdn.net/weixin_43914604/article/details/106303759，内容非常清晰，同时这里可能会考计算题。</a></p></blockquote><h4 id="连续分配"><a href="#连续分配" class="headerlink" title="连续分配"></a>连续分配</h4><p>连续分配方法要求把逻辑文件中的信息顺序地存放到一组邻接的物理盘块中</p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221028203425616.png" alt="image-20221028203425532" style="zoom: 50%;" /><p><strong>优点</strong></p><ul><li>在顺序存取时速度较快，一次可以存取多个盘块，改进了I&#x2F;O性能；</li><li>很容易直接存取文件中的任意一块，如文件的起始块是b，则访问第i块的地址是b+i。</li></ul><p><strong>缺点</strong></p><ul><li>要求建立文件时就确定它的长度（预先说明文件的大小），依此分配存储空间，很难实现；</li><li>不便于文件的动态扩充；</li><li>可能出现外部碎片，有时需要紧缩</li></ul><h4 id="链接分配"><a href="#链接分配" class="headerlink" title="链接分配"></a>链接分配</h4><p>为了克服连续分配的缺点，把一个逻辑上连续的文件分散存放在不同的物理块中，这些物理块用指针链接起来</p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221028203549848.png" alt="image-20221028203549760" style="zoom:50%;" /><p><strong>优点</strong></p><ul><li><p>解决了连续分配的缺点，便于文件动态增长；</p></li><li><p>不会产生磁盘的外部碎片，不需要紧缩磁盘空间。</p></li></ul><p><strong>缺点</strong></p><ul><li>适于对信息的顺序访问，不利于对文件的随机存取。<ul><li>如为了存取第i块，必须从头向后顺序检索。</li></ul></li><li>每个物理块上增加一个链接字，增加空间开销。</li><li>一旦中间的链接字丢失，则后面的内容找不到，可靠性低。<ul><li>可以考虑双向指针</li></ul></li></ul><h4 id="索引分配"><a href="#索引分配" class="headerlink" title="索引分配"></a>索引分配</h4><p>为每个文件创建一个索引表，索引表中存放文件所在磁盘的物理块号。索引表本身也放在盘块中</p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20221028203757163.png" alt="image-20221028203757070" style="zoom:50%;" /><p><strong>优点</strong></p><ul><li>索引分配结合了顺序分配和链接分配的优点，并克服了它们的缺点。</li><li>文件可动态增长；没有外部碎片，不需要紧缩。</li><li>方便进行随机存取，可靠性高。</li></ul><p><strong>缺点</strong></p><ul><li>索引表增加了空间的开销；</li><li>两次访盘，存取速度下降。</li><li><strong>解决办法</strong>：可以把索引表部分或全部放入内存。以内存空间代价换取存取速度</li></ul><h4 id="多重索引文件分配"><a href="#多重索引文件分配" class="headerlink" title="多重索引文件分配"></a>多重索引文件分配</h4><p>采用间接索引方式</p><h3 id="空闲存储空间的管理"><a href="#空闲存储空间的管理" class="headerlink" title="空闲存储空间的管理"></a>空闲存储空间的管理</h3><blockquote><p> 参考链接：<a href="https://blog.csdn.net/weixin_43914604/article/details/106373112">https://blog.csdn.net/weixin_43914604/article/details/106373112</a></p></blockquote><h2 id="文件系统的可靠性"><a href="#文件系统的可靠性" class="headerlink" title="文件系统的可靠性"></a>文件系统的可靠性</h2><p>造成数据丢失或数据损坏的原因有多种：</p><ol><li>用户误操作，强行删除或覆盖一些重要文件</li><li>硬件发生故障</li><li>软件本身存在故障而造成数据丢失</li></ol><p>为了提高文件系统的可靠性，常用的方法有：</p><ol><li>磁盘坏块管理</li><li>后备</li><li>盘块一致性检查和文件一致性检查</li></ol><h1 id="第七章：输入输出系统"><a href="#第七章：输入输出系统" class="headerlink" title="第七章：输入输出系统"></a>第七章：输入输出系统</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章：操作系统引论&quot;&gt;&lt;a href=&quot;#第一章：操作系统引论&quot; class=&quot;headerlink&quot; title=&quot;第一章：操作系统引论&quot;&gt;&lt;/a&gt;第一章：操作系统引论&lt;/h1&gt;&lt;h2 id=&quot;计算机系统概述&quot;&gt;&lt;a href=&quot;#计算机系统概述&quot; class</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://blog.bywind.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="计算机基础" scheme="https://blog.bywind.xyz/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Fiddler抓包</title>
    <link href="https://blog.bywind.xyz/posts/f73eaef5.html"/>
    <id>https://blog.bywind.xyz/posts/f73eaef5.html</id>
    <published>2022-09-18T06:40:11.000Z</published>
    <updated>2024-07-03T08:28:05.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Fiddler设置"><a href="#Fiddler设置" class="headerlink" title="Fiddler设置"></a>Fiddler设置</h1><p>在<code>Tools -&gt; Options</code>中设置</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20220918145404859.png" alt="image-20220918145404819"></p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20220918145351856.png" alt="image-20220918145351794"></p><h1 id="移动端抓包"><a href="#移动端抓包" class="headerlink" title="移动端抓包"></a>移动端抓包</h1><h2 id="确保手机和电脑在同一局域网"><a href="#确保手机和电脑在同一局域网" class="headerlink" title="确保手机和电脑在同一局域网"></a>确保手机和电脑在同一局域网</h2><h2 id="勾选远程连接"><a href="#勾选远程连接" class="headerlink" title="勾选远程连接"></a>勾选远程连接</h2><p>fiddler&gt;Tools&gt;Fiddler Options&gt;Connections 勾选Allow remote computers to connect</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20220918145845630.png" alt="image-20220918145351794"></p><h2 id="查看电脑ip地址"><a href="#查看电脑ip地址" class="headerlink" title="查看电脑ip地址"></a>查看电脑ip地址</h2><p>（如下或cmd中输入<code>ipconfig</code>查看以太网IPv4地址）</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20220918145513857.png" alt="image-20220918145513857"></p><h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><p>1）手机设置-&gt;WLAN设置-&gt;修改网络-&gt;高级选项-&gt;代理</p><p>2）配置主机名：与主机电脑IP地址保持一致<br>端口号：8888</p><p>3）保存后就可以抓到来自手机的请求了。</p><h1 id="PC端微信小程序抓包"><a href="#PC端微信小程序抓包" class="headerlink" title="PC端微信小程序抓包"></a>PC端微信小程序抓包</h1><h2 id="勾选远程连接-1"><a href="#勾选远程连接-1" class="headerlink" title="勾选远程连接"></a>勾选远程连接</h2><p>fiddler&gt;Tools&gt;Fiddler Options&gt;Connections 勾选Allow remote computers to connect</p><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20220918145845630.png" alt="image-20220918145351794"></p><h2 id="设置代理-1"><a href="#设置代理-1" class="headerlink" title="设置代理"></a>设置代理</h2><p><img src="https://cloud-image-host.oss-cn-beijing.aliyuncs.com/img/image-20220918150748694.png" alt="image-20220918150748662"></p><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>删除<code>C:\Users\DELL\AppData\Roaming\Tencent\WeChat\XPlugin\Plugins\WMPFRuntime</code>下的文件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Fiddler设置&quot;&gt;&lt;a href=&quot;#Fiddler设置&quot; class=&quot;headerlink&quot; title=&quot;Fiddler设置&quot;&gt;&lt;/a&gt;Fiddler设置&lt;/h1&gt;&lt;p&gt;在&lt;code&gt;Tools -&amp;gt; Options&lt;/code&gt;中设置&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="经验分享" scheme="https://blog.bywind.xyz/categories/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="Fiddler" scheme="https://blog.bywind.xyz/tags/Fiddler/"/>
    
  </entry>
  
  <entry>
    <title>Butterfly重装日记</title>
    <link href="https://blog.bywind.xyz/posts/5f262806.html"/>
    <id>https://blog.bywind.xyz/posts/5f262806.html</id>
    <published>2022-09-06T03:00:14.000Z</published>
    <updated>2023-07-22T15:56:23.734Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自定义-Twikoo-访客通知邮件模板"><a href="#自定义-Twikoo-访客通知邮件模板" class="headerlink" title="自定义 Twikoo 访客通知邮件模板"></a>自定义 Twikoo 访客通知邮件模板</h1><details class="folding-tag" cyan><summary> 效果预览 </summary>              <div class='content'>              <p><img src="https://guole.fun/posts/62740/%E8%87%AA%E5%AE%9A%E4%B9%89%E9%82%AE%E4%BB%B6%E9%80%9A%E7%9F%A5%E6%A8%A1%E6%9D%BF.jpg"></p>              </div>            </details><details class="folding-tag" cyan><summary> 点击查看参考教程 </summary>              <div class='content'>              <div class="tabs" id="email"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#email-1">压缩后的代码</button></li><li class="tab"><button type="button" data-href="#email-2">原通知模板备份</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="email-1"><p>注意其中我的博客地址、logo 什么的，需要修改为你自己的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;isForwardContent&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;         background: white;         width: 95%;         max-width: 800px;         margin: auto auto;         border-radius: 5px;         border: #49b1f5 1px solid;         overflow: hidden;         -webkit-box-shadow: 0px 0px 20px 0px rgba(0, 0, 0, 0.12);         box-shadow: 0px 0px 20px 0px rgba(0, 0, 0, 0.18);       &quot;</span>&gt;</span><span class="tag">&lt;<span class="name">header</span> <span class="attr">style</span>=<span class="string">&quot;overflow: hidden&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.guole.fun/img/bg.min.jpg&quot;</span><span class="attr">style</span>=<span class="string">&quot;width: 100%; z-index: 666&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;padding: 5px 20px&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dear&quot;</span><span class="attr">style</span>=<span class="string">&quot;             position: relative;             color: white;             float: left;             z-index: 999;             background: #49b1f5;             padding: 5px 30px;             margin: -25px auto 0;             box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.3);           &quot;</span>&gt;</span>Dear $&#123;PARENT_NICK&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>来自<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>$&#123;NICK&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="symbol">&amp;nbsp;</span>的回复<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span> <span class="attr">style</span>=<span class="string">&quot;width:200px;border:0;border-bottom:1px solid #e5e5e5;margin:12px auto;&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>您在<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;POST_URL&#125;&quot;</span><span class="attr">style</span>=<span class="string">&quot;text-decoration: none; color: #49b1f5&quot;</span><span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span>$&#123;SITE_NAME&#125;<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>上发表的评论：<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tk-content&quot;</span><span class="attr">style</span>=<span class="string">&quot; border-bottom: #ddd 1px solid; border-left: #ddd 1px solid; padding-bottom: 20px; background-color: #eee; margin: 15px 0px; padding-left: 20px; padding-right: 20px; border-top: #ddd 1px solid; border-right: #ddd 1px solid;  padding-top: 20px;&quot;</span>&gt;</span>$&#123;PARENT_COMMENT&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>$&#123;NICK&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="symbol">&amp;nbsp;</span>给您回复啦：<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tk-content&quot;</span><span class="attr">style</span>=<span class="string">&quot; border-bottom: #ddd 1px solid; border-left: #ddd 1px solid; padding-bottom: 20px; background-color: #eee;  margin: 15px 0px;  padding-left: 20px; padding-right: 20px; border-top: #ddd 1px solid; border-right: #ddd 1px solid; padding-top: 20px; &quot;</span>&gt;</span>$&#123;COMMENT&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>欢迎再次光临<span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">&quot;text-decoration:none; color:#12addb&quot;</span><span class="attr">href</span>=<span class="string">&quot;$&#123;SITE_URL&#125;&quot;</span><span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>$&#123;SITE_NAME&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>！<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;chakan&quot;</span><span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;POST_URL&#125;&quot;</span><span class="attr">style</span>=<span class="string">&quot;color:#ffffff;text-decoration:none;display:inline-block;min-height:28px;line-height:28px;padding:0 13px;outline:0;background:#3eae5f;font-size:13px;text-align: center;font-weight:400;border:0;border-radius:999em&quot;</span><span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>点击去原文查看<span class="symbol">&amp;gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer-p&quot;</span><span class="attr">style</span>=<span class="string">&quot;text-align: center; margin-top: 5rem; display:block;color:#b3b3b1;text-decoration:none;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.guole.fun/logo/guole.fun.png&quot;</span><span class="attr">style</span>=<span class="string">&quot;width:1.8rem; margin:0 auto&quot;</span>/&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">hr</span> <span class="attr">style</span>=<span class="string">&quot;width:165px;border:0;border-bottom:1px solid #e5e5e5;margin:5px auto;&quot;</span>/&gt;</span>©<span class="symbol">&amp;nbsp;</span>2021<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://guole.fun/&quot;</span><span class="attr">style</span>=<span class="string">&quot;text-align:center; color: #0da1e6a6&quot;</span><span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>guole.fun<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"><span class="selector-class">.qmbox</span>::-webkit-scrollbar&#123;<span class="attribute">display</span>:none&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">style</span> <span class="attr">id</span>=<span class="string">&quot;cloudAttachStyle&quot;</span><span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"><span class="selector-class">.qmbox</span><span class="selector-id">#divNeteaseBigAttach</span>,<span class="selector-class">.qmbox</span><span class="selector-id">#divNeteaseBigAttach_bak</span>&#123;<span class="attribute">display</span>:none&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">style</span> <span class="attr">id</span>=<span class="string">&quot;blockquoteStyle&quot;</span><span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"><span class="selector-class">.qmbox</span> <span class="selector-tag">blockquote</span>&#123;<span class="attribute">display</span>:none&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"><span class="selector-class">.qmbox</span> <span class="selector-tag">body</span>&#123;<span class="attribute">font-size</span>:<span class="number">14px</span>;<span class="attribute">font-family</span>:arial,verdana,sans-serif;<span class="attribute">line-height</span>:<span class="number">1.666</span>;<span class="attribute">padding</span>:<span class="number">0</span>;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">overflow</span>:auto;<span class="attribute">white-space</span>:normal;<span class="attribute">word-wrap</span>:break-word;<span class="attribute">min-height</span>:<span class="number">100px</span>&#125;<span class="selector-class">.qmbox</span> <span class="selector-tag">td</span>,<span class="selector-class">.qmbox</span> <span class="selector-tag">input</span>,<span class="selector-class">.qmbox</span> <span class="selector-tag">button</span>,<span class="selector-class">.qmbox</span> select,<span class="selector-class">.qmbox</span> <span class="selector-tag">body</span>&#123;<span class="attribute">font-family</span>:Helvetica,<span class="string">&#x27;Microsoft Yahei&#x27;</span>,verdana&#125;<span class="selector-class">.qmbox</span> pre&#123;<span class="attribute">white-space</span>:pre-wrap;<span class="attribute">white-space</span>:-moz-pre-wrap;<span class="attribute">white-space</span>:-pre-wrap;<span class="attribute">white-space</span>:-o-pre-wrap;<span class="attribute">word-wrap</span>:break-word;<span class="attribute">width</span>:<span class="number">95%</span>&#125;<span class="selector-class">.qmbox</span> <span class="selector-tag">th</span>,<span class="selector-class">.qmbox</span> <span class="selector-tag">td</span>&#123;<span class="attribute">font-family</span>:arial,verdana,sans-serif;<span class="attribute">line-height</span>:<span class="number">1.666</span>&#125;<span class="selector-class">.qmbox</span> <span class="selector-tag">img</span>&#123;<span class="attribute">border</span>:<span class="number">0</span>&#125;<span class="selector-class">.qmbox</span> <span class="selector-tag">header</span>,<span class="selector-class">.qmbox</span> <span class="selector-tag">footer</span>,<span class="selector-class">.qmbox</span> <span class="selector-tag">section</span>,<span class="selector-class">.qmbox</span> <span class="selector-tag">aside</span>,<span class="selector-class">.qmbox</span> <span class="selector-tag">article</span>,<span class="selector-class">.qmbox</span> <span class="selector-tag">nav</span>,<span class="selector-class">.qmbox</span> <span class="selector-tag">hgroup</span>,<span class="selector-class">.qmbox</span> <span class="selector-tag">figure</span>,<span class="selector-class">.qmbox</span> <span class="selector-tag">figcaption</span>&#123;<span class="attribute">display</span>:block&#125;<span class="selector-class">.qmbox</span> <span class="selector-tag">blockquote</span>&#123;<span class="attribute">margin-right</span>:<span class="number">0px</span>&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"><span class="keyword">@media</span> screen <span class="keyword">and</span>(<span class="attribute">max-width</span>:<span class="number">1100px</span>)&#123;<span class="selector-id">#content</span> <span class="selector-tag">p</span>&#123;<span class="attribute">font-size</span>:<span class="number">10px</span>&#125;<span class="selector-id">#content</span> <span class="selector-tag">h3</span>&#123;<span class="attribute">font-size</span>:<span class="number">14px</span>&#125;<span class="selector-class">.footer-p</span>&#123;<span class="attribute">font-size</span>:<span class="number">9px</span>&#125;<span class="selector-class">.dear</span>&#123;<span class="attribute">font-size</span>:<span class="number">12px</span>&#125;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">style</span> <span class="attr">id</span>=<span class="string">&quot;ntes_link_color&quot;</span><span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"><span class="selector-class">.qmbox</span> <span class="selector-tag">a</span>,<span class="selector-class">.qmbox</span> <span class="selector-tag">td</span> <span class="selector-tag">a</span>&#123;<span class="attribute">color</span>:<span class="number">#236da1</span>&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="email-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border-top:2px solid #12ADDB;box-shadow:0 1px 3px #AAAAAA;line-height:180%;padding:0 15px 12px;margin:50px auto;font-size:12px;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&quot;border-bottom:1px solid #dddddd;font-size:14px;font-weight:normal;padding:13px 0 10px 8px;&quot;</span>&gt;</span>您在</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">&quot;text-decoration:none;color: #12ADDB;&quot;</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;SITE_URL&#125;&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>$&#123;SITE_NAME&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>上的评论有了新的回复<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>$&#123;PARENT_NICK&#125; 同学，您曾发表评论：</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;padding:0 12px 0 12px;margin-top:18px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #f5f5f5;padding: 10px 15px;margin:18px 0;word-wrap:break-word;&quot;</span>&gt;</span>$&#123;PARENT_COMMENT&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">strong</span>&gt;</span>$&#123;NICK&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>回复说：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #f5f5f5;padding: 10px 15px;margin:18px 0;word-wrap:break-word;&quot;</span>&gt;</span>$&#123;COMMENT&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>您可以点击</span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">&quot;text-decoration:none; color:#12addb&quot;</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;POST_URL&#125;&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>查看回复的完整內容<span class="tag">&lt;/<span class="name">a</span>&gt;</span>， 欢迎再次光临</span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">&quot;text-decoration:none; color:#12addb&quot;</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;SITE_URL&#125;&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>$&#123;SITE_NAME&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>。</span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><h1 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h1><details class="folding-tag" cyan><summary> 点击查看参考教程 </summary>              <div class='content'>              <p>1.安装插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-blog-encrypt</span><br></pre></td></tr></table></figure><p>2.在<code>_config.yml</code>文件中添加内容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">encrypt:</span><br><span class="line">enable:true</span><br></pre></td></tr></table></figure><p>3.在文章头部加上对应文字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo加密功能</span><br><span class="line">date: 2019-09-04 23:20:00   </span><br><span class="line">tags: [学习笔记,Hexo]</span><br><span class="line">categories: Hexo      </span><br><span class="line">password: smile   </span><br><span class="line">abstract: Welcome to my blog, enter password to read. </span><br><span class="line">message: 密码输入框上描述性内容</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>参数说明</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>password</td><td>该Blog使用的密码</td></tr><tr><td>abstract</td><td>Blog摘要文字（少量）</td></tr><tr><td>message</td><td>密码框上的描述性文字</td></tr></tbody></table>              </div>            </details><h1 id="导航栏居中"><a href="#导航栏居中" class="headerlink" title="导航栏居中"></a>导航栏居中</h1><details class="folding-tag" cyan><summary> 点击查看参考教程 </summary>              <div class='content'>              <p>自定义css中加入以下代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#nav</span> <span class="selector-class">.menus_items</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: fit-content;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.menus_item_child</span> <span class="selector-tag">li</span><span class="selector-pseudo">:not</span>(<span class="selector-id">#sidebar-menus</span> <span class="selector-tag">li</span>)&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">6px</span><span class="meta">!important</span>;</span><br><span class="line">    -webkit-<span class="attribute">border-radius</span>: <span class="number">6px</span><span class="meta">!important</span>;</span><br><span class="line">    -moz-<span class="attribute">border-radius</span>: <span class="number">6px</span><span class="meta">!important</span>;</span><br><span class="line">    -ms-<span class="attribute">border-radius</span>: <span class="number">6px</span><span class="meta">!important</span>;</span><br><span class="line">    -o-<span class="attribute">border-radius</span>: <span class="number">6px</span><span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.menus_item_child</span><span class="selector-pseudo">:not</span>(<span class="selector-id">#sidebar-menus</span> <span class="selector-tag">ul</span>)&#123;</span><br><span class="line">    <span class="attribute">left</span>:<span class="built_in">calc</span>(-<span class="number">50%</span>)<span class="meta">!important</span>;<span class="comment">/*这是估算值，为了保持元素居中的，如果不合适可以自己调*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*导航条间距*/</span></span><br><span class="line"><span class="selector-id">#nav</span> <span class="selector-class">.menus_items</span> <span class="selector-class">.menus_item</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#nav</span> <span class="selector-class">.menus_items</span> <span class="selector-class">.menus_item</span> <span class="selector-class">.menus_item_child</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">6px</span><span class="meta">!important</span>;</span><br><span class="line">    -webkit-<span class="attribute">border-radius</span>: <span class="number">6px</span><span class="meta">!important</span>;</span><br><span class="line">    -moz-<span class="attribute">border-radius</span>: <span class="number">6px</span><span class="meta">!important</span>;</span><br><span class="line">    -ms-<span class="attribute">border-radius</span>: <span class="number">6px</span><span class="meta">!important</span>;</span><br><span class="line">    -o-<span class="attribute">border-radius</span>: <span class="number">6px</span><span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h1 id="博客访问统计"><a href="#博客访问统计" class="headerlink" title="博客访问统计"></a>博客访问统计</h1><details class="folding-tag" cyan><summary> 点击查看参考教程 </summary>              <div class='content'>              <p>1.写在需要的页面引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;statistic&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- js --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 链接替换即可，不需要后面的参数</span></span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">&#x27;https://v6-widget.51.la/v6/JqNOFlYj12ogPJ9Y/quote.js&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">text</span>()).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> title = [<span class="string">&#x27;最近活跃访客&#x27;</span>, <span class="string">&#x27;今日人数&#x27;</span>, <span class="string">&#x27;今日访问&#x27;</span>, <span class="string">&#x27;昨日人数&#x27;</span>, <span class="string">&#x27;昨日访问&#x27;</span>, <span class="string">&#x27;本月访问&#x27;</span>, <span class="string">&#x27;总访问量&#x27;</span>]</span><br><span class="line">    <span class="keyword">let</span> num = data.<span class="title function_">match</span>(<span class="regexp">/(?&lt;=&lt;\/span&gt;&lt;span&gt;).*?(?=&lt;\/span&gt;&lt;\/p&gt;)/g</span>)</span><br><span class="line">    <span class="keyword">let</span> order = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>] <span class="comment">// 新增  可排序，如果需要隐藏则删除对应数字即可。</span></span><br><span class="line">    <span class="comment">// 示例：[1, 3, 2, 4, 5] 显示 [&#x27;今日人数&#x27;, &#x27;昨日人数&#x27;, &#x27;今日访问&#x27;, &#x27;昨日访问&#x27;, &#x27;本月访问&#x27;]，不显示 最近活跃访客(0) 和 总访问量(6)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; order.<span class="property">length</span>; i++) &#123; <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;#statistic .content&#x27;</span>)[<span class="number">0</span>].<span class="property">innerHTML</span> += <span class="string">&#x27;&lt;div&gt;&lt;span&gt;&#x27;</span> + title[order[i]] + <span class="string">&#x27;&lt;/span&gt;&lt;span class=&quot;num&quot;&gt;&#x27;</span> + num[order[i]] + <span class="string">&#x27;&lt;/span&gt;&lt;/div&gt;&#x27;</span> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>引入css<br>在自定义的css中加入以下代码<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#statistic</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--font-color);</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(--card-bg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#statistic</span> <span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#statistic</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#statistic</span> <span class="selector-class">.content</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#statistic</span> <span class="selector-tag">div</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.3</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#statistic</span> <span class="selector-tag">div</span> <span class="selector-class">.num</span> &#123;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: .<span class="number">8rem</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>              </div>            </details><h1 id="友链朋友圈"><a href="#友链朋友圈" class="headerlink" title="友链朋友圈"></a>友链朋友圈</h1><details class="folding-tag" cyan><summary> 点击查看参考教程 </summary>              <div class='content'>              <p>参考：<a href="https://fcircle-doc.yyyzyyyz.cn/#/">友链朋友圈</a></p><p>使用gitHub+vercel+sqlite部署</p>              </div>            </details><h1 id="random-js实现页面随机跳转"><a href="#random-js实现页面随机跳转" class="headerlink" title="random.js实现页面随机跳转"></a>random.js实现页面随机跳转</h1><details class="folding-tag" cyan><summary> 点击查看参考教程 </summary>              <div class='content'>              <p>1.新建 <code>themes/butterfly/scripts/helpers/random.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">hexo.<span class="property">extend</span>.<span class="property">generator</span>.<span class="title function_">register</span>(<span class="string">&#x27;random&#x27;</span>, <span class="keyword">function</span> (<span class="params">locals</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> config = hexo.<span class="property">config</span>.<span class="property">random</span> || &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> posts = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> post <span class="keyword">of</span> locals.<span class="property">posts</span>.<span class="property">data</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (post.<span class="property">random</span> !== <span class="literal">false</span>) posts.<span class="title function_">push</span>(post.<span class="property">path</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">path</span>: config.<span class="property">path</span> || <span class="string">&#x27;bywind/random.js&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: <span class="string">`var posts=<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(posts)&#125;</span>;function toRandomPost()&#123;window.open(&#x27;/&#x27;+posts[Math.floor(Math.random() * posts.length)],&quot;_self&quot;);&#125;;`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.在主题配置文件引入,<code>themes/butterfly/_config.yml</code>，inject的bottom里添加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/bywind/random.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>              </div>            </details><h1 id="友链美化"><a href="#友链美化" class="headerlink" title="友链美化"></a>友链美化</h1><details class="folding-tag" cyan><summary> 点击查看参考教程 </summary>              <div class='content'>              <p>在自定义css中加入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/* 头像微调 */</span></span><br><span class="line"><span class="selector-class">.flink-item-icon</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">transition</span>: .<span class="number">5s</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.flink-item-name</span>,</span><br><span class="line"><span class="selector-class">.flink-item-desc</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">10px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 去掉原来自带的before */</span></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-class">.flink</span> <span class="selector-class">.flink-list</span>&gt;<span class="selector-class">.flink-list-item</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*友链边框*/</span></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-class">.flink</span> <span class="selector-class">.flink-list</span> &gt; <span class="selector-class">.flink-list-item</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#c0c6d8</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 鼠标经过改变背景 */</span></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-class">.flink</span> <span class="selector-class">.flink-list</span>&gt;<span class="selector-class">.flink-list-item</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#61bcf2cc</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 鼠标经过改变文字颜色 */</span></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-class">.flink</span> <span class="selector-class">.flink-list</span>&gt;<span class="selector-class">.flink-list-item</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: white <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 鼠标经过头像滚动 */</span></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-class">.flink</span> <span class="selector-class">.flink-list</span>&gt;<span class="selector-class">.flink-list-item</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.flink-item-icon</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">70px</span>;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">180deg</span>);</span><br><span class="line">    -moz-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">180deg</span>);</span><br><span class="line">    -o-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">180deg</span>);</span><br><span class="line">    -ms-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">180deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h1 id="宽屏适配"><a href="#宽屏适配" class="headerlink" title="宽屏适配"></a>宽屏适配</h1><details class="folding-tag" cyan><summary> 点击查看参考教程 </summary>              <div class='content'>              <p>参考：<a href="https://yisous.xyz/posts/d1fc759/?time=1665232765761">https://yisous.xyz/posts/d1fc759/?time=1665232765761</a><br>1.在自定义css中加入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-class">.layout</span>&#123;</span><br><span class="line">     <span class="attribute">max-width</span>:<span class="number">1400px</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.aside-content</span>&#123;</span><br><span class="line">     <span class="attribute">max-width</span>:<span class="number">312px</span>;</span><br><span class="line">     <span class="attribute">min-width</span>:<span class="number">300px</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">900px</span>)&#123;</span><br><span class="line">     <span class="selector-class">.aside-content</span>&#123;</span><br><span class="line">         <span class="attribute">max-width</span>:none<span class="meta">!important</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">/*分页适配宽屏*/</span></span><br><span class="line"> <span class="selector-id">#archive</span>,<span class="selector-id">#page</span>,<span class="selector-id">#category</span>,<span class="selector-id">#tag</span>&#123;</span><br><span class="line">     <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.page</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.page</span><span class="selector-class">.home</span>) <span class="selector-class">.aside-content</span>&#123;</span><br><span class="line">     <span class="attribute">display</span>: none;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.flink-list-item</span>&#123;</span><br><span class="line">     <span class="attribute">width</span>:<span class="built_in">calc</span>(<span class="number">100%</span> / <span class="number">4</span> - <span class="number">15px</span>)<span class="meta">!important</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1250px</span>) &#123;</span><br><span class="line">     <span class="selector-class">.flink-list-item</span>&#123;</span><br><span class="line">         <span class="attribute">width</span>:<span class="built_in">calc</span>(<span class="number">100%</span> / <span class="number">3</span> - <span class="number">15px</span>)<span class="meta">!important</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*图库宽屏适配*/</span></span><br><span class="line"> <span class="selector-class">.gallery-group</span> &#123;</span><br><span class="line">     <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">33%</span> - <span class="number">8px</span>)<span class="meta">!important</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>              </div>            </details><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">参考链接：https://anzhiy.cn/posts/sdxhu.html</span><br><span class="line">动画：https://blog.justlovesmile.top/posts/e24ee5c3.html</span><br><span class="line">Butterfly主题美化教程：https://butterfly.zhheo.com/docs/</span><br><span class="line">提取图片主题色：https://blog.justlovesmile.top/posts/b16c0eda.html</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;自定义-Twikoo-访客通知邮件模板&quot;&gt;&lt;a href=&quot;#自定义-Twikoo-访客通知邮件模板&quot; class=&quot;headerlink&quot; title=&quot;自定义 Twikoo 访客通知邮件模板&quot;&gt;&lt;/a&gt;自定义 Twikoo 访客通知邮件模板&lt;/h1&gt;&lt;deta</summary>
      
    
    
    
    <category term="Hexo魔改" scheme="https://blog.bywind.xyz/categories/Hexo%E9%AD%94%E6%94%B9/"/>
    
    
    <category term="Hexo" scheme="https://blog.bywind.xyz/tags/Hexo/"/>
    
    <category term="Butterfly" scheme="https://blog.bywind.xyz/tags/Butterfly/"/>
    
  </entry>
  
  <entry>
    <title>SSM常用注解</title>
    <link href="https://blog.bywind.xyz/posts/ab51b467.html"/>
    <id>https://blog.bywind.xyz/posts/ab51b467.html</id>
    <published>2022-09-05T15:05:40.000Z</published>
    <updated>2023-07-22T15:51:13.334Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="Spring常用注解"><a href="#Spring常用注解" class="headerlink" title="Spring常用注解"></a>Spring常用注解</h2><table><thead><tr><th align="center">注解</th><th align="center">作用范围</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">@Import</td><td align="center">类</td><td align="center">导入其他配置类</td></tr><tr><td align="center">@Autowired</td><td align="center">属性或方法</td><td align="center">由Spring提供，只按照byType注入</td></tr><tr><td align="center">@Qualifer</td><td align="center">属性或方法</td><td align="center">使用@Autowired时，可以使用@Qualifer(“beanName”)明确指定Bean的名称进行注入（适用于多个同一类型的Bean）</td></tr><tr><td align="center">@Resource</td><td align="center">属性或方法</td><td align="center">由J2EE提供，按照名称进行装配，默认按照byName自动注入</td></tr><tr><td align="center">@Configuration</td><td align="center">类</td><td align="center">指定当前类为一个配置类</td></tr><tr><td align="center">@Component</td><td align="center">类</td><td align="center">把当前类对象存入spring容器中</td></tr><tr><td align="center">@ComponentScan</td><td align="center">主配置类</td><td align="center">指定spring在创建容器时要扫描的包</td></tr><tr><td align="center">@Bean</td><td align="center">类</td><td align="center">把当前方法的返回值作为bean对象存入spring的ioc容器中</td></tr><tr><td align="center">@Value</td><td align="center">属性或set方法</td><td align="center">注入数据（例： @Value(“${jdbc.driver}”)）</td></tr><tr><td align="center">@Controller</td><td align="center">类</td><td align="center">用于表现层</td></tr><tr><td align="center">@Service</td><td align="center">类</td><td align="center">用于业务层</td></tr><tr><td align="center">@Respository</td><td align="center">类</td><td align="center">用于持久层</td></tr><tr><td align="center">@Aspect</td><td align="center">类</td><td align="center">将当前类定义为切面类</td></tr><tr><td align="center">@After</td><td align="center">方法</td><td align="center">在方法执行之后执行</td></tr><tr><td align="center">@Before</td><td align="center">方法</td><td align="center">在方法执行之前执行</td></tr><tr><td align="center">@Around</td><td align="center">方法</td><td align="center">在方法执行之前与之后执行</td></tr><tr><td align="center">@Pointcut</td><td align="center">方法</td><td align="center">声明切点、定义切入点表达式</td></tr><tr><td align="center">@AfterReturming</td><td align="center">方法</td><td align="center">定义后置增强</td></tr><tr><td align="center">@AfterThrowing</td><td align="center">方法</td><td align="center">定义异常抛出增强</td></tr></tbody></table><p>区别：1、@Autowired注解由Spring提供，只按照byType注入；@Resource注解由J2EE提供，默认按照byName自动注入。2、@Autowired默认按类型进行装配，@Resource默认按照名称进行装配。</p><h2 id="SpringMVC常用注解"><a href="#SpringMVC常用注解" class="headerlink" title="SpringMVC常用注解"></a>SpringMVC常用注解</h2><table><thead><tr><th align="center">注解</th><th align="center">作用范围</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">@Controller</td><td align="center">类</td><td align="center">表明这个类是SpringMVC里的Controller</td></tr><tr><td align="center">@RestController</td><td align="center">类</td><td align="center">表明这个类是SpringMVC里的Controller，组合了@Controller和@ResponseBody，同时返回json格式数据</td></tr><tr><td align="center">@RequestMapping</td><td align="center">类或方法</td><td align="center">处理请求地址映射</td></tr><tr><td align="center">@PathVariable</td><td align="center">参数</td><td align="center">取出url中的变量作为参数（一般与@RequestMapping等注解使用，例：@RequestMapping(“&#x2F;user&#x2F;{id}”)）</td></tr><tr><td align="center">@RequestParam</td><td align="center">参数</td><td align="center">从 Request 里获取参数值（例：<a href="http://localshost:8080/user?id=1%EF%BC%89">http://localshost:8080/user?id=1）</a></td></tr><tr><td align="center">@RequestBody</td><td align="center">实体参数</td><td align="center">接收前端传来的实体，后端需要封装一个实体来接收</td></tr><tr><td align="center">@ResponseBody</td><td align="center">方法</td><td align="center">将返回的数据转换为 JSON 格式</td></tr><tr><td align="center">@CookieValue</td><td align="center">参数</td><td align="center">获取Cookie中的值</td></tr></tbody></table><h2 id="Mybatis常用注解"><a href="#Mybatis常用注解" class="headerlink" title="Mybatis常用注解"></a>Mybatis常用注解</h2><table><thead><tr><th align="center">注解</th><th align="center">作用范围</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">@MapperScan</td><td align="center">类</td><td align="center">扫描某个包目录下的Mapper</td></tr><tr><td align="center">@Mapper</td><td align="center">接口类</td><td align="center">在接口类上添加了@Mapper，运行时就会生成相应的接口实现类。Mapper较多使用@MapperScan进行全部扫描</td></tr><tr><td align="center">@Insert</td><td align="center">方法</td><td align="center">插入数据</td></tr><tr><td align="center">@Select</td><td align="center">方法</td><td align="center">查询数据</td></tr><tr><td align="center">@Update</td><td align="center">方法</td><td align="center">更新数据</td></tr><tr><td align="center">@Delete</td><td align="center">方法</td><td align="center">删除数据</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;注解&quot;&gt;&lt;a href=&quot;#注解&quot; class=&quot;headerlink&quot; title=&quot;注解&quot;&gt;&lt;/a&gt;注解&lt;/h1&gt;&lt;h2 id=&quot;Spring常用注解&quot;&gt;&lt;a href=&quot;#Spring常用注解&quot; class=&quot;headerlink&quot; title=&quot;Sprin</summary>
      
    
    
    
    <category term="Java开发" scheme="https://blog.bywind.xyz/categories/Java%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="SSM" scheme="https://blog.bywind.xyz/tags/SSM/"/>
    
  </entry>
  
</feed>
